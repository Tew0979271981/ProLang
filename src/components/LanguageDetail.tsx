import React from 'react';
import type { Language } from '../utils/language.ts';
import { getDifficultyClass } from '../utils/card.ts';
import { CodeBlock } from './Codeblock.tsx';
import clsx from 'clsx'; // *** ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ *** (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö props ‡∏Ç‡∏≠‡∏á LanguageDetail
interface LanguageDetailProps {
  language: Language;
  onClose: () => void;
  // **** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ titleColor ‡πÄ‡∏õ‡πá‡∏ô optional ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà ? ****
  titleColor?: string;
}

// **** ‡∏£‡∏±‡∏ö titleColor ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô parameter list ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ default ****
export default function LanguageDetail({ language, onClose, titleColor = 'text-gray-900' }: LanguageDetailProps) {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  const formatYear = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return new Intl.DateTimeFormat('th-TH', { day: 'numeric', month: 'long', year: 'numeric' }).format(date);
    } catch (e) {
      console.error("Error formatting date:", e);
      return dateString;
    }
  };

  // ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÄ‡∏ä‡πà‡∏ô fields, pros, cons)
  // **** ‡πÄ‡∏û‡∏¥‡πà‡∏° `borderColor` prop ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ****
  const InfoSection = ({ title, items, color = "text-gray-800", emoji, borderColor = "border-blue-500" }: { title: string; items: string[]; color?: string; emoji: string; borderColor?: string }) => (
    <div className="mb-6 bg-white p-6 rounded-lg shadow-md border border-gray-100">
      {/* **** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÉ‡∏ä‡πâ `borderColor` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö class ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö **** */}
      {/* `color` ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, `borderColor` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö `border-l-4` */}
      <h3 className={clsx(`text-2xl font-bold mb-4 ${color} border-l-4 pl-4 bg-gradient-to-r from-blue-50 to-transparent py-2`, borderColor)}>
        {emoji} {title}
      </h3>
      <ul className="space-y-2 text-gray-700">
        {items.map((item, index) => (
          <li key={index} className="flex items-start">
            <span className="w-2 h-2 bg-gray-400 rounded-full mt-2 mr-3 flex-shrink-0"></span>
            <span className="leading-relaxed">{item}</span>
          </li>
        ))}
      </ul>
    </div>
  );

  // ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ (Variables, Functions, Syntax)
  // `titleColor` ‡πÉ‡∏ô DetailSection ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ `borderColor` ‡∏Ç‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ
  const DetailSection = ({ title, type, data, titleColor = "border-purple-500", bgColor = "from-purple-50", emoji }: {
    title: string;
    type: string;
    data: any;
    titleColor?: string; // Prop ‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á class ‡∏Ç‡∏≠‡∏á border color
    bgColor?: string;
    emoji: string;
  }) => {
    return (
      <div className="mb-8 bg-white p-6 rounded-lg shadow-md border border-gray-100">
        {/* ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ titleColor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö border-l-4 ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß */}
        <h3 className={clsx(`text-2xl font-bold mb-4 text-gray-800 border-l-4 pl-4 bg-gradient-to-r ${bgColor} to-transparent py-2`, titleColor)}>
          {emoji} {title}
        </h3>
        <div className="space-y-4">
          {Object.entries(data).map(([key, value]: [string, any]) => {
            if (key === 'async' && type === 'Functions') {
                return null;
            }

            if (Array.isArray(value)) {
              return (
                <div key={key} className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                  <h4 className="text-lg font-semibold text-gray-800 mb-3 capitalize">
                    {key.replace('_', ' ')} :
                  </h4>
                  <div className="ml-2 space-y-2">
                    {value.map((item, i) => (
                      <div key={i} className="mb-2">
                        <CodeBlock
                          content={item}
                          typecontent={type}
                          className="my-2"
                        />
                      </div>
                    ))}
                  </div>
                </div>
              );
            }

            return (
              <div key={key} className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                <h4 className="text-lg font-semibold text-gray-800 mb-3 capitalize">
                  {key.replace('_', ' ')} :
                </h4>
                <div className="mb-2 ml-2">
                  <CodeBlock
                    content={value}
                    typecontent={type}
                    className="my-2"
                  />
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

return (
  <div className="language-detail max-h-screen overflow-y-auto">
    <button className="modal-close-button group sticky top-4 right-4 z-10 float-right" onClick={onClose}>
      <span className="text-2xl transition-transform group-hover:rotate-90 bg-white rounded-full w-8 h-8 flex items-center justify-center shadow-lg">&times;</span>
    </button>

    {/* ‡πÇ‡∏•‡πÇ‡∏Å‡πâ + ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤ */}
    <div className="flex items-center space-x-4 mb-6">
      <img
        src={import.meta.env.BASE_URL + language.logo}
        alt={`${language.name} logo`}
        className="language-detail-logo logo-animate"
      />
      {/* ‡πÉ‡∏ä‡πâ titleColor ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏´‡∏•‡∏±‡∏Å */}
      <h1 className={clsx("text-4xl font-bold", titleColor)}>{language.name}</h1>
    </div>

    {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
    <div className="mb-6">
      <h3 className="section-title">üßæ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h3>
      <p className="desc text-gray-700 leading-relaxed">{language.desc}</p>
    </div>

    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ */}
    <div className="info-grid grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
      <div className="info-box bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
        <span className="section-title block text-sm text-gray-600 mb-1">üë®‚Äçüíª ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á</span>
        <span className="text-lg font-medium text-gray-900">{language.by}</span>
      </div>
      <div className="info-box bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
        <span className="section-title block text-sm text-gray-600 mb-1">üìÜ ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ</span>
        <span className="text-lg font-medium text-gray-900">{formatYear(language.yr)}</span> {/* ‡πÉ‡∏ä‡πâ formatYear ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà */}
      </div>
      <div className="info-box bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
        <span className="section-title block text-sm text-gray-600 mb-1">üåü ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤</span>
        <span className={`lang-level-detail ${getDifficultyClass(language.level)} text-lg font-medium`}>
          {getDifficultyClass(language.level)}
        </span>
      </div>
      <div className="info-box bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
        <span className="section-title block text-sm text-gray-600 mb-1">üõ†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô</span>
        <div className="flex flex-wrap gap-2 mt-2">
          {language.par.map((p: string, i: number) => (
            <span key={i} className="tag bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm">{p}</span>
          ))}
        </div>
      </div>
    </div>

    {/* ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á */}
    {language.fields && language.fields.length > 0 && (
      <div className="section mb-8">
        <h2 className="section-title text-2xl font-bold mb-4">üíº ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á</h2>
        <div className="badge-group flex flex-wrap gap-2">
          {language.fields.map((use, idx) => (
            <span key={idx} className="badge green bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">{use}</span>
          ))}
        </div>
      </div>
    )}

    {/* Additional Information */}
    {language.rank && (
      <div className="section mb-8">
        <h2 className="section-title text-2xl font-bold mb-4">üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°</h2>
        <div className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
          <span className="text-lg">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°: <strong>#{language.rank}</strong></span>
        </div>
      </div>
    )}

    {language.salary_range && (
      <div className="section mb-8">
        <h2 className="section-title text-2xl font-bold mb-4">üí∞ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h2>
        <div className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
          <span className="text-lg">{language.salary_range}</span>
        </div>
      </div>
    )}

    {/* Main Content Sections */}
    <div className="space-y-8">
      <h2 className="Header text-3xl font-bold text-gray-900 mb-6 border-b-4 border-blue-500 pb-3 bg-gradient-to-r from-blue-50 to-indigo-50 px-4 py-3 rounded-lg">
        üß† ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      </h2>

      {/* ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ InfoSection ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á borderColor ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á */}
      {language.fields && language.fields.length > 0 && (
        <InfoSection title="‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å" items={language.fields} color="text-sky-400" emoji='üöÄ' borderColor="border-sky-500" />
      )}

      {language.pros && language.pros.length > 0 && (
        <InfoSection title="‡∏Ç‡πâ‡∏≠‡∏î‡∏µ" items={language.pros} color="text-green-700" emoji='‚úÖ' borderColor="border-green-500" />
      )}

      {language.cons && language.cons.length > 0 && (
        <InfoSection title="‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢" items={language.cons} color="text-red-700" emoji='‚ö†Ô∏è' borderColor="border-red-500" />
      )}

      {language.frameworks && language.frameworks.length > 0 && (
        <InfoSection title="‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ‡πÅ‡∏•‡∏∞‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ" items={language.frameworks} color="text-purple-700" emoji='üß©' borderColor="border-purple-500" />
      )}

      {language.learn && language.learn.length > 0 && (
        <InfoSection title="‡πÅ‡∏´‡∏•‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ" items={language.learn} color="text-indigo-700" emoji='üìö' borderColor="border-indigo-500" />
      )}
    </div>

    {/* Technical Details */}
    <div className="space-y-8">
      <h2 className="Header text-3xl font-bold text-gray-900 mb-6 border-b-4 border-blue-500 pb-3 bg-gradient-to-r from-blue-50 to-indigo-50 px-4 py-3 rounded-lg">
        üõ†Ô∏è ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
      </h2>

      {language.variables && (
        <DetailSection
          title="‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Variables)"
          type="Variables"
          data={language.variables}
          titleColor="border-blue-500"
          bgColor="from-blue-50"
          emoji='üî§'
        />
      )}

      {language.functions && (
        <DetailSection
          title="‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (Functions)"
          type="Functions"
          data={language.functions}
          titleColor="border-green-500"
          bgColor="from-green-50"
          emoji='üßÆ'
        />
      )}

      {language.syntax && (
        <DetailSection
          title="‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (Syntax)"
          type="Syntax"
          data={language.syntax}
          titleColor="border-orange-500"
          bgColor="from-orange-50"
          emoji='‚úçÔ∏è'
        />
      )}
    </div>

    {/* Footer spacing */}
    <div className="h-8"></div>
  </div>
);
}