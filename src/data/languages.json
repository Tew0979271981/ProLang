[
    {
      "id": 1,
      "name": "JavaScript",
      "slug": "javascript",
      "logo": "img/js.png",
      "desc": "JavaScript คือภาษาโปรแกรมที่ทำให้เว็บมีชีวิตชีวา ทั้งปุ่มกด, แอนิเมชัน หรือการตรวจสอบข้อมูล รวมถึงสร้างแอปมือถือและโปรแกรมคอมพิวเตอร์ได้ด้วย",
      "by": "Brendan Eich",
      "yr": "December 4, 1995",
      "level": "4",
      "par": ["Multi-paradigm", "Event-driven", "Functional"],
      "fields": ["Web Frontend", "Web Backend", "Mobile Apps", "Desktop Applications", "Game Development", "AI / Machine Learning", "DevOps / Automation"],
      "rank": "1 ในกลุ่ม Web Development (ใช้โดย 62.3% ของนักพัฒนาทั่วโลก)",
      "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-85,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high", "veryhigh"],
      "pros": [
          "ใช้ได้หลายแพลตฟอร์ม (เว็บ, มือถือ, คอมพิวเตอร์)",
          "มีแหล่งเรียนรู้และตัวช่วยเยอะมาก",
          "เริ่มต้นเรียนรู้ได้ง่าย",
          "ทำงานหลายอย่างพร้อมกันได้ดี",
          "ปรับเปลี่ยนการใช้งานได้หลากหลาย"
      ],
      "cons": [
          "การเขียนโค้ดอิสระ อาจทำให้ไม่เป็นระเบียบ",
          "ทำงานซับซ้อนมากๆ ได้ช้ากว่าบางภาษา",
          "การจัดการงานที่ต้องรออาจยุ่งยาก",
          "อาจแสดงผลต่างกันในแต่ละเบราว์เซอร์",
          "โค้ดบนเว็บสามารถถูกดูและแก้ไขง่าย"
      ],
      "frameworks": ["React", "Angular", "Vue.js", "Node.js (Runtime)", "Express.js", "Next.js"],
      "learn": ["MDN Web Docs", "freeCodeCamp", "The Modern JavaScript Tutorial", "JavaScript.info"],
      "variables": {
          "declaration": ["var", "let", "const"],
          "types": ["String", "Number", "Boolean", "Null", "Undefined", "Symbol", "BigInt", "Object", "Array"],
          "examples": [
              "var name = 'John'; // กำหนดตัวแปร name เก็บสตริง 'John'",
              "let age = 30; // กำหนดตัวแปร age เก็บตัวเลข 30 (เปลี่ยนค่าได้)",
              "const PI = 3.14; // กำหนดค่าคงที่ PI เป็น 3.14 (เปลี่ยนค่าไม่ได้)",
              "let numbers = [1, 2, 3]; // กำหนดตัวแปร numbers เก็บรายการตัวเลข"
          ]
      },
      "functions": {
          "declaration": ["function name(params) { ... }", "() => { ... } (Arrow Function)"],
          "examples": [
              "function greet(name) { return 'Hello ' + name; } // ฟังก์ชัน greet เพื่อทักทาย",
              "const add = (a, b) => a + b; // ฟังก์ชัน add แบบย่อ (Arrow Function) เพื่อบวกเลข"
          ],
          "built_in": ["console.log()", "setTimeout()", "fetch()", "JSON.parse()", "Array.map()"]
      },
      "syntax": {
          "comments": ["// Single line // คอมเมนต์บรรทัดเดียว", "/* Multi line */ // คอมเมนต์หลายบรรทัด"],
          "conditions": ["if...else", "switch"],
          "loops": ["for", "while", "do...while", "forEach", "for...of", "for...in"],
          "operators": ["+", "-", "*", "/", "%", "==", "===", "!=", "!==", "&&", "||", "!"],
          "examples": [
              "if (age >= 18) { console.log('Adult'); } else { console.log('Minor'); } // ถ้าอายุถึง 18 เป็นผู้ใหญ่ ไม่งั้นเป็นเด็ก",
              "for (let i = 0; i < 5; i++) { console.log(i); } // วนลูปให้ i มีค่า 0 ถึง 4",
              "const fruits = ['apple', 'banana']; fruits.forEach(f => console.log(f)); // วนลูปแสดงผลไม้ทุกอัน"
          ]
      }
    },
    {
      "id": 2,
      "name": "Python",
      "slug": "python",
      "logo": "img/python.png",
      "desc": "Python คือภาษาโปรแกรมที่ใช้งานง่ายและหลากหลาย เน้นความอ่านง่ายของโค้ด เหมาะสำหรับงานด้านวิทยาศาสตร์ข้อมูล, AI, เว็บ และการทำงานอัตโนมัติ",
      "by": "Guido van Rossum",
      "yr": "February 20, 1991",
      "level": "4",
      "par": ["Object-Oriented", "Imperative", "Functional", "Procedural", "Reflective"],
      "fields": ["AI / Machine Learning", "Data Science / Analytics", "Web Backend", "Scripting / Automation", "Robotics / IoT", "Scientific Computing", "System Programming", "Game Development"],
      "rank": "1 ภาษายอดนิยมสูงสุดโลก (TIOBE Index 2025 - 23.88%)",
      "salary_range": "฿40,000-65,000 บาท/เดือน (Junior), ฿65,000-120,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high", "veryhigh"],
      "pros": [
          "ไวยากรณ์เรียบง่าย อ่านและเรียนรู้ง่าย",
          "มีไลบรารีมาตรฐานขนาดใหญ่และแพ็กเกจภายนอกจำนวนมาก",
          "รองรับการทำงานหลากหลาย (เว็บ, AI, Data Science)",
          "ชุมชนผู้ใช้งานแข็งแกร่งและให้การสนับสนุนดี"
      ],
      "cons": [
          "ความเร็วในการประมวลผลช้ากว่าภาษาที่คอมไพล์",
          "การใช้หน่วยความจำสูงในบางแอปพลิเคชัน",
          "Global Interpreter Lock (GIL) จำกัดการทำงานแบบมัลติเธรดสำหรับงานที่ใช้ CPU มาก"
      ],
      "frameworks": ["Django", "Flask", "FastAPI", "NumPy", "Pandas", "Scikit-learn", "TensorFlow", "PyTorch"],
      "learn": ["Python.org Official Docs", "Codecademy: Learn Python", "Real Python", "Google's Python Class"],
      "variables": {
          "declaration": ["variable_name = value", "x, y, z = 1, 2, 3 (Multiple Assignment)"],
          "types": ["int", "float", "str", "list", "tuple", "dict", "set", "bool", "NoneType"],
          "examples": [
              "name = \"Alice\" # กำหนดตัวแปร name เก็บสตริง \"Alice\"",
              "age = 25 # กำหนดตัวแปร age เก็บตัวเลข 25",
              "is_active = True # กำหนดตัวแปร is_active เก็บค่าความจริง True",
              "my_list = [10, 20, 30] # กำหนดตัวแ1ปร my_list เก็บรายการตัวเลข"
          ]
      },
      "functions": {
          "declaration": ["def function_name(params): ...", "lambda args: expression"],
          "examples": [
              "def calculate_area(width, height):\n  return width * height # ฟังก์ชันคำนวณพื้นที่",
              "add = lambda x, y: x + y # ฟังก์ชัน add แบบย่อ (Lambda Function) เพื่อบวกเลข"
          ],
          "built_in": ["print()", "len()", "input()", "range()", "type()", "str()", "int()", "list()"]
      },
      "syntax": {
          "comments": ["# Single line # คอมเมนต์บรรทัดเดียว", "\"\"\"Multi line\"\"\" # คอมเมนต์หลายบรรทัด"],
          "conditions": ["if...elif...else"],
          "loops": ["for", "while"],
          "operators": ["+", "-", "*", "/", "%", "//", "**", "==", "!=", ">", "<", ">=", "<=", "and", "or", "not", "in", "not in", "is", "is not"],
          "examples": [
              "if score >= 90: print('Grade A')\nelif score >= 70: print('Grade B')\nelse: print('Grade C') # ตรวจสอบคะแนนและแสดงเกรด",
              "for i in range(3): print(i) # วนลูปให้ i มีค่า 0 ถึง 2"
          ]
      }
    },
    {
      "id": 3,
      "name": "C",
      "slug": "c",
      "logo": "img/c.png",
      "desc": "C คือภาษาโปรแกรมที่มีประสิทธิภาพสูง ใช้สำหรับพัฒนาซอฟต์แวร์ระบบ เช่น ระบบปฏิบัติการ, ไดรเวอร์ และโปรแกรมที่ต้องการความเร็วสูง เหมาะสำหรับงานที่ต้องควบคุมฮาร์ดแวร์โดยตรง",
      "by": "Dennis Ritchie",
      "yr": "1972",
      "level": "2",
      "par": ["Procedural", "Imperative"],
      "fields": ["Game Development", "High-Performance Computing", "System Programming", "Embedded Systems", "Desktop Applications", "Finance / Trading Systems", "Robotics / IoT", "Network Programming", "AR / VR Development"],
      "rank": "4 ใน TIOBE Index 2025 (9.84% แต่ลดลง)",
      "salary_range": "฿30,000-50,000 บาท/เดือน (Junior), ฿50,000-80,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high", "veryhigh"],
      "pros": [
        "ประสิทธิภาพสูงมาก (ใกล้เคียงภาษาเครื่อง)",
        "ควบคุมฮาร์ดแวร์ได้ละเอียด",
        "มีไลบรารีขนาดใหญ่และหลากหลาย",
        "พื้นฐานสำคัญสำหรับภาษาอื่นๆ",
        "ขนาดโปรแกรมเล็ก ประหยัดทรัพยากร"
      ],
      "cons": [
        "เรียนรู้และใช้งานยากกว่าภาษาอื่นๆ",
        "ไม่มีการจัดการหน่วยความจำอัตโนมัติ (ต้องจัดการเอง)",
        "โค้ดอาจอ่านยากและเข้าใจยากสำหรับผู้เริ่มต้น",
        "ไม่มีคุณสมบัติ Object-Oriented โดยตรง",
        "ใช้เวลาในการพัฒนาค่อนข้างนาน"
      ],
      "frameworks": ["None (เป็นภาษาพื้นฐาน)", "OpenGL (Graphics)", "GTK+ (GUI)"],
      "learn": ["The C Programming Language (K&R)", "GeeksforGeeks C Tutorial", "Learn C The Hard Way", "C Programming Tutorial by Tutorials Point"],
      "variables": {
        "declaration": [
          "int age;",
          "float salary;",
          "char initial;",
          "double temperature;"
        ],
        "types": [
          "int (integer)",
          "float (single-precision floating-point)",
          "double (double-precision floating-point)",
          "char (character)",
          "void (no type)",
          "short",
          "long",
          "signed",
          "unsigned"
        ],
        "examples": [
          "int count = 10; // กำหนดตัวแปร count เก็บตัวเลข 10",
          "float price = 99.99f; // กำหนดตัวแปร price เก็บเลขทศนิยม",
          "char grade = 'A'; // กำหนดตัวแปร grade เก็บตัวอักษร",
          "double pi = 3.14159; // กำหนดตัวแปร pi เก็บเลขทศนิยมความละเอียดสูง"
        ]
      },
      "functions": {
        "declaration": [
          "return_type function_name(parameters) { /* ... */ }"
        ],
        "examples": [
          "int add(int a, int b) {\n  return a + b;\n}",
          "void print_message(char *msg) {\n  printf(\"%s\\n\", msg);\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "int sum = add(5, 3); // sum จะมีค่า 8",
          "print_message(\"Hello, C!\\n\"); // แสดงผล 'Hello, C!\\n'"
        ],
        "built_in": [
          "printf()",
          "scanf()",
          "malloc()",
          "free()",
          "strlen()",
          "strcpy()"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "switch (expression) { case value: /* ... */ break; default: /* ... */ }"
        ],
        "loops": [
          "for (initialization; condition; increment) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "do { /* ... */ } while (condition);"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)",
          "Bitwise: &, |, ^, ~, <<, >>"
        ],
        "examples": [
          "// Example of if-else",
          "int x = 10;\nif (x > 5) {\n  printf(\"x is greater than 5\\n\");\n} else {\n  printf(\"x is not greater than 5\\n\");\n}",
          "// Example of for loop",
          "for (int i = 0; i < 3; i++) {\n  printf(\"Loop: %d\\n\", i);\n}"
        ]
      }
    },
    {
      "id": 4,
      "name": "C++",
      "slug": "cpp",
      "logo": "img/cpp.png",
      "desc": "C++ คือภาษาโปรแกรมที่พัฒนาต่อยอดมาจาก C โดยเพิ่มความสามารถเชิงวัตถุ (Object-Oriented Programming) ทำให้สามารถสร้างโปรแกรมที่ซับซ้อนและมีโครงสร้างที่ดีได้ เหมาะสำหรับเกม, ซอฟต์แวร์ประสิทธิภาพสูง และระบบฝังตัว",
      "by": "Bjarne Stroustrup",
      "yr": "1979",
      "level": "3",
      "par": ["Multi-paradigm", "Object-Oriented", "Procedural", "Generic"],
      "fields": ["Game Development", "High-Performance Computing", "System Programming", "Embedded Systems", "Desktop Applications", "Finance / Trading Systems", "Robotics / IoT", "Network Programming", "AR / VR Development"],
      "rank": "2 ใน TIOBE Index 2025 (11.37% และเติบโตแรง)",
      "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-90,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high", "veryhigh"],
      "pros": [
        "ประสิทธิภาพสูงมาก (ใกล้เคียง C)",
        "รองรับการเขียนโปรแกรมเชิงวัตถุ (OOP)",
        "ควบคุมฮาร์ดแวร์และหน่วยความจำได้ละเอียด",
        "ใช้งานได้หลากหลายแพลตฟอร์ม",
        "มีไลบรารีมาตรฐานที่ทรงพลัง (STL)"
      ],
      "cons": [
        "มีความซับซ้อนในการเรียนรู้และใช้งาน",
        "การจัดการหน่วยความจำด้วยตนเองอาจเกิดข้อผิดพลาดได้ง่าย",
        "เวลาในการคอมไพล์โปรเจกต์ขนาดใหญ่อาจนาน",
        "Syntax และคุณสมบัติของภาษามีความซับซ้อนมาก",
        "การดีบักอาจทำได้ยากกว่าภาษาที่มี abstraction สูง"
      ],
      "frameworks": ["Qt (GUI)", "Boost (General Purpose)", "Unreal Engine (Game Dev)", "SFML (Game Dev)"],
      "learn": ["C++ Primer", "Effective Modern C++", "learncpp.com", "GeeksforGeeks C++ Tutorial"],
      "variables": {
        "declaration": [
          "int num;",
          "std::string text;",
          "bool isValid;"
        ],
        "types": [
          "int",
          "float",
          "double",
          "char",
          "bool",
          "long",
          "short",
          "unsigned",
          "std::string"
        ],
        "examples": [
          "int score = 100; // กำหนดตัวแปร score เก็บตัวเลข 100",
          "double pi = 3.14; // กำหนดตัวแปร pi เก็บเลขทศนิยม",
          "std::string name = \"Alice\"; // กำหนดตัวแปร name เก็บข้อความ",
          "bool is_active = true; // กำหนดตัวแปร is_active เก็บค่าความจริง"
        ]
      },
      "functions": {
        "declaration": [
          "return_type function_name(parameters) { /* ... */ }",
          "// Class member function",
          "class MyClass { public: void myMethod(); };"
        ],
        "examples": [
          "int multiply(int a, int b) {\n  return a * b;\n}",
          "void print_vector(const std::vector<int>& vec) {\n  for (int x : vec) { std::cout << x << \" \"; }\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "int product = multiply(4, 2); // product จะมีค่า 8",
          "std::vector<int> numbers = {1, 2, 3}; print_vector(numbers); // แสดงผล '1 2 3'"
        ],
        "built_in": [
          "std::cout",
          "std::cin",
          "std::vector",
          "std::map",
          "new",
          "delete"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "switch (expression) { case value: /* ... */ break; default: /* ... */ }"
        ],
        "loops": [
          "for (initialization; condition; increment) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "do { /* ... */ } while (condition);",
          "for (type var : collection) { /* ... */ } (Range-based for loop)"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)",
          "Bitwise: &, |, ^, ~, <<, >>"
        ],
        "examples": [
          "// Example of if-else",
          "int val = 20;\nif (val > 15) {\n  std::cout << \"Val is greater than 15\" << std::endl;\n} else {\n  std::cout << \"Val is not greater than 15\" << std::endl;\n}",
          "// Example of for loop",
          "for (int i = 0; i < 3; i++) {\n  std::cout << \"Loop C++: \" << i << std::endl;\n}"
        ]
      }
    },
    {
      "id": 5,
      "name": "C#",
      "slug": "csharp",
      "logo": "img/csharp.png",
      "desc": "C# (C-sharp) คือภาษาโปรแกรมเชิงวัตถุที่พัฒนาโดย Microsoft ใช้สำหรับสร้างแอปพลิเคชันหลากหลายประเภทบนแพลตฟอร์ม .NET เช่น Windows desktop apps, เว็บไซต์ (ASP.NET), เกม (Unity) และแอปบนมือถือ (Xamarin)",
      "by": "Microsoft (.NET team)",
      "yr": "2000",
      "level": "3",
      "par": ["Object-Oriented", "Component-Oriented", "Structured", "Imperative", "Functional"],
      "fields": ["Desktop Applications", "Web Backend", "Game Development", "Cloud Infrastructure"],
      "rank": "5 ใน TIOBE Index 2025 (4.12%)",
      "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-85,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "เป็นภาษาเชิงวัตถุที่ทันสมัยและทรงพลัง",
        "มี Ecosystem ที่สมบูรณ์แบบบน .NET",
        "เครื่องมือพัฒนา (Visual Studio) ที่มีประสิทธิภาพสูง",
        "มี Garbage Collection จัดการหน่วยความจำอัตโนมัติ",
        "สามารถสร้างแอปพลิเคชันได้หลากหลายประเภท"
      ],
      "cons": [
        "ผูกติดกับแพลตฟอร์ม .NET (แม้จะเปิดกว้างมากขึ้นกับ .NET Core)",
        "ประสิทธิภาพอาจไม่เท่า C/C++ สำหรับงานระดับต่ำมาก",
        "การเรียนรู้อาจมี Learning Curve สูงสำหรับบางฟีเจอร์",
        "โปรแกรมที่สร้างขึ้นมีขนาดใหญ่กว่า C/C++",
        "ชุมชนอาจไม่ใหญ่เท่า JavaScript หรือ Python ในบางด้าน"
      ],
      "frameworks": ["ASP.NET", "Unity (Game Engine)", "Xamarin (Mobile)", "Blazor (Web)"],
      "learn": ["Microsoft Learn: C#", "Head First C#", "Pluralsight C# Courses", "C# Station"],
      "variables": {
        "declaration": [
          "int age;",
          "string name;",
          "bool isActive;"
        ],
        "types": [
          "int (System.Int32)",
          "double (System.Double)",
          "string (System.String)",
          "bool (System.Boolean)",
          "char (System.Char)",
          "float (System.Single)",
          "decimal (System.Decimal)",
          "long (System.Int64)"
        ],
        "examples": [
          "int quantity = 50; // กำหนดตัวแปร quantity เก็บตัวเลข 50",
          "string product_name = \"Laptop\"; // กำหนดตัวแตร product_name เก็บข้อความ",
          "bool has_stock = true; // กำหนดตัวแปร has_stock เก็บค่าความจริง",
          "double price = 1200.50; // กำหนดตัวแปร price เก็บเลขทศนิยม"
        ]
      },
      "functions": {
        "declaration": [
          "public returnType MethodName(parameters) { /* ... */ }",
          "// Lambda expression (anonymous function)",
          "(parameters) => expression"
        ],
        "examples": [
          "public int Add(int a, int b) {\n  return a + b;\n}",
          "private void DisplayMessage(string message) {\n  Console.WriteLine(message);\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "int result = Add(10, 20); // result จะมีค่า 30",
          "DisplayMessage(\"Hello from C#!\"); // แสดงผล 'Hello from C#!'"
        ],
        "built_in": [
          "Console.WriteLine()",
          "List<T>",
          "Dictionary<TKey, TValue>",
          "DateTime.Now",
          "File.ReadAllText()"
        ],
        "async": [
          "public async Task<string> FetchDataAsync() {\n  await Task.Delay(1000);\n  return \"Data fetched asynchronously\";\n}"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "switch (expression) { case value: /* ... */ break; default: /* ... */ }"
        ],
        "loops": [
          "for (initialization; condition; increment) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "do { /* ... */ } while (condition);",
          "foreach (var item in collection) { /* ... */ }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)",
          "Null-coalescing: ??, ??="
        ],
        "examples": [
          "// Example of if-else",
          "int score = 75;\nif (score >= 80) {\n  Console.WriteLine(\"Grade A\");\n} else {\n  Console.WriteLine(\"Grade B\");\n}",
          "// Example of for loop",
          "for (int i = 0; i < 3; i++) {\n  Console.WriteLine($\"Loop C#: {i}\");\n}"
        ]
      }
    },
    {
      "id": 6,
      "name": "Java",
      "slug": "java",
      "logo": "img/java.png",
      "desc": "Java เป็นภาษาโปรแกรมเชิงวัตถุที่ได้รับความนิยมสูง ถูกออกแบบมาให้เขียนครั้งเดียวสามารถรันได้ทุกที่ (Write Once, Run Anywhere) มีการใช้งานอย่างกว้างขวางในแอปพลิเคชันระดับองค์กร, Android, และ Big Data",
      "by": "James Gosling",
      "yr": "1995",
      "level": "3",
      "par": ["Object-Oriented", "Concurrent", "Structured", "Imperative", "Generic"],
      "fields": ["Web Backend", "Mobile Apps", "Cloud Infrastructure", "Data Science / Analytics", "Finance / Trading Systems"],
      "rank": "3 ใน TIOBE Index 2025 (10.66%)",
      "salary_range": "฿35,000-60,000 บาท/เดือน (Junior), ฿60,000-100,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "แพลตฟอร์มเป็นอิสระ (JVM)",
        "ประสิทธิภาพสูงและเสถียร",
        "มี Ecosystem และไลบรารีขนาดใหญ่",
        "มีการจัดการหน่วยความจำอัตโนมัติ (Garbage Collection)",
        "ความปลอดภัยสูง"
      ],
      "cons": [
        "ใช้หน่วยความจำค่อนข้างมาก",
        "อาจมี Learning Curve สูงสำหรับผู้เริ่มต้น",
        "การเขียนโค้ดอาจดูเยอะกว่าภาษาที่ทันสมัยกว่า",
        "เวลาในการ Start-up แอปพลิเคชันอาจช้า"
      ],
      "frameworks": ["Spring Boot", "Hibernate", "Android SDK", "Apache Kafka", "Apache Spark"],
      "learn": ["Oracle Java Documentation", "Baeldung", "GeeksforGeeks Java Tutorial", "Coursera: Java Programming"],
      "variables": {
        "declaration": [
          "int count;",
          "String message;",
          "boolean status;"
        ],
        "types": [
          "byte", "short", "int", "long", "float", "double", "char", "boolean",
          "String", "Object", "Array"
        ],
        "examples": [
          "int age = 20; // กำหนดตัวแปร age เก็บตัวเลข 20",
          "String name = \"Bob\"; // กำหนดตัวแปร name เก็บข้อความ",
          "boolean isActive = false; // กำหนดตัวแปร isActive เก็บค่าความจริง",
          "double price = 19.99; // กำหนดตัวแปร price เก็บเลขทศนิยม"
        ]
      },
      "functions": {
        "declaration": [
          "public static returnType methodName(parameters) { /* ... */ }",
          "// Lambda expression",
          "(parameters) -> expression"
        ],
        "examples": [
          "public int sum(int a, int b) {\n  return a + b;\n}",
          "public void displayInfo(String data) {\n  System.out.println(data);\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "int total = sum(7, 8); // total จะมีค่า 15",
          "displayInfo(\"Java rocks!\"); // แสดงผล 'Java rocks!'"
        ],
        "built_in": [
          "System.out.println()",
          "ArrayList<T>",
          "HashMap<K, V>",
          "Math.random()",
          "File.exists()"
        ],
        "async": [
          "// Concurrency using Threads/Executors or CompletableFuture"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "switch (expression) { case value: /* ... */ break; default: /* ... */ }"
        ],
        "loops": [
          "for (initialization; condition; increment) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "do { /* ... */ } while (condition);",
          "for (Type item : collection) { /* ... */ } (Enhanced for loop)"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "int time = 20;\nif (time < 18) {\n  System.out.println(\"Good day.\");\n} else {\n  System.out.println(\"Good evening.\");\n}",
          "// Example of for loop",
          "for (int i = 0; i < 3; i++) {\n  System.out.println(\"Loop Java: \" + i);\n}"
        ]
      }
    },
    {
      "id": 7,
      "name": "Go",
      "slug": "go",
      "logo": "img/go.png",
      "desc": "Go (หรือ Golang) เป็นภาษาโปรแกรมที่พัฒนาโดย Google เน้นความเรียบง่าย, ประสิทธิภาพสูง และรองรับการทำงานแบบ Concurrency ได้ดี เหมาะสำหรับ Backend services, Cloud computing, และ Networking tools",
      "by": "Robert Griesemer, Rob Pike, Ken Thompson",
      "yr": "2009",
      "level": "2",
      "par": ["Concurrent", "Structured", "Imperative"],
      "fields": ["Web Backend", "Cloud Infrastructure", "System Programming", "Network Programming"],
      "rank": "6-8 และเติบโตแรงใน Cloud/Backend (เพิ่มขึ้น 1.2% ใน 2024)",
      "salary_range": "฿45,000-70,000 บาท/เดือน (Junior), ฿70,000-130,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "ประสิทธิภาพสูง (ใกล้เคียง C/C++)",
        "รองรับ Concurrency ได้ดีด้วย Goroutines",
        "Syntax เรียบง่าย เรียนรู้ง่าย",
        "มีเครื่องมือในตัวครบวงจร (Go tools)",
        "คอมไพล์เป็น Single Binary ทำให้ง่ายต่อการ Deploy"
      ],
      "cons": [
        "ไม่มี Generics จนถึง Go 1.18 (แต่ตอนนี้มีแล้ว)",
        "ไม่มี OOP แบบคลาส (ใช้ Structs แทน)",
        "การจัดการ Error ที่ค่อนข้างเยอะ (error handling)",
        "ชุมชนยังเล็กกว่าภาษาเก่าแก่"
      ],
      "frameworks": ["Gin", "Echo", "Revel"],
      "learn": ["Go Tour", "Go by Example", "Effective Go", "Golang Official Documentation"],
      "variables": {
        "declaration": [
          "var name string = \"John\"",
          "age := 30 // Shorthand declaration"
        ],
        "types": [
          "int", "int8", "int16", "int32", "int64",
          "uint", "uint8", "uint16", "uint32", "uint64",
          "float32", "float64",
          "bool",
          "string",
          "array", "slice", "map", "struct"
        ],
        "examples": [
          "var message string = \"Hello Go!\"; // กำหนดตัวแปร message เป็นสตริง",
          "count := 100; // กำหนดตัวแปร count เป็นตัวเลขด้วย :=",
          "isActive := true; // กำหนดตัวแปร isActive เป็น boolean"
        ]
      },
      "functions": {
        "declaration": [
          "func functionName(param1 type) returnType { /* ... */ }"
        ],
        "examples": [
          "func add(a, b int) int {\n  return a + b\n}",
          "func greet(name string) string {\n  return fmt.Sprintf(\"Hello, %s!\", name)\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "result := add(10, 20) // result จะมีค่า 30",
          "message := greet(\"Gopher\") // message จะมีค่า 'Hello, Gopher!'"
        ],
        "built_in": [
          "fmt.Println()",
          "make()",
          "len()",
          "append()",
          "copy()",
          "cap()"
        ],
        "async": [
          "// Goroutine (concurrency)",
          "go functionName()"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if condition { /* ... */ } else if condition { /* ... */ } else { /* ... */ }"
        ],
        "loops": [
          "for initialization; condition; post {\n  /* ... */\n}",
          "for condition { /* ... */ }",
          "for { /* ... */ } (Infinite loop)"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "age := 18\nif age >= 18 {\n  fmt.Println(\"Adult\")\n} else {\n  fmt.Println(\"Minor\")\n}",
          "// Example of for loop",
          "for i := 0; i < 3; i++ {\n  fmt.Println(\"Loop Go:\", i)\n}"
        ]
      }
    },
    {
      "id": 8,
      "name": "Rust",
      "slug": "rust",
      "logo": "img/rust.png",
      "desc": "Rust เป็นภาษาโปรแกรมที่เน้นความปลอดภัยของหน่วยความจำ, ความเร็ว และ Concurrency โดยไม่ใช้ Garbage Collector เหมาะสำหรับ System programming, WebAssembly, และ Blockchain",
      "by": "Mozilla Research",
      "yr": "2010",
      "level": "2",
      "par": ["Multi-paradigm", "Functional", "Imperative", "Concurrent"],
      "fields": ["System Programming", "Web Backend", "Blockchain", "Embedded Systems", "Network Programming", "Game Development"],
      "rank": "15 ใน TIOBE แต่เป็น Most Loved Language (84.9% ของนักพัฒนาชอบ)",
      "salary_range": "฿40,000-65,000 บาท/เดือน (Junior), ฿65,000-110,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high", "veryhigh"],
      "pros": [
        "ความปลอดภัยของหน่วยความจำ (Memory Safety) โดยไม่มี GC",
        "ประสิทธิภาพสูงมาก",
        "รองรับ Concurrency ได้อย่างปลอดภัย",
        "ระบบ Type ที่แข็งแกร่ง (Strong Type System)",
        "มีเครื่องมือจัดการแพ็คเกจที่ดี (Cargo)"
      ],
      "cons": [
        "Learning Curve สูงมาก (โดยเฉพาะเรื่อง Borrowing และ Lifetimes)",
        "เวลาในการคอมไพล์ค่อนข้างนาน",
        "Syntax อาจจะซับซ้อนสำหรับผู้เริ่มต้น",
        "ชุมชนยังเล็กกว่าภาษาหลักๆ"
      ],
      "frameworks": ["Actix Web", "Rocket", "Yew (WebAssembly)"],
      "learn": ["The Rust Programming Language Book", "Rustlings", "Rust by Example", "Ferris' Guide"],
      "variables": {
        "declaration": [
          "let x = 5; // Immutable by default",
          "let mut y = 10; // Mutable variable"
        ],
        "types": [
          "i8", "i16", "i32", "i64", "i128", "isize",
          "u8", "u16", "u32", "u64", "u128", "usize",
          "f32", "f64",
          "bool", "char",
          "tuple", "array", "slice", "struct", "enum"
        ],
        "examples": [
          "let age = 30; // ตัวแปร age (ค่าเปลี่ยนไม่ได้)",
          "let mut count = 0; // ตัวแปร count (ค่าเปลี่ยนได้)",
          "let greeting = \"Hello, Rust!\"; // ตัวแปร greeting เก็บสตริง"
        ]
      },
      "functions": {
        "declaration": [
          "fn function_name(param: Type) -> ReturnType { /* ... */ }"
        ],
        "examples": [
          "fn add(a: i32, b: i32) -> i32 {\n  a + b\n}",
          "fn greet(name: &str) {\n  println!(\"Hello, {}\", name);\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "let sum = add(5, 5); // sum จะมีค่า 10",
          "greet(\"World\"); // แสดงผล 'Hello, World!'"
        ],
        "built_in": [
          "println!() (Macro)",
          "vec![] (Macro)",
          "Option<T>",
          "Result<T, E>",
          "String::from()"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if condition { /* ... */ } else if condition { /* ... */ } else { /* ... */ }"
        ],
        "loops": [
          "loop { /* ... */ } (Infinite loop)",
          "while condition { /* ... */ }",
          "for item in collection { /* ... */ }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "let num = 10;\nif num > 5 {\n  println!(\"Num is greater than 5\");\n} else {\n  println!(\"Num is not greater than 5\");\n}",
          "// Example of for loop",
          "for i in 0..3 {\n  println!(\"Loop Rust: {}\", i);\n}"
        ]
      }
    },
    {
      "id": 9,
      "name": "TypeScript",
      "slug": "typescript",
      "logo": "img/ts.png",
      "desc": "TypeScript คือ Superset ของ JavaScript ที่เพิ่มความสามารถด้าน Static Typing ทำให้โค้ดมีโครงสร้างมากขึ้น, ตรวจสอบข้อผิดพลาดได้ตั้งแต่ตอนพัฒนา และช่วยให้พัฒนาโปรเจกต์ขนาดใหญ่ได้ง่ายขึ้น",
      "by": "Microsoft",
      "yr": "2012",
      "level": "4",
      "par": ["Multi-paradigm", "Object-Oriented", "Functional"],
      "fields": ["Web Frontend", "Web Backend", "Mobile Apps", "Desktop Applications"],
      "rank": "12 แต่เติบโตแรงใน Modern Web Development (ใช้โดย 38.8% ของนักพัฒนา)",
      "salary_range": "฿40,000-65,000 บาท/เดือน (Junior), ฿65,000-120,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "เพิ่มความปลอดภัยของโค้ดด้วย Type Checking",
        "ช่วยให้โค้ดมีโครงสร้างและอ่านง่ายขึ้น",
        "รองรับคุณสมบัติใหม่ๆ ของ JavaScript ล่วงหน้า",
        "เครื่องมือพัฒนา (IDE) รองรับได้ดีเยี่ยม",
        "ปรับปรุงการ Refactor และ Maintenance โค้ด"
      ],
      "cons": [
        "ต้องใช้เวลาเรียนรู้เพิ่มเติมจาก JavaScript",
        "ต้องมีการตั้งค่าและ Compile ก่อนรัน (Transpilation)",
        "อาจเพิ่มความซับซ้อนในโปรเจกต์ขนาดเล็ก",
        "Error Messages บางครั้งอาจเข้าใจยาก"
      ],
      "frameworks": ["Angular", "React (with TS)", "Vue.js (with TS)", "Node.js (with TS)", "NestJS"],
      "learn": ["TypeScript Handbook", "Definitely Typed", "TypeScript for JavaScript Developers", "FreeCodeCamp TypeScript"],
      "variables": {
        "declaration": [
          "let name: string = \"Alice\";",
          "const age: number = 25;",
          "let isActive: boolean = true;"
        ],
        "types": [
          "string", "number", "boolean", "null", "undefined", "symbol", "bigint",
          "any", "unknown", "void", "never",
          "Array<T>", "T[]", "Object", "Tuple", "Enum"
        ],
        "examples": [
          "let message: string = \"Hello TS!\"; // กำหนดตัวแปร message เป็นสตริง",
          "let count: number = 50; // กำหนดตัวแปร count เป็นตัวเลข",
          "const PI: number = 3.14159; // กำหนดค่าคงที่ PI",
          "let users: string[] = [\"Bob\", \"Charlie\"]; // กำหนดตัวแปร users เป็น Array ของสตริง"
        ]
      },
      "functions": {
        "declaration": [
          "function funcName(param: Type): ReturnType { ... }",
          "const arrowFunc = (param: Type): ReturnType => { ... };"
        ],
        "examples": [
          "function sum(a: number, b: number): number {\n  return a + b;\n}",
          "const greet = (name: string): string => `Hello, ${name}!`;",
          "// การเรียกใช้ฟังก์ชัน",
          "let total: number = sum(10, 5); // total จะมีค่า 15",
          "let welcome: string = greet(\"TypeScript\"); // welcome จะมีค่า 'Hello, TypeScript!'"
        ],
        "built_in": [
          "console.log()",
          "Array.prototype.map()",
          "JSON.parse()",
          "Date",
          "Promise"
        ],
        "async": [
          "async function fetchData(): Promise<string> {\n  const response = await fetch('/data');\n  return response.text();\n}"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "switch (expression) { case value: /* ... */ break; default: /* ... */ }"
        ],
        "loops": [
          "for (let i = 0; i < 5; i++) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "for (const item of array) { /* ... */ }",
          "array.forEach(item => { /* ... */ });"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, ===, !==, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "let temperature: number = 25;\nif (temperature > 30) {\n  console.log('Hot day');\n} else {\n  console.log('Normal day');\n}",
          "// Example of for loop",
          "for (let i = 0; i < 3; i++) {\n  console.log(`Loop TS: ${i}`);\n}"
        ]
      }
    },
    {
      "id": 10,
      "name": "PHP",
      "slug": "php",
      "logo": "img/php.png",
      "desc": "PHP เป็นภาษา Scripting ฝั่ง Server ที่ออกแบบมาเพื่อพัฒนา Web Application โดยเฉพาะ มีความนิยมอย่างมากในการสร้างเว็บไซต์แบบ Dynamic และมีการใช้งานอย่างแพร่หลายใน CMS ยอดนิยมอย่าง WordPress",
      "by": "Rasmus Lerdorf",
      "yr": "1994",
      "level": "4",
      "par": ["Procedural", "Object-Oriented", "Imperative", "Functional"],
      "fields": ["Web Backend"],
      "rank": "13-17 ลดลงอย่างต่อเนื่อง (ตำแหน่งต่ำสุดเท่าที่เคยมี)",
      "salary_range": "฿25,000-40,000 บาท/เดือน (Junior), ฿40,000-70,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "เรียนรู้และเริ่มต้นใช้งานง่าย",
        "มี Frameworks และ Libraries ที่หลากหลาย",
        "ทำงานได้ดีกับฐานข้อมูล",
        "มีชุมชนขนาดใหญ่",
        "รองรับ Web Hosting ได้กว้างขวาง"
      ],
      "cons": [
        "ประสิทธิภาพอาจไม่สูงเท่าบางภาษาในบางกรณี",
        "การจัดการ Error อาจไม่ดีเท่าที่ควรในเวอร์ชันเก่าๆ",
        "ความสอดคล้องของ Syntax อาจไม่ชัดเจนเท่าภาษาอื่น",
        "อาจมีปัญหาเรื่องความปลอดภัยหากไม่ระมัดระวัง"
      ],
      "frameworks": ["Laravel", "Symfony", "CodeIgniter", "Zend Framework", "WordPress"],
      "learn": ["PHP.net Official Manual", "Laracasts", "W3Schools PHP Tutorial", "Traversy Media PHP"],
      "variables": {
        "declaration": [
          "$name = \"John\";",
          "$age = 30;"
        ],
        "types": [
          "Integer", "Float", "String", "Boolean", "Array", "Object", "NULL", "Resource"
        ],
        "examples": [
          "$product = \"Laptop\"; // กำหนดตัวแปร product เก็บสตริง",
          "$quantity = 10; // กำหนดตัวแปร quantity เก็บตัวเลข",
          "$is_available = true; // กำหนดตัวแปร is_available เก็บค่าความจริง",
          "$prices = [100, 200, 300]; // กำหนดตัวแปร prices เก็บ Array"
        ]
      },
      "functions": {
        "declaration": [
          "function functionName($param1, $param2) { /* ... */ }",
          "// Anonymous function (Closure)",
          "function ($param) use ($variable) { /* ... */ };"
        ],
        "examples": [
          "function greet($name) {\n  return \"Hello, \" . $name . \"!\";\n}",
          "function add($a, $b) {\n  return $a + $b;\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "$message = greet(\"PHP\"); // $message จะมีค่า 'Hello, PHP!'",
          "$sum = add(10, 15); // $sum จะมีค่า 25"
        ],
        "built_in": [
          "echo()",
          "print()",
          "strlen()",
          "str_replace()",
          "array_push()",
          "isset()"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "# Another single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } elseif (condition) { /* ... */ } else { /* ... */ }",
          "switch (expression) { case value: /* ... */ break; default: /* ... */ }"
        ],
        "loops": [
          "for (initialization; condition; increment) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "do { /* ... */ } while (condition);",
          "foreach ($array as $item) { /* ... */ }",
          "foreach ($array as $key => $value) { /* ... */ }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %, **",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, ===, !=, !==, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "$age = 20;\nif ($age >= 18) {\n  echo \"Adult\";\n} else {\n  echo \"Minor\";\n}",
          "// Example of for loop",
          "for ($i = 0; $i < 3; $i++) {\n  echo \"Loop PHP: \" . $i . \"\\n\";\n}"
        ]
      }
    },
    {
      "id": 11,
      "name": "Ruby",
      "slug": "ruby",
      "logo": "img/ruby.png",
      "desc": "Ruby เป็นภาษาโปรแกรม Dynamic, Object-Oriented ที่เน้นความเรียบง่ายและ Productivitiy สูง โดยเฉพาะอย่างยิ่งเมื่อใช้ร่วมกับ Ruby on Rails Framework ซึ่งเป็นที่นิยมในการสร้าง Web Application",
      "by": "Yukihiro Matsumoto",
      "yr": "1995",
      "level": "4",
      "par": ["Object-Oriented", "Imperative", "Functional", "Reflective"],
      "fields": ["Web Backend"],
      "rank": "14 และลดลงต่อเนื่อง (2.1% ใน TIOBE)",
      "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-95,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "Syntax สวยงามและอ่านง่าย",
        "มี Ruby on Rails Framework ที่ทรงพลังสำหรับการพัฒนาเว็บ",
        "มีชุมชนที่กระตือรือร้น",
        "การพัฒนาที่รวดเร็ว (Rapid Development)",
        "เน้นความเป็น Object-Oriented"
      ],
      "cons": [
        "ประสิทธิภาพอาจไม่สูงเท่าภาษาอื่นๆ สำหรับงานที่ต้องใช้ความเร็วสูง",
        "Learning Curve ของ Rails Framework อาจสูงสำหรับผู้เริ่มต้น",
        "ทรัพยากรสำหรับการเรียนรู้ภาษา Ruby อย่างเดียวอาจน้อยกว่าภาษาอื่น",
        "อาจมีปัญหาเรื่อง Scaling ในบางกรณี"
      ],
      "frameworks": ["Ruby on Rails", "Sinatra"],
      "learn": ["Ruby-Doc.org", "Ruby Guides", "Learn Ruby the Hard Way", "Codecademy: Learn Ruby"],
      "variables": {
        "declaration": [
          "name = \"Alice\"",
          "@instance_var = 10",
          "@@class_var = 20"
        ],
        "types": [
          "String", "Integer", "Float", "Boolean", "Array", "Hash", "Symbol", "NilClass"
        ],
        "examples": [
          "product = \"Book\" # กำหนดตัวแปร product เป็นสตริง",
          "quantity = 5 # กำหนดตัวแปร quantity เป็นตัวเลข",
          "is_available = true # กำหนดตัวแปร is_available เป็น Boolean"
        ]
      },
      "functions": {
        "declaration": [
          "def method_name(param1, param2)\n  # ...\nend",
          "lambda { |param| ... }"
        ],
        "examples": [
         "def greet(name)\\n  \\\"Hello, \\\\#{name}!\\\"\\nend",
          "add = ->(a, b) { a + b }",
          "// การเรียกใช้ฟังก์ชัน",
          "message = greet(\"Ruby\") # message จะมีค่า 'Hello, Ruby!'",
          "sum = add.call(5, 7) # sum จะมีค่า 12"
        ],
        "built_in": [
          "puts",
          "gets",
          "length",
          "each",
          "map",
          "require"
        ]
      },
      "syntax": {
        "comments": [
          "# Single line comment",
          "=begin\nMulti-line\ncomment\n=end"
        ],
        "conditions": [
          "if condition\n  # ...\nelsif another_condition\n  # ...\nelse\n  # ...\nend",
          "case expression\nwhen value1 then # ...\nwhen value2 then # ...\nelse # ...\nend"
        ],
        "loops": [
          "for item in collection do # ... end",
          "while condition do # ... end",
          "loop do # ... break if condition ... end",
          "collection.each { |item| # ... }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=, <=>",
          "Logical: && (and), || (or), ! (not)"
        ],
        "examples": [
          "// Example of if-else",
          "age = 22\nif age >= 18\n  puts \"Adult\"\nelse\n  puts \"Minor\"\nend",
          "// Example of for loop",
          "for i in 0..2\\n  puts \\\"Loop Ruby: \\\\#{i}\\\"\\nend"
        ]
      }
    },
    {
      "id": 12,
      "name": "Swift",
      "slug": "swift",
      "logo": "img/swift.png",
      "desc": "Swift เป็นภาษาโปรแกรมที่พัฒนาโดย Apple สำหรับสร้างแอปพลิเคชันบน iOS, macOS, watchOS, tvOS และ Linux เน้นความปลอดภัย, ประสิทธิภาพ และความทันสมัยในการเขียนโค้ด",
      "by": "Apple Inc.",
      "yr": "2014",
      "level": "3",
      "par": ["Multi-paradigm", "Object-Oriented", "Functional", "Protocol-Oriented"],
      "fields": ["Mobile Apps", "Desktop Applications"],
      "rank": "10-12 สำหรับ iOS Development แต่กำลังลดลง (1.8% ใน TIOBE)",
      "salary_range": "฿40,000-65,000 บาท/เดือน (Junior), ฿65,000-110,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "ประสิทธิภาพสูง",
        "ปลอดภัยจากข้อผิดพลาดของหน่วยความจำ (Memory Safety)",
        "Syntax ที่อ่านง่ายและกระชับ",
        "มี Playgrounds สำหรับทดลองโค้ดได้ทันที",
        "รองรับ Concurrency และ Asynchronous Programming ได้ดี"
      ],
      "cons": [
        "ส่วนใหญ่ผูกติดกับ Ecosystem ของ Apple",
        "Learning Curve อาจสูงสำหรับผู้เริ่มต้น",
        "เครื่องมือพัฒนา (Xcode) อาจใช้ทรัพยากรมาก",
        "ชุมชนนักพัฒนาอาจเล็กกว่าภาษาอื่นๆ"
      ],
      "frameworks": ["UIKit", "SwiftUI", "Combine", "Vapor", "Kitura"],
      "learn": ["Apple Swift Documentation", "Hacking with Swift", "Ray Wenderlich", "Codecademy: Learn Swift"],
      "variables": {
        "declaration": [
          "var greeting = \"Hello\"; // Mutable",
          "let name = \"World\"; // Immutable"
        ],
        "types": [
          "String", "Int", "Double", "Bool", "Character", "Array<T>", "Dictionary<K, V>", "Optional<T>"
        ],
        "examples": [
          "var score = 100 // กำหนดตัวแปร score เป็นตัวเลข",
          "let username = \"swift_dev\" // กำหนดค่าคงที่ username",
          "var isValid = true // กำหนดตัวแปร isValid เป็น boolean"
        ]
      },
      "functions": {
        "declaration": [
          "func functionName(param1: Type) -> ReturnType { ... }",
          "// Closure (anonymous function)",
          "{ (param) -> ReturnType in ... }"
        ],
        "examples": [
          "func add(a: Int, b: Int) -> Int {\n  return a + b\n}",
          "func greet(name: String) {\n  print(\"Hello, \\(name)!\")\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "let sum = add(a: 10, b: 20) // sum จะมีค่า 30",
          "greet(name: \"Swift\") // แสดงผล 'Hello, Swift!'"
        ],
        "built_in": [
          "print()",
          "Array.append()",
          "Dictionary.keys",
          "String.count",
          "Optional.map()"
        ],
        "async": [
          "// Async/Await (Swift 5.5+)",
          "async func fetchData() async -> String {\n  // ...\n  return \"Data fetched\"\n}"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if condition { /* ... */ } else if condition { /* ... */ } else { /* ... */ }",
          "switch expression { case value: /* ... */ default: /* ... */ }"
        ],
        "loops": [
          "for i in 1...5 { /* ... */ }",
          "while condition { /* ... */ }",
          "repeat { /* ... */ } while condition;",
          "for item in collection { /* ... */ }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)",
          "Range: ..., ..<"
        ],
        "examples": [
          "// Example of if-else",
          "let score = 85\nif score >= 90 {\n  print(\"Grade A\")\n} else {\n  print(\"Grade B\")\n}",
          "// Example of for loop",
          "for i in 0..<3 {\n  print(\"Loop Swift: \\(i)\")\n}"
        ]
      }
    },
    {
      "id": 13,
      "name": "Kotlin",
      "slug": "kotlin",
      "logo": "img/kotlin.png",
      "desc": "Kotlin เป็นภาษาโปรแกรมที่ทันสมัย, Statically typed และพัฒนาโดย JetBrains สามารถทำงานบน JVM และถูกเลือกให้เป็นภาษาหลักสำหรับการพัฒนา Android แทน Java ได้รับความนิยมอย่างรวดเร็ว",
      "by": "JetBrains",
      "yr": "2011",
      "level": "3",
      "par": ["Object-Oriented", "Functional", "Procedural", "Concurrent"],
      "fields": ["Mobile Apps", "Web Backend", "Desktop Applications"],
      "rank": "18-20 Android Official Language แต่ความนิยมลดลง",
      "salary_range": "฿38,000-60,000 บาท/เดือน (Junior), ฿60,000-105,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "ใช้งานร่วมกับ Java ได้ 100% (Interoperability)",
        "ลด boilerplate code",
        "มี Null Safety ในตัว",
        "รองรับ Coroutines สำหรับ Asynchronous Programming",
        "มีเครื่องมือพัฒนา (IntelliJ IDEA) ที่ยอดเยี่ยม"
      ],
      "cons": [
        "Learning Curve อาจมีบ้างสำหรับผู้ที่มาจาก Java โดยตรง",
        "ขนาดของแอปพลิเคชันอาจใหญ่ขึ้นเล็กน้อย (จาก Kotlin Runtime)",
        "ทรัพยากรการเรียนรู้ยังไม่เยอะเท่า Java",
        "ความเร็วในการคอมไพล์อาจช้ากว่า Java เล็กน้อยในโปรเจกต์ขนาดใหญ่"
      ],
      "frameworks": ["Spring Boot (with Kotlin)", "Ktor", "Jetpack Compose (Android)", "Exposed"],
      "learn": ["Kotlin Official Documentation", "Kotlin Koans", "Kotlin by Example", "Android Developers Kotlin"],
      "variables": {
        "declaration": [
          "val name = \"Kotlin\"; // Immutable",
          "var age = 10; // Mutable"
        ],
        "types": [
          "Int", "Long", "Float", "Double", "Boolean", "Char", "String",
          "Array<T>", "List<T>", "Set<T>", "Map<K, V>"
        ],
        "examples": [
          "val message = \"Hello Kotlin!\" // กำหนดค่าคงที่ message เป็นสตริง",
          "var counter = 0 // กำหนดตัวแปร counter เป็นตัวเลข",
          "val pi = 3.14159 // กำหนดค่าคงที่ pi เป็น Double"
        ]
      },
      "functions": {
        "declaration": [
          "fun functionName(param: Type): ReturnType { ... }",
          "// Lambda expression",
          "{ param: Type -> expression }"
        ],
        "examples": [
          "fun sum(a: Int, b: Int): Int {\n  return a + b\n}",
          "fun greet(name: String) {\n  println(\"Hello, $name!\")\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "val total = sum(2, 3) // total จะมีค่า 5",
          "greet(\"Developer\") // แสดงผล 'Hello, Developer!'"
        ],
        "built_in": [
          "println()",
          "listOf()",
          "mapOf()",
          "readLine()",
          "forEach()",
          "filter()"
        ],
        "async": [
          "// Coroutines",
          "suspend fun fetchData(): String { /* ... */ }"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "when (expression) { value -> /* ... */ else -> /* ... */ }"
        ],
        "loops": [
          "for (i in 1..5) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "do { /* ... */ } while (condition);",
          "for (item in collection) { /* ... */ }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "val grade = 80\nif (grade >= 90) {\n  println(\"Grade A\")\n} else {\n  println(\"Grade B\")\n}",
          "// Example of for loop",
          "for (i in 0..2) {\n  println(\"Loop Kotlin: $i\")\n}"
        ]
      }
    },
    {
      "id": 14,
      "name": "R",
      "slug": "r",
      "logo": "img/r.png",
      "desc": "R เป็นภาษาโปรแกรมและสภาพแวดล้อมซอฟต์แวร์สำหรับการวิเคราะห์ทางสถิติ, การแสดงผลข้อมูล และ Data Science มีแพ็กเกจจำนวนมากที่รองรับงานด้านสถิติและ Machine Learning",
      "by": "Ross Ihaka and Robert Gentleman",
      "yr": "1993",
      "level": "5",
      "par": ["Functional", "Procedural", "Object-Oriented"],
      "fields": ["Data Science / Analytics", "Scientific Computing"],
      "rank": "11-13 แต่กำลังลดลงเรื่อยๆ (แพ้ Python ใน Data Science)",
      "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-90,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "ประสิทธิภาพสูงสำหรับการวิเคราะห์ข้อมูลทางสถิติ",
        "มีแพ็กเกจ (CRAN) จำนวนมากและหลากหลาย",
        "สร้างกราฟและ Visualization ได้สวยงาม",
        "มีชุมชนนักสถิติและ Data Scientists ที่แข็งแกร่ง",
        "ฟรีและ Open-source"
      ],
      "cons": [
        "Learning Curve สูงสำหรับผู้ที่ไม่มีพื้นฐานสถิติ",
        "ประสิทธิภาพอาจไม่ดีเท่าภาษาอื่นสำหรับการทำงานทั่วไป",
        "การจัดการหน่วยความจำอาจเป็นปัญหาสำหรับ Big Data",
        "เหมาะสำหรับ Data Science เป็นหลัก ไม่ใช่ General-purpose"
      ],
      "frameworks": ["Shiny (Web Apps)", "Tidyverse (Data Science)"],
      "learn": ["R-project.org Official Docs", "R for Data Science", "Coursera: R Programming", "DataCamp R Courses"],
      "variables": {
        "declaration": [
          "my_var <- 10",
          "my_string = \"Hello R\""
        ],
        "types": [
          "numeric", "integer", "character", "logical", "complex", "raw",
          "vector", "matrix", "array", "list", "data.frame", "factor"
        ],
        "examples": [
          "age <- 30 # กำหนดตัวแปร age เก็บตัวเลข 30",
          "name <- \"Emily\" # กำหนดตัวแปร name เก็บสตริง",
          "is_active <- TRUE # กำหนดตัวแปร is_active เก็บค่าความจริง",
          "numbers <- c(1, 2, 3) # สร้าง vector ของตัวเลข"
        ]
      },
      "functions": {
        "declaration": [
          "function_name <- function(param1, param2) { /* ... */ }"
        ],
        "examples": [
          "add_numbers <- function(a, b) {\n  return(a + b)\n}",
          "print_greeting <- function(name) {\n  cat(\"Hello, \", name, \"!\\n\")\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "sum_result <- add_numbers(10, 20) # sum_result จะมีค่า 30",
          "print_greeting(\"R User\") # แสดงผล 'Hello, R User!'"
        ],
        "built_in": [
          "print()",
          "c()",
          "mean()",
          "sum()",
          "length()",
          "data.frame()"
        ]
      },
      "syntax": {
        "comments": [
          "# Single line comment"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }"
        ],
        "loops": [
          "for (item in collection) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "repeat { /* ... */ if (condition) break }",
          "sapply(list, function)"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %%, ^",
          "Assignment: <-, =",
          "Comparison: ==, !=, >, <, >=, <=, %in%",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "score <- 75\nif (score >= 80) {\n  print(\"Grade A\")\n} else {\n  print(\"Grade B\")\n}",
          "// Example of for loop",
          "for (i in 1:3) {\n  print(paste(\"Loop R:\", i))\n}"
        ]
      }
    },
    {
      "id": 15,
      "name": "SQL",
      "slug": "sql",
      "logo": "img/sql.png",
      "desc": "SQL (Structured Query Language) ไม่ใช่ภาษาโปรแกรมมิ่งแบบทั่วไป แต่เป็นภาษามาตรฐานที่ใช้ในการจัดการและสอบถามข้อมูลจากฐานข้อมูลเชิงสัมพันธ์ (Relational Databases) เป็นสิ่งจำเป็นสำหรับนักพัฒนาซอฟต์แวร์ทุกคน",
      "by": "Donald D. Chamberlin and Raymond F. Boyce",
      "yr": "1970s",
      "level": "5",
      "par": ["Declarative"],
      "fields": ["Database / SQL"],
      "rank": "9-11 แต่กำลังลดลง (ตำแหน่งต่ำสุดเท่าที่เคยมี)",
      "salary_range": "฿28,000-45,000 บาท/เดือน (Junior), ฿45,000-75,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "เป็นมาตรฐานอุตสาหกรรมสำหรับการจัดการฐานข้อมูล",
        "มีประสิทธิภาพสูงในการดึงข้อมูลจำนวนมาก",
        "ใช้งานง่ายและเรียนรู้ได้เร็วสำหรับพื้นฐาน",
        "ทำงานร่วมกับภาษาโปรแกรมอื่นๆ ได้ดี",
        "รองรับการ Query ข้อมูลที่ซับซ้อน"
      ],
      "cons": [
        "ไม่ใช่ภาษา General-purpose (ใช้สำหรับฐานข้อมูลเท่านั้น)",
        "ประสิทธิภาพอาจลดลงเมื่อ Query ซับซ้อนมาก",
        "แต่ละ Database System (MySQL, PostgreSQL) อาจมี Syntax ต่างกันเล็กน้อย",
        "การ Scale อาจเป็นความท้าทายสำหรับข้อมูลขนาดใหญ่มาก"
      ],
      "frameworks": ["None (เป็นภาษาฐานข้อมูล)", "ORMs (Object-Relational Mappers) ในภาษาโปรแกรมต่างๆ"],
      "learn": ["W3Schools SQL Tutorial", "SQLBolt", "Khan Academy SQL", "Mode Analytics SQL Tutorials"],
      "variables": {
        "declaration": [
          "SELECT * FROM Users; -- No direct variable declaration like programming languages"
        ],
        "types": [
          "INT", "VARCHAR", "TEXT", "DATE", "DATETIME", "BOOLEAN", "DECIMAL", "FLOAT", "PRIMARY KEY", "FOREIGN KEY"
        ],
        "examples": [
          "CREATE TABLE Products (\n  ProductID INT PRIMARY KEY,\n  ProductName VARCHAR(255),\n  Price DECIMAL(10, 2)\n);",
          "INSERT INTO Users (Name, Age) VALUES ('John Doe', 30);",
          "SELECT ProductName, Price FROM Products WHERE Price > 100;"
        ]
      },
      "functions": {
        "declaration": [
          "SELECT COUNT(column_name) FROM table_name;"
        ],
        "examples": [
          "SELECT AVG(Price) FROM Products; -- หาค่าเฉลี่ยของราคา",
          "SELECT MAX(OrderDate) FROM Orders; -- หาวันที่สั่งซื้อล่าสุด",
          "SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees; -- รวมชื่อและนามสกุล",
          "SELECT LEFT(ProductName, 5) FROM Products; -- ดึง 5 ตัวแรกของชื่อสินค้า"
        ],
        "built_in": [
          "COUNT()", "SUM()", "AVG()", "MIN()", "MAX()",
          "UPPER()", "LOWER()", "LENGTH()", "SUBSTR()",
          "NOW()", "CURDATE()"
        ]
      },
      "syntax": {
        "comments": [
          "-- Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "WHERE condition",
          "HAVING condition (for grouped data)",
          "CASE WHEN condition THEN result ELSE result END"
        ],
        "loops": [
          "-- No direct loops in standard SQL (use stored procedures or application logic)"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Comparison: =, <>, !=, >, <, >=, <=",
          "Logical: AND, OR, NOT",
          "Special: IN, BETWEEN, LIKE, IS NULL"
        ],
        "examples": [
          "SELECT * FROM Customers WHERE Age > 25 AND City = 'New York';",
          "UPDATE Products SET Price = Price * 1.10 WHERE Category = 'Electronics';",
          "DELETE FROM Orders WHERE OrderDate < '2023-01-01';"
        ]
      }
    },
    {
      "id": 16,
      "name": "SwiftUI",
      "slug": "swiftui",
      "logo": "img/swiftui.png",
      "desc": "SwiftUI ไม่ใช่ภาษาโปรแกรมมิ่ง แต่เป็น Declarative UI Framework ของ Apple สำหรับสร้าง User Interfaces ข้ามแพลตฟอร์ม (iOS, macOS, watchOS, tvOS) โดยใช้ภาษา Swift เน้นการเขียนโค้ดที่กระชับและเข้าใจง่าย",
      "by": "Apple Inc.",
      "yr": "2019",
      "level": "5",
      "par": ["Declarative", "Functional"],
      "fields": ["Mobile Apps", "Desktop Applications", "(UI Framework)"],
      "rank": "เติบโตในชุมชน iOS แต่จำกัดเฉพาะ Apple Platform",
      "salary_range": "฿42,000-68,000 บาท/เดือน (Junior), ฿68,000-115,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "เขียนโค้ด UI ได้กระชับและอ่านง่าย",
        "รองรับการพัฒนา UI ข้ามแพลตฟอร์ม Apple",
        "มี Preview Canvas แสดงผลแบบ Real-time",
        "ผสานรวมกับ Swift ได้อย่างลงตัว",
        "รองรับ Dark Mode และ Accessibility ได้ง่าย"
      ],
      "cons": [
        "ยังใหม่กว่า UIKit (บางฟีเจอร์ยังไม่สมบูรณ์)",
        "ต้องใช้ Xcode และ macOS ในการพัฒนา",
        "Learning Curve อาจสูงสำหรับผู้ที่มาจาก UIKit",
        "ชุมชนและการเรียนรู้ยังไม่เยอะเท่า UIKit"
      ],
      "frameworks": ["None (เป็น Framework)", "Combine (for Data Flow)"],
      "learn": ["Apple SwiftUI Documentation", "Hacking with Swift: SwiftUI", "SwiftUI by Example", "Ray Wenderlich SwiftUI"],
      "variables": {
        "declaration": [
          "@State var counter = 0 // สำหรับจัดการสถานะใน View",
          "@Binding var isOn: Bool // สำหรับเชื่อมโยงสถานะระหว่าง Views",
          "let title: String"
        ],
        "types": [
          "View", "Text", "Button", "Image", "VStack", "HStack", "ZStack", "List",
          "Binding", "State", "ObservedObject", "EnvironmentObject"
        ],
        "examples": [
          "struct MyView: View {\n  var body: some View {\n    Text(\"Hello, SwiftUI!\")\n  }\n}",
          "@State var count = 0\nButton(\"Tap me\") { count += 1 }"
        ]
      },
      "functions": {
        "declaration": [
          "func someMethod() -> some View { /* ... */ }",
          "// View builders"
        ],
        "examples": [
          "struct ContentView: View {\n  var body: some View {\n    VStack {\n      Text(\"Hello\")\n      Button(\"Press\") { /* action */ }\n    }\n  }\n}",
          "// Modifiers\nText(\"Hello\").font(.title).padding()"
        ],
        "built_in": [
          ".padding()",
          ".font()",
          ".foregroundColor()",
          ".frame()",
          ".navigationTitle()",
          ".onAppear()"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if condition { /* ... */ } else { /* ... */ } (ใน ViewBuilder)",
          "switch expression { case value: /* ... */ }"
        ],
        "loops": [
          "ForEach(data) { item in /* ... */ }",
          "// ไม่มี for/while loop แบบดั้งเดิมใน ViewBuilder โดยตรง"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of conditional view",
          "if showText {\n  Text(\"This text is visible\")\n} else {\n  Text(\"This text is hidden\")\n}",
          "// Example of ForEach",
          "ForEach([\"Apple\", \"Banana\"], id: \\.self) { fruit in\n  Text(fruit)\n}"
        ]
      }
    },
    {
      "id": 17,
      "name": "Node.js",
      "slug": "nodejs",
      "logo": "img/nodejs.png",
      "desc": "Node.js ไม่ใช่ภาษาโปรแกรมมิ่ง แต่เป็น Runtime Environment ที่ทำให้ JavaScript สามารถรันอยู่นอก Web Browser ได้ ใช้สำหรับสร้าง Server-side applications, APIs และ Command-line tools",
      "by": "Ryan Dahl",
      "yr": "2009",
      "level": "Unknown",
      "par": ["Event-driven", "Asynchronous"],
      "fields": ["Web Backend", "DevOps / Automation", "(Runtime Environment)"],
      "rank": "ใช้โดย 42.7% ของนักพัฒนา Backend JavaScript",
      "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-90,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "ใช้ JavaScript ทั้ง Frontend และ Backend (Full-stack JS)",
        "ประสิทธิภาพสูงสำหรับการจัดการ I/O (Non-blocking I/O)",
        "มี NPM (Node Package Manager) ที่มี Libraries จำนวนมาก",
        "เหมาะสำหรับ Real-time Applications",
        "รองรับ Microservices ได้ดี"
      ],
      "cons": [
        "ไม่เหมาะสำหรับงานที่ใช้ CPU หนักๆ (Single-threaded)",
        "Callback Hell (สามารถแก้ได้ด้วย Promises/Async/Await)",
        "Learning Curve สำหรับ Asynchronous Programming",
        "เวอร์ชันของ Node.js และแพ็คเกจมีการเปลี่ยนแปลงบ่อย"
      ],
      "frameworks": ["Express.js", "NestJS", "Fastify", "Koa.js"],
      "learn": ["Node.js Official Documentation", "Node.js by Example", "The Node.js Project", "freeCodeCamp Node.js"],
      "variables": {
        "declaration": [
          "const http = require('http');",
          "let port = 3000;"
        ],
        "types": [
          "Number", "String", "Boolean", "Object", "Array", "Function", "Buffer", "Stream"
        ],
        "examples": [
          "const fs = require('fs'); // import module 'fs' (File System)",
          "let data = 'Hello Node!'; // กำหนดตัวแปร data เป็นสตริง",
          "const MAX_CONNECTIONS = 10; // กำหนดค่าคงที่"
        ]
      },
      "functions": {
        "declaration": [
          "function handleRequest(req, res) { ... }",
          "(err, data) => { ... } (Callback)"
        ],
        "examples": [
          "const server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});",
          "fs.readFile('file.txt', (err, data) => {\n  if (err) throw err;\n  console.log(data.toString());\n});"
        ],
        "built_in": [
          "require()",
          "module.exports",
          "process.env",
          "console.log()",
          "setTimeout()",
          "Buffer.from()"
        ],
        "async": [
          "// Using Promises or Async/Await",
          "async function startServer() {\n  await connectDB();\n  // ...\n}"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "switch (expression) { case value: /* ... */ break; default: /* ... */ }"
        ],
        "loops": [
          "for (let i = 0; i < 5; i++) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "forEach", "for...of", "for...in"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, ===, !==, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "let userLoggedIn = true;\nif (userLoggedIn) {\n  console.log('Welcome back!');\n} else {\n  console.log('Please log in.');\n}",
          "// Example of for loop",
          "for (let i = 0; i < 3; i++) {\n  console.log(`Node Loop: ${i}`);\n}"
        ]
      }
    },
    {
    "id": 18,
    "name": "HTML",
    "slug": "html-main-page",
    "logo": "img/html.png",
    "desc": "โครงสร้าง HTML หลักสำหรับหน้าแสดงข้อมูลภาษาโปรแกรมมิ่งทั้งหมด",
    "by": "AI Assistant",
    "yr": "2025",
    "level": "5",
    "par": ["Markup Language", "Structural"],
    "fields": ["Web Frontend", "(Markup Language)"],
    "rank": "52.9% ของนักพัฒนาทั่วโลก",
    "salary_range": "฿20,000-35,000 บาท/เดือน (Junior), ฿35,000-55,000 บาท/เดือน (Senior)",
    "salary": ["n/a"],
    "pros": [
      "กำหนดโครงสร้างเนื้อหาของเว็บเพจ",
      "เข้าใจง่าย เรียนรู้เร็ว",
      "เป็นมาตรฐานหลักของเว็บ",
      "รองรับ Cross-browser"
    ],
    "cons": [
      "ไม่สามารถจัดรูปแบบได้ด้วยตัวเอง (ต้องใช้ CSS)",
      "ไม่สามารถสร้าง Logic ได้ (ต้องใช้ JavaScript)",
      "โค้ดอาจยาวและซับซ้อนสำหรับหน้าใหญ่ๆ"
    ],
    "frameworks": [],
    "learn": ["MDN Web Docs", "W3Schools"],
    "variables": {
      "declaration": [],
      "types": [],
      "examples": []
    },
    "functions": {
      "declaration": [],
      "examples": [],
      "built_in": [],
      "async": []
    },
    "syntax": {
      "comments": [
        ""
      ],
      "conditions": [],
      "loops": [],
      "operators": [],
      "examples": [
        "\n<!DOCTYPE html>\n<html lang=\"th\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Page Title</title>\n</head>\n<body>\n    <h1>Hello World</h1>\n    <p>This is a paragraph.</p>\n</body>\n</html>"
      ]
    },
    "code": "<!DOCTYPE html>\n<html lang=\"th\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ภาษาโปรแกรมมิ่งยอดนิยม</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    \n    <link href=\"https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;700&display=swap\" rel=\"stylesheet\">\n</head>\n<body class=\"gradient-bg\">\n    <header>\n        <h1>สำรวจภาษาโปรแกรมมิ่ง</h1>\n        <p>เรียนรู้เกี่ยวกับภาษาต่างๆ ที่ขับเคลื่อนโลกดิจิทัล</p>\n    </header>\n\n    <main class=\"container\">\n        <div class=\"language-grid\">\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/prolog.png\" alt=\"Prolog logo\" class=\"language-logo\">\n                    <h2>Prolog</h2>\n                </div>\n                <p class=\"description\">Prolog (PROgramming in LOGic) เป็นภาษาโปรแกรมเชิงตรรกะ (Logic Programming) ที่ใช้ในการสร้างระบบผู้เชี่ยวชาญ (Expert Systems), การประมวลผลภาษาธรรมชาติ และ AI เป็นหลัก โปรแกรมถูกเขียนในรูปของข้อเท็จจริงและกฎเกณฑ์</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Alain Colmerauer and Robert Kowalski</p>\n                    <p><strong>ปี:</strong> 1972</p>\n                    <p><strong>ประเภท:</strong> Logic Programming, Declarative</p>\n                    <p><strong>เหมาะสำหรับ:</strong> AI, Expert Systems, Natural Language Processing</p>\n                    <p><strong>ข้อดี:</strong> เหมาะสำหรับงาน AI ที่เกี่ยวข้องกับตรรกะและการค้นหา, สร้าง Expert Systems ได้ง่าย, มี Backtracking ในตัว</p>\n                    <p><strong>ข้อเสีย:</strong> Learning Curve สูงมาก, ไม่เหมาะสำหรับแอปพลิเคชันทั่วไป, ประสิทธิภาพอาจไม่ดีสำหรับงานคำนวณเชิงตัวเลข</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/lua.png\" alt=\"Lua logo\" class=\"language-logo\">\n                    <h2>Lua</h2>\n                </div>\n                <p class=\"description\">Lua เป็นภาษา Scripting ที่มีน้ำหนักเบา (lightweight), ประสิทธิภาพสูง, และมีความสามารถในการขยาย (extensible) สูง เหมาะสำหรับการฝัง (embedding) ในแอปพลิเคชันอื่น ๆ เช่น เกม และระบบฝังตัว (embedded systems) มีไวยากรณ์ที่เรียบง่ายและเรียนรู้ได้เร็ว</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes</p>\n                    <p><strong>ปี:</strong> 1993</p>\n                    <p><strong>ประเภท:</strong> Procedural, Functional, Object-Oriented</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Game Development, Embedded Systems, Scripting</p>\n                    <p><strong>ข้อดี:</strong> น้ำหนักเบา, รวดเร็ว, ไวยากรณ์เรียบง่าย, มี Table ที่ยืดหยุ่น</p>\n                    <p><strong>ข้อเสีย:</strong> ระบบจัดการ Error จำกัด, ชุมชนอาจเล็กกว่า, ไม่มี Standard Library ครอบคลุม</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/luau.png\" alt=\"Luau logo\" class=\"language-logo\">\n                    <h2>Luau</h2>\n                </div>\n                <p class=\"description\">Luau เป็นภาษา Scripting ที่พัฒนาโดย Roblox โดยอิงจาก Lua มีประสิทธิภาพสูง, มีระบบ Type ที่ค่อยๆ เพิ่มเข้ามาได้ (Gradual Typing), และคุณสมบัติที่ทันสมัยอื่น ๆ เพื่อการพัฒนาเกมบนแพลตฟอร์ม Roblox Studio โดยเฉพาะ</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Roblox</p>\n                    <p><strong>ปี:</strong> 2019</p>\n                    <p><strong>ประเภท:</strong> Procedural, Functional, Gradual Typing</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Game Development (Roblox), Education</p>\n                    <p><strong>ข้อดี:</strong> ประสิทธิภาพดีบน Roblox, มีระบบ Type, ปลอดภัยขึ้น, ไวยากรณ์คล้าย Lua</p>\n                    <p><strong>ข้อเสีย:</strong> ใช้งานได้ดีที่สุดใน Ecosystem ของ Roblox, ชุมชนส่วนใหญ่อยู่ใน Roblox</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/cpp.png\" alt=\"C++ logo\" class=\"language-logo\">\n                    <h2>C++</h2>\n                </div>\n                <p class=\"description\">C++ เป็นภาษาโปรแกรมเชิงวัตถุที่มีประสิทธิภาพสูง (Object-Oriented Programming) พัฒนามาจากภาษา C มีความสามารถในการจัดการหน่วยความจำระดับต่ำ (low-level memory manipulation) และการทำงานแบบ Multi-paradigm ทำให้เป็นที่นิยมอย่างมากในการพัฒนา Game Engines, Operating Systems, High-performance Computing และซอฟต์แวร์ฝังตัว (Embedded Systems)</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Bjarne Stroustrup</p>\n                    <p><strong>ปี:</strong> 1979</p>\n                    <p><strong>ประเภท:</strong> Object-Oriented, Procedural, Generic</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Game Dev, OS, Embedded Systems, HPC</p>\n                    <p><strong>ข้อดี:</strong> ประสิทธิภาพสูงสุด, ควบคุม Memory ละเอียด, ยืดหยุ่นสูง</p>\n                    <p><strong>ข้อเสีย:</strong> Learning Curve สูงมาก, ใช้เวลาพัฒนานาน, Bug Memory ยากแก้</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/csharp.png\" alt=\"C# logo\" class=\"language-logo\">\n                    <h2>C#</h2>\n                </div>\n                <p class=\"description\">C# (อ่านว่า ซี-ชาร์ป) เป็นภาษาโปรแกรมเชิงวัตถุที่พัฒนาโดย Microsoft เพื่อใช้กับแพลตฟอร์ม .NET Framework (และตอนนี้ .NET Core/.NET) เป็นภาษาที่ทรงพลังและยืดหยุ่น ใช้ในการสร้างแอปพลิเคชันหลากหลายประเภท ตั้งแต่ Desktop Apps, Web Apps, Mobile Apps ไปจนถึง Game Development โดยเฉพาะกับ Unity</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Microsoft (Anders Hejlsberg et al.)</p>\n                    <p><strong>ปี:</strong> 2000</p>\n                    <p><strong>ประเภท:</strong> Object-Oriented, Component-Oriented</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Web Dev (ASP.NET), Desktop Apps, Game Dev (Unity)</p>\n                    <p><strong>ข้อดี:</strong> ทรงพลัง, ยืดหยุ่น, .NET Ecosystem, Garbage Collection</p>\n                    <p><strong>ข้อเสีย:</strong> ผูกติดกับ Microsoft Ecosystem, Performance ไม่เท่า C++</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/go.png\" alt=\"Go logo\" class=\"language-logo\">\n                    <h2>Go</h2>\n                </div>\n                <p class=\"description\">Go (หรือ Golang) เป็นภาษาโปรแกรมที่พัฒนาโดย Google เน้นความเรียบง่าย ประสิทธิภาพสูง และความสามารถในการเขียนโปรแกรมแบบ Concurrency ได้ดีเยี่ยม เหมาะอย่างยิ่งสำหรับการพัฒนา Cloud services, Network programming และ Backend APIs มีไวยากรณ์ที่กระชับและคอมไพล์ได้เร็ว</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Robert Griesemer, Rob Pike, Ken Thompson</p>\n                    <p><strong>ปี:</strong> 2009</p>\n                    <p><strong>ประเภท:</strong> Concurrent, Procedural</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Cloud Infra, Network Programming, Backend Services</p>\n                    <p><strong>ข้อดี:</strong> ประสิทธิภาพสูง, Concurrency ง่าย, Compile เร็ว, ไวยากรณ์เรียบง่าย</p>\n                    <p><strong>ข้อเสีย:</strong> ไม่มี Generic (ก่อน Go 1.18), ไม่มี Class-based Inheritance, Error Handling อาจซ้ำซ้อน</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/rust.png\" alt=\"Rust logo\" class=\"language-logo\">\n                    <h2>Rust</h2>\n                </div>\n                <p class=\"description\">Rust เป็นภาษาโปรแกรมที่เน้นความปลอดภัยของหน่วยความจำ (Memory Safety) โดยไม่ใช้ Garbage Collector มีประสิทธิภาพสูง และควบคุมระดับ Hardware ได้ดีเยี่ยม ออกแบบมาเพื่อสร้างซอฟต์แวร์ที่เชื่อถือได้และมีประสิทธิภาพสูง เช่น Operating Systems, Game Engines, WebAssembly และ Command-Line Tools</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Mozilla Research (Graydon Hoare)</p>\n                    <p><strong>ปี:</strong> 2010</p>\n                    <p><strong>ประเภท:</strong> Multi-paradigm, Functional, Concurrent</p>\n                    <p><strong>เหมาะสำหรับ:</strong> System Programming, WebAssembly, Game Engines</p>\n                    <p><strong>ข้อดี:</strong> Memory Safety, ประสิทธิภาพสูง, Concurrency ปลอดภัย, Tooling ยอดเยี่ยม</p>\n                    <p><strong>ข้อเสีย:</strong> Learning Curve สูงมาก, Compile นาน, Niche ในบางโดเมน</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/kotlin.png\" alt=\"Kotlin logo\" class=\"language-logo\">\n                    <h2>Kotlin</h2>\n                </div>\n                <p class=\"description\">Kotlin เป็นภาษาโปรแกรมมิ่งที่ทันสมัย, Pragmatic, และ Statically-typed ที่ทำงานบน Java Virtual Machine (JVM) และยังสามารถคอมไพล์ไปเป็น JavaScript หรือ Native code ได้อีกด้วย Kotlin ได้รับการสนับสนุนอย่างเป็นทางการจาก Google สำหรับการพัฒนา Android App และได้รับความนิยมอย่างรวดเร็วสำหรับการพัฒนา Backend และ Multiplatform applications</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> JetBrains</p>\n                    <p><strong>ปี:</strong> 2011</p>\n                    <p><strong>ประเภท:</strong> Object-Oriented, Functional</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Android Dev, Backend Dev, Multiplatform</p>\n                    <p><strong>ข้อดี:</strong> กระชับ, Null Safety, Interoperability กับ Java, Coroutines</p>\n                    <p><strong>ข้อเสีย:</strong> Compile ช้ากว่า Java เล็กน้อย, Learning Curve สูงขึ้นสำหรับ Non-JVM dev</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/swift.png\" alt=\"Swift logo\" class=\"language-logo\">\n                    <h2>Swift</h2>\n                </div>\n                <p class=\"description\">Swift เป็นภาษาโปรแกรมมิ่งที่ทรงพลังและใช้งานง่าย พัฒนาโดย Apple เพื่อใช้ในการสร้างแอปพลิเคชันสำหรับ iOS, macOS, watchOS และ tvOS รวมถึงการพัฒนา Backend ด้วย SwiftNIO ถูกออกแบบมาให้ปลอดภัย รวดเร็ว และมีประสิทธิภาพสูง พร้อมด้วยไวยากรณ์ที่ทันสมัยและ Expressive</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Apple Inc.</p>\n                    <p><strong>ปี:</strong> 2014</p>\n                    <p><strong>ประเภท:</strong> Object-Oriented, Protocol-Oriented, Functional</p>\n                    <p><strong>เหมาะสำหรับ:</strong> iOS/macOS/watchOS/tvOS App Dev, Server-Side Swift</p>\n                    <p><strong>ข้อดี:</strong> ปลอดภัย, รวดเร็ว, ไวยากรณ์กระชับ, Ecosystem ของ Apple</p>\n                    <p><strong>ข้อเสีย:</strong> ผูกติดกับ Apple Ecosystem, Backward Compatibility</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/r.png\" alt=\"R logo\" class=\"language-logo\">\n                    <h2>R</h2>\n                </div>\n                <p class=\"description\">R เป็นภาษาและสภาพแวดล้อมสำหรับการคำนวณทางสถิติและกราฟิก ได้รับความนิยมอย่างสูงในหมู่นักสถิติ, นักวิทยาศาสตร์ข้อมูล, และนักวิจัยสำหรับการวิเคราะห์ข้อมูล, การสร้างแบบจำลองทางสถิติ, การทำ Machine Learning และการสร้างภาพข้อมูล (Data Visualization) ที่ซับซ้อน มี Package ให้เลือกใช้มากมาย</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Ross Ihaka and Robert Gentleman</p>\n                    <p><strong>ปี:</strong> 1993</p>\n                    <p><strong>ประเภท:</strong> Functional, Procedural</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Data Science, Statistical Analysis, Data Visualization</p>\n                    <p><strong>ข้อดี:</strong> Library มากมายสำหรับการวิเคราะห์สถิติ, สร้างกราฟสวยงาม, มาตรฐานในวงการสถิติ</p>\n                    <p><strong>ข้อเสีย:</strong> ประสิทธิภาพอาจไม่ดีสำหรับงานประมวลผลขนาดใหญ่, Learning Curve สูง</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/dart.png\" alt=\"Dart logo\" class=\"language-logo\">\n                    <h2>Dart</h2>\n                </div>\n                <p class=\"description\">Dart เป็นภาษาโปรแกรมที่พัฒนาโดย Google เน้นการสร้างแอปพลิเคชันแบบ Multi-platform โดยเฉพาะอย่างยิ่ง Mobile App ด้วย Flutter Framework สามารถ Compile เป็น Native Code ได้ ทำให้มีประสิทธิภาพสูง</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Google</p>\n                    <p><strong>ปี:</strong> 2011</p>\n                    <p><strong>ประเภท:</strong> Object-Oriented, Imperative, Functional</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Mobile App Development (Flutter), Web Development, Desktop Applications, Backend (Server-Side Dart)</p>\n                    <p><strong>ข้อดี:</strong> เหมาะกับการพัฒนา Cross-platform ด้วย Flutter, มี Hot Reload สำหรับการพัฒนาที่รวดเร็ว, ประสิทธิภาพสูง (Compiled to Native Code), มี Null Safety ในตัว, รองรับ Asynchronous Programming ได้ดี</p>\n                    <p><strong>ข้อเสีย:</strong> Learning Curve อาจสูงสำหรับผู้เริ่มต้น, ชุมชนนักพัฒนาอาจเล็กกว่าภาษาหลัก, ต้องพึ่งพา Flutter เป็นหลักสำหรับการพัฒนา Mobile, ขนาดของแอปพลิเคชันที่สร้างอาจจะใหญ่</p>\n                </div>\n                <div class=\"syntax-section\">\n                    <h3>ตัวอย่างโค้ด Dart</h3>\n                    <h4>การประกาศตัวแปร:</h4>\n                    <pre><code class=\"language-dart\">var name = 'Dart'; // Type inferred\\nString message = 'Hello';\\nconst pi = 3.14; // Compile-time constant\\nfinal age = 30; // Runtime constant\\n\\nint count = 10;\\nString greeting = \\\"Welcome!\\\";\\nbool isActive = false;</code></pre>\n                    <h4>ฟังก์ชัน:</h4>\n                    <pre><code class=\"language-dart\">int add(int a, int b) {\\n  return a + b;\\n}\\n\\nvoid printMessage(String msg) {\\n  print(msg);\\n}\\n\\n// การเรียกใช้ฟังก์ชัน\\nint sum = add(5, 5); // sum จะมีค่า 10\\nprintMessage(\\\"Hello, Dart!\\\"); // แสดงผล 'Hello, Dart!'</code></pre>\n                    <h4>เงื่อนไขและ Loop:</h4>\n                    <pre><code class=\"language-dart\">// Example of if-else\\nint score = 70;\\nif (score >= 60) {\\n  print('Passed');\\n} else {\\n  print('Failed');\\n}\\n\\n// Example of for loop\\nfor (int i = 0; i < 3; i++) {\\n  print('Loop Dart: $i');\\n}</code></pre>\n                </div>\n            </div>\n            \n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/elixir.png\" alt=\"Elixir logo\" class=\"language-logo\">\n                    <h2>Elixir</h2>\n                </div>\n                <p class=\"description\">Elixir เป็นภาษา Functional Programming ที่ทำงานบน Erlang Virtual Machine (BEAM) มีจุดเด่นด้าน Concurrency, Fault-tolerance (ความทนทานต่อข้อผิดพลาด) และ Scalability สูงมาก ออกแบบมาเพื่อสร้างระบบที่มีความทนทานสูงและสามารถรองรับผู้ใช้จำนวนมหาศาล เหมาะสำหรับ Web Servers, APIs, Chat applications และ Distributed Systems</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> José Valim</p>\n                    <p><strong>ปี:</strong> 2012</p>\n                    <p><strong>ประเภท:</strong> Functional, Concurrent, Dynamic</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Web Development (Phoenix), Distributed Systems, Real-time Applications (Chat, IoT), Backend Development, Telecom</p>\n                    <p><strong>ข้อดี:</strong> Concurrency สูงและจัดการได้ง่าย (ผ่าน Actor Model), Fault-tolerance (ระบบมีความทนทานต่อข้อผิดพลาดสูง), Scalability ดีเยี่ยม (เนื่องจากมาจาก Erlang VM), ไวยากรณ์ที่สะอาดและอ่านง่าย (คล้าย Ruby), Hot Code Swapping (สามารถอัปเดตโค้ดได้โดยไม่ต้องหยุดระบบ)</p>\n                    <p><strong>ข้อเสีย:</strong> Learning Curve สูงสำหรับผู้ที่ไม่คุ้นเคยกับ Functional Programming หรือ Actor Model, Ecosystem และ Library ยังเล็กกว่าภาษาหลักๆ, จำนวนนักพัฒนาที่มีความเชี่ยวชาญค่อนข้างน้อย, การจัดการ Memory อาจต้องใช้ความเข้าใจเฉพาะ</p>\n                </div>\n            </div>\n\n            \n            <div class=\"language-card\">\n                <div class=\"card-header\">\n                    <img src=\"img/clojure.png\" alt=\"Clojure logo\" class=\"language-logo\">\n                    <h2>Clojure</h2>\n                </div>\n                <p class=\"description\">Clojure เป็นภาษา Functional Programming ในตระกูล Lisp ที่ทำงานบน JVM (Java Virtual Machine) มีจุดเด่นด้าน Persistent Data Structures, Concurrency ที่แข็งแกร่ง และการพัฒนาแบบ Interactive Development (REPL) เป็นที่นิยมใน Data Science, Web Development (ClojureScript) และ Distributed Systems สำหรับการสร้างแอปพลิเคชันที่ทนทานและมีประสิทธิภาพสูง</p>\n                <div class=\"details\">\n                    <p><strong>ผู้สร้าง:</strong> Rich Hickey</p>\n                    <p><strong>ปี:</strong> 2007</p>\n                    <p><strong>ประเภท:</strong> Functional, Concurrent, Dynamic, Lisp</p>\n                    <p><strong>เหมาะสำหรับ:</strong> Data Science, Backend Development, Web Development (ClojureScript), Distributed Systems, Financial Services, Machine Learning</p>\n                    <p><strong>ข้อดี:</strong> Functional Programming ที่บริสุทธิ์ ช่วยให้โค้ด Predictable, Concurrency ที่แข็งแกร่งและจัดการได้ง่าย, Persistent Data Structures ลด Mutability Bug, Interactive Development (REPL) ที่ยอดเยี่ยม, ทำงานร่วมกับ Java Ecosystem ได้อย่างสมบูรณ์, เหมาะสำหรับระบบที่ซับซ้อนและต้องการความทนทาน</p>\n                    <p><strong>ข้อเสีย:</strong> Learning Curve สูงมาก (แนวคิด Functional Programming, Syntax แบบ Lisp), ไวยากรณ์ (Parentheses) อาจดูแปลกสำหรับผู้เริ่มต้น, Community เล็กกว่าภาษาหลักทั่วไป, เวลาในการ Startup ของ JVM อาจช้าสำหรับ Script เล็กๆ, Debugging อาจท้าทายกว่า</p>\n                </div>\n            </div>\n\n        </div>\n    </main>\n\n    <footer>\n        <p>&copy; 2025 ภาษาโปรแกรมมิ่งยอดนิยม. ข้อมูลเพื่อการศึกษา.</p>\n    </footer>\n</body>\n</html>\n"
  },
  {
    "id": 19,
    "name": "CSS",
    "slug": "css-main-page",
    "logo": "img/css.png",
    "desc": "สไตล์ CSS สำหรับหน้าแสดงข้อมูลภาษาโปรแกรมมิ่งทั้งหมด",
    "by": "AI Assistant",
    "yr": "2025",
    "level": "5",
    "par": ["Styling Language", "Declarative"],
    "fields": ["Web Frontend", "(Stylesheet Language)"],
    "rank": "ใช้คู่กับ HTML ในทุก Web Project (48.2% ของนักพัฒนา)",
    "salary_range": "฿22,000-38,000 บาท/เดือน (Junior), ฿38,000-60,000 บาท/เดือน (Senior)",
    "salary": ["n/a"],
    "pros": [
      "ควบคุมการแสดงผลของ HTML ได้อย่างละเอียด",
      "แยกส่วนเนื้อหากับส่วนการนำเสนอออกจากกัน ทำให้โค้ดสะอาด",
      "สามารถนำกลับมาใช้ซ้ำได้ง่าย",
      "รองรับ Responsive Design"
    ],
    "cons": [
      "อาจมีความซับซ้อนสำหรับโปรเจกต์ขนาดใหญ่ (ถ้าไม่มีการจัดการที่ดี)",
      "ปัญหา Cross-browser Compatibility ในบางกรณี",
      "การดีบัก Layout อาจใช้เวลา"
    ],
    "frameworks": ["Bootstrap", "Tailwind CSS", "Sass", "Less"],
    "learn": ["MDN Web Docs", "W3Schools", "CSS-Tricks"],
    "variables": {
      "declaration": [
        ":root { --primary-color: #007bff; }",
        "p { color: var(--primary-color); }"
      ],
      "types": [
        "Colors (hex, rgb, rgba, hsl)",
        "Lengths (px, em, rem, %, vw, vh)",
        "Keywords (auto, none, block, flex)"
      ],
      "examples": [
        "body { font-family: sans-serif; }",
        "h1 { color: #333; }",
        ".container { max-width: 960px; }"
      ]
    },
    "functions": {
      "declaration": [
        "property: function(args); (e.g., calc(), linear-gradient())"
      ],
      "examples": [
        "width: calc(100% - 20px);",
        "background: linear-gradient(to right, red, yellow);"
      ],
      "built_in": [],
      "async": []
    },
    "syntax": {
      "comments": [
        "/* This is a CSS comment */"
      ],
      "conditions": [
        "@media (min-width: 768px) { /* styles for larger screens */ }",
        "@supports (display: grid) { /* styles if grid is supported */ }"
      ],
      "loops": [],
      "operators": [],
      "examples": [
        "/* Example CSS */\nbody {\n  font-family: 'Prompt', sans-serif;\n  margin: 0;\n}\n\n.language-card {\n  background-color: #ffffff;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}"
      ]
    },
    "code": "@import url('https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;700&display=swap');\n\n/* --- โครงสร้างพื้นฐาน --- */\nbody {\n    font-family: 'Prompt', sans-serif;\n    margin: 0;\n    padding: 0;\n    background: #eeeeee;\n    color: #333;\n}\n\n/* --- Header / Footer --- */\nheader, footer {\n    color: white;\n    text-align: center;\n    padding: 2rem;\n    text-shadow: 0 0 10px rgba(0, 0, 0, 0.6);\n}\n\n/* --- พื้นหลังเคลื่อนไหวแบบ gradient --- */\n.gradient-bg {\n    background: linear-gradient(-45deg, #667eea, #764ba2, #6b73ff, #a855f7, #0ea5e9);\n    background-size: 400% 400%;\n    animation: gradientMove 15s ease infinite;\n}\n\n@keyframes gradientMove {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n}\n\n/* --- การจัดเรียง Card ทั่วไป --- */\n.container {\n    max-width: 1200px;\n    margin: 2rem auto;\n    padding: 1rem;\n}\n\n.language-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 2rem;\n    padding: 1rem;\n}\n\n/* --- Card Styles --- */\n.language-card {\n    background-color: #ffffff;\n    border-radius: 12px;\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);\n    padding: 1.5rem;\n    display: flex;\n    flex-direction: column;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    overflow: hidden;\n}\n\n.language-card:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.25);\n}\n\n.card-header {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.language-logo {\n    width: 60px;\n    height: 60px;\n    margin-right: 1rem;\n    border-radius: 8px;\n    object-fit: contain;\n}\n\n.language-card h2 {\n    font-size: 1.8rem;\n    color: #4a4a4a;\n    margin: 0;\n}\n\n.language-card .description {\n    font-size: 0.95rem;\n    line-height: 1.6;\n    color: #555;\n    margin-bottom: 1rem;\n}\n\n.language-card .details p {\n    margin: 0.5rem 0;\n    font-size: 0.85rem;\n    color: #666;\n}\n\n.language-card .details strong {\n    color: #333;\n}\n\n/* --- Syntax Section Styles (สำหรับภาษา Dart) --- */\n.syntax-section {\n    background-color: #f8f8f8;\n    border-radius: 8px;\n    padding: 1rem;\n    margin-top: 1.5rem;\n    border: 1px solid #e0e0e0;\n}\n\n.syntax-section h3 {\n    font-size: 1.2rem;\n    color: #2c3e50;\n    margin-top: 0;\n    margin-bottom: 0.8rem;\n    border-bottom: 1px solid #ddd;\n    padding-bottom: 0.5rem;\n}\n\n.syntax-section h4 {\n    font-size: 1rem;\n    color: #34495e;\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n}\n\n.syntax-section pre {\n    background-color: #2d2d2d;\n    color: #f8f8f2;\n    padding: 0.8rem;\n    border-radius: 6px;\n    overflow-x: auto;\n    font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace;\n    font-size: 0.85rem;\n    line-height: 1.4;\n    white-space: pre-wrap;\n    word-break: break-all;\n}\n\n/* --- Responsive Design --- */\n@media (max-width: 768px) {\n    .language-grid {\n        grid-template-columns: 1fr;\n        gap: 1.5rem;\n    }\n    header, footer {\n        padding: 1.5rem;\n    }\n    .language-card {\n        padding: 1rem;\n    }\n    .language-logo {\n        width: 50px;\n        height: 50px;\n    }\n    .language-card h2 {\n        font-size: 1.5rem;\n    }\n}\n\n@media (max-width: 480px) {\n    header h1 {\n        font-size: 1.8rem;\n    }\n    header p {\n        font-size: 0.9rem;\n    }\n    .container {\n        margin: 1rem auto;\n        padding: 0.5rem;\n    }\n    .language-card {\n        padding: 0.8rem;\n    }\n}\n"
  },
    {
      "id": 20,
      "name": "Dart",
      "slug": "dart",
      "logo": "img/dart.png",
      "desc": "Dart เป็นภาษาโปรแกรมที่พัฒนาโดย Google เน้นการสร้างแอปพลิเคชันแบบ Multi-platform โดยเฉพาะอย่างยิ่ง Mobile App ด้วย Flutter Framework สามารถ Compile เป็น Native Code ได้ ทำให้มีประสิทธิภาพสูง",
      "by": "Google",
      "yr": "2011",
      "level": "3",
      "par": ["Object-Oriented", "Imperative", "Functional"],
      "fields": ["Mobile Apps", "Web Frontend", "Desktop Applications"],
      "rank": "25-30 แต่เติบโตแรงด้วย Flutter (6.2% ของนักพัฒนา Mobile)",
      "salary_range": "฿30,000-50,000 บาท/เดือน (Junior), ฿50,000-85,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "เหมาะกับการพัฒนา Cross-platform ด้วย Flutter",
        "มี Hot Reload สำหรับการพัฒนาที่รวดเร็ว",
        "ประสิทธิภาพสูง (Compiled to Native Code)",
        "มี Null Safety ในตัว",
        "รองรับ Asynchronous Programming ได้ดี"
      ],
      "cons": [
        "Learning Curve อาจสูงสำหรับผู้เริ่มต้น",
        "ชุมชนนักพัฒนาอาจเล็กกว่าภาษาหลัก",
        "ต้องพึ่งพา Flutter เป็นหลักสำหรับการพัฒนา Mobile",
        "ขนาดของแอปพลิเคชันที่สร้างอาจจะใหญ่"
      ],
      "frameworks": ["Flutter"],
      "learn": ["Dart Official Documentation", "Flutter Documentation", "Effective Dart", "DartPad"],
      "variables": {
        "declaration": [
          "var name = 'Dart'; // Type inferred",
          "String message = 'Hello';",
          "const pi = 3.14; // Compile-time constant",
          "final age = 30; // Runtime constant"
        ],
        "types": [
          "int", "double", "String", "bool", "List", "Map", "Set", "dynamic", "Object", "Null"
        ],
        "examples": [
          "int count = 10; // กำหนดตัวแปร count เก็บตัวเลข 10",
          "String greeting = \"Welcome!\"; // กำหนดตัวแปร greeting เก็บสตริง",
          "bool isActive = false; // กำหนดตัวแปร isActive เก็บค่าความจริง"
        ]
      },
      "functions": {
        "declaration": [
          "returnType functionName(param1, param2) { /* ... */ }",
          "// Anonymous function / Lambda",
          "(params) => expression;"
        ],
        "examples": [
          "int add(int a, int b) {\n  return a + b;\n}",
          "void printMessage(String msg) {\n  print(msg);\n}",
          "// การเรียกใช้ฟังก์ชัน",
          "int sum = add(5, 5); // sum จะมีค่า 10",
          "printMessage(\"Hello, Dart!\"); // แสดงผล 'Hello, Dart!'"
        ],
        "built_in": [
          "print()",
          "List.add()",
          "Map.containsKey()",
          "Future.delayed()",
          "int.parse()"
        ],
        "async": [
          "Future<String> fetchData() async {\n  await Future.delayed(Duration(seconds: 1));\n  return \"Data fetched!\";\n}"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */",
          "/// Documentation comment"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "switch (expression) { case value: /* ... */ break; default: /* ... */ }"
        ],
        "loops": [
          "for (int i = 0; i < 5; i++) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "do { /* ... */ } while (condition);",
          "for (var item in collection) { /* ... */ }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)",
          "Null-aware: ??, ??=, ?., !."
        ],
        "examples": [
          "// Example of if-else",
          "int score = 70;\nif (score >= 60) {\n  print('Passed');\n} else {\n  print('Failed');\n}",
          "// Example of for loop",
          "for (int i = 0; i < 3; i++) {\n  print('Loop Dart: $i');\n}"
        ]
      }
    },
    {
      "id": 21,
      "name": "Scala",
      "slug": "scala",
      "logo": "img/scala.png",
      "desc": "Scala เป็นภาษาโปรแกรม Multi-paradigm ที่ทำงานบน JVM (Java Virtual Machine) ผสมผสานคุณสมบัติของ Object-Oriented และ Functional Programming ได้อย่างลงตัว เหมาะสำหรับ Big Data, Web Backend และ Distributed Systems",
      "by": "Martin Odersky",
      "yr": "2004",
      "level": "3",
      "par": ["Object-Oriented", "Functional", "Concurrent"],
      "fields": ["Big Data", "Web Backend", "Finance / Trading Systems"],
      "rank": "20-25 แข็งแกร่งใน Big Data (2.1% แต่เงินเดือนสูง)",
      "salary_range": "฿45,000-70,000 บาท/เดือน (Junior), ฿70,000-125,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high", "veryhigh"],
      "pros": [
        "ทำงานร่วมกับ Java ได้ดีเยี่ยม",
        "รองรับ Functional Programming ที่ทรงพลัง",
        "เหมาะสำหรับ Big Data ด้วย Apache Spark",
        "มี Type System ที่ยืดหยุ่นและปลอดภัย",
        "สามารถเขียนโค้ดที่กระชับและแสดงออกได้ดี"
      ],
      "cons": [
        "Learning Curve สูงมาก",
        "เวลาในการคอมไพล์ค่อนข้างนาน",
        "Error Messages อาจเข้าใจยากสำหรับผู้เริ่มต้น",
        "Syntax ที่ซับซ้อนและหลายรูปแบบ",
        "ชุมชนนักพัฒนาอาจเล็กกว่าภาษาหลัก"
      ],
      "frameworks": ["Play Framework", "Akka", "Apache Spark"],
      "learn": ["Scala Documentation", "Scala Book", "Coursera: Functional Programming in Scala", "Rock the JVM"],
      "variables": {
        "declaration": [
          "val name: String = \"Scala\"; // Immutable",
          "var age: Int = 10; // Mutable"
        ],
        "types": [
          "Int", "Long", "Float", "Double", "Boolean", "Char", "String",
          "List[T]", "Vector[T]", "Map[K, V]", "Set[T]", "Option[T]"
        ],
        "examples": [
          "val message = \"Hello Scala!\" // กำหนดค่าคงที่ message เป็นสตริง",
          "var counter = 0 // กำหนดตัวแปร counter เป็นตัวเลข",
          "val pi = 3.14159 // กำหนดค่าคงที่ pi เป็น Double"
        ]
      },
      "functions": {
        "declaration": [
          "def functionName(param: Type): ReturnType = { /* ... */ }",
          "// Anonymous function / Lambda",
          "(param: Type) => expression"
        ],
        "examples": [
          "def add(a: Int, b: Int): Int = a + b",
          "def greet(name: String): Unit = println(s\"Hello, $name!\")",
          "// การเรียกใช้ฟังก์ชัน",
          "val total = add(10, 10) // total จะมีค่า 20",
          "greet(\"Spark\") // แสดงผล 'Hello, Spark!'"
        ],
        "built_in": [
          "println()",
          "List()",
          "Map()",
          "Option",
          "Try",
          "Future"
        ],
        "async": [
          "// Futures and Akka Actors for concurrency",
          "import scala.concurrent.Future\nFuture { /* ... */ }"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }",
          "match expression { case value => /* ... */ case _ => /* ... */ }"
        ],
        "loops": [
          "for (i <- 1 to 5) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "// ไม่มี do-while โดยตรง",
          "collection.foreach { item => /* ... */ }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "val temperature = 28\nif (temperature > 30) {\n  println(\"Hot\")\n} else {\n  println(\"Normal\")\n}",
          "// Example of for loop",
          "for (i <- 0 until 3) {\n  println(s\"Loop Scala: $i\")\n}"
        ]
      }
    },
    {
      "id": 22,
      "name": "Perl",
      "slug": "perl",
      "logo": "img/perl.png",
      "desc": "Perl เป็นภาษาโปรแกรมที่ยืดหยุ่นและมีพลังมาก มักใช้สำหรับการจัดการข้อความ, การประมวลผลระบบ และ Web Development ได้รับฉายาว่า 'Swiss Army Chainsaw' ของภาษาโปรแกรม",
      "by": "Larry Wall",
      "yr": "1987",
      "level": "3",
      "par": ["Procedural", "Object-Oriented", "Functional"],
      "fields": ["Scripting / Automation", "Web Backend", "Network Programming"],
      "rank": "30-35 ลดลงมาก แต่ยังใช้ใน Legacy Systems",
      "salary_range": "฿28,000-45,000 บาท/เดือน (Junior), ฿45,000-75,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "มีประสิทธิภาพสูงในการจัดการข้อความและ Regex",
        "มี CPAN (Comprehensive Perl Archive Network) ที่มี Modules จำนวนมาก",
        "ยืดหยุ่นและเขียนโค้ดได้กระชับ",
        "ใช้งานได้หลากหลายแพลตฟอร์ม",
        "ทำงานร่วมกับ Command Line ได้ดี"
      ],
      "cons": [
        "Syntax อาจอ่านยากและเข้าใจยาก ('write-only language')",
        "ไม่ได้รับความนิยมเท่าในอดีตสำหรับ Web Development",
        "Learning Curve สูงสำหรับบางคุณสมบัติ",
        "การบำรุงรักษาโค้ดอาจเป็นเรื่องยาก"
      ],
      "frameworks": ["Catalyst", "Mojolicious"],
      "learn": ["Perl.org", "Perl Tutorial", "Learning Perl (book)", "CPAN"],
      "variables": {
        "declaration": [
          "$scalar_var = 'hello';",
          "@array_var = (1, 2, 3);",
          "%hash_var = ('key' => 'value');"
        ],
        "types": [
          "Scalar ($)", "Array (@)", "Hash (%)"
        ],
        "examples": [
          "$name = \"Perl\"; // ตัวแปร Scalar เก็บสตริง",
          "@numbers = (10, 20, 30); // ตัวแปร Array เก็บรายการ",
          "%config = ('host' => 'localhost', 'port' => 8080); // ตัวแปร Hash เก็บ Key-Value"
        ]
      },
      "functions": {
        "declaration": [
          "sub my_function { /* ... */ }"
        ],
        "examples": [
          "sub add { my ($a, $b) = @_; return $a + $b; }",
          "sub greet { my ($name) = @_; print \"Hello, $name!\\n\"; }",
          "// การเรียกใช้ฟังก์ชัน",
          "$sum = add(5, 7); // $sum จะมีค่า 12",
          "greet(\"Perl User\"); // แสดงผล 'Hello, Perl User!'"
        ],
        "built_in": [
          "print()",
          "chomp()",
          "split()",
          "join()",
          "sort()",
          "open()"
        ]
      },
      "syntax": {
        "comments": [
          "# Single line comment",
          "=pod\nMulti-line\ncomment\n=cut"
        ],
        "conditions": [
          "if (condition) { /* ... */ } elsif (condition) { /* ... */ } else { /* ... */ }",
          "unless (condition) { /* ... */ }",
          "given ($variable) { when (value) { /* ... */ } default { /* ... */ } }"
        ],
        "loops": [
          "for (my $i = 0; $i < 5; $i++) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "foreach my $item (@array) { /* ... */ }",
          "do { /* ... */ } while (condition);"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison (Numeric): ==, !=, <, >, <=, >=",
          "Comparison (String): eq, ne, lt, gt, le, ge",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "my $score = 60;\nif ($score >= 50) {\n  print \"Passed\\n\";\n} else {\n  print \"Failed\\n\";\n}",
          "// Example of for loop",
          "for (my $i = 0; $i < 3; $i++) {\n  print \"Loop Perl: $i\\n\";\n}"
        ]
      }
    },
    {
      "id": 23,
      "name": "Objective-C",
      "slug": "objective-c",
      "logo": "img/objc.png",
      "desc": "Objective-C เป็นภาษาโปรแกรมเชิงวัตถุที่พัฒนามาจากภาษา C และเป็นภาษาหลักสำหรับการพัฒนาแอปพลิเคชันบน macOS และ iOS มายาวนานก่อน Swift จะเข้ามาแทนที่",
      "by": "Brad Cox and Tom Love",
      "yr": "1980s",
      "level": "2",
      "par": ["Object-Oriented", "Reflective", "Imperative"],
      "fields": ["Mobile Apps", "Desktop Applications", "(Legacy)"],
      "rank": "35-40 ลดลงอย่างรวดเร็วเนื่องจาก Swift",
      "salary_range": "฿30,000-50,000 บาท/เดือน (Junior), ฿50,000-80,000 บาท/เดือน (Senior)",
      "salary": ["N/A"],
      "pros": [
        "เคยเป็นภาษาหลักสำหรับ Apple Ecosystem",
        "ทำงานร่วมกับ C และ C++ ได้ดี",
        "มี Dynamic Runtime",
        "รองรับการเขียนโค้ดที่ยืดหยุ่น"
      ],
      "cons": [
        "Learning Curve สูงมาก",
        "Syntax ค่อนข้างซับซ้อนและยาว",
        "ไม่ได้รับความนิยมเท่าในอดีต (ถูกแทนที่ด้วย Swift)",
        "การจัดการหน่วยความจำ (Manual Reference Counting) อาจเกิดข้อผิดพลาดได้ง่าย"
      ],
      "frameworks": ["Cocoa", "Cocoa Touch"],
      "learn": ["Apple Objective-C Documentation", "Ray Wenderlich Objective-C", "Stanford CS193p (legacy courses)"],
      "variables": {
        "declaration": [
          "NSString *name = @\"John\";",
          "int age = 30;"
        ],
        "types": [
          "id", "Class", "SEL", "IMP", "BOOL", "NSInteger", "NSUInteger",
          "NSString", "NSArray", "NSDictionary"
        ],
        "examples": [
          "NSString *message = @\"Hello Obj-C!\"; // กำหนดตัวแปร message เป็นสตริง",
          "NSNumber *count = @(100); // กำหนดตัวแปร count เป็นตัวเลข",
          "BOOL success = YES; // กำหนดตัวแปร success เป็น Boolean"
        ]
      },
      "functions": {
        "declaration": [
          "- (returnType)methodName:(param1Type)param1Name;",
          "+ (returnType)classMethod:(paramType)paramName;"
        ],
        "examples": [
          "- (int)add:(int)a and:(int)b {\n  return a + b;\n}",
          "// การเรียกใช้เมธอด",
          "int sum = [self add:5 and:5]; // sum จะมีค่า 10",
          "NSLog(@\"Hello, World!\"); // แสดงผล 'Hello, World!'"
        ],
        "built_in": [
          "NSLog()",
          "alloc",
          "init",
          "release",
          "retain",
          "autorelease"
        ]
      },
      "syntax": {
        "comments": [
          "// Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "if (condition) { /* ... */ } else if (condition) { /* ... */ } else { /* ... */ }"
        ],
        "loops": [
          "for (int i = 0; i < 5; i++) { /* ... */ }",
          "while (condition) { /* ... */ }",
          "for (id object in collection) { /* ... */ }"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, %",
          "Assignment: =, +=, -=, *=, /=, %=",
          "Comparison: ==, !=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ! (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "int score = 70;\nif (score >= 60) {\n  NSLog(@\"Passed\");\n} else {\n  NSLog(@\"Failed\");\n}",
          "// Example of for loop",
          "for (int i = 0; i < 3; i++) {\n  NSLog(@\"Loop Obj-C: %d\", i);\n}"
        ]
      }
    },
    {
      "id": 24,
      "name": "Assembly",
      "slug": "assembly",
      "logo": "img/asm.png",
      "desc": "Assembly Language เป็นภาษาโปรแกรมระดับต่ำสุดที่มนุษย์อ่านได้ มีความสัมพันธ์โดยตรงกับสถาปัตยกรรมของ Processor ใช้ในการเขียนโปรแกรมที่ต้องการการควบคุมฮาร์ดแวร์อย่างสมบูรณ์แบบและประสิทธิภาพสูงสุด",
      "by": "Various (Machine-specific)",
      "yr": "1940s-1950s",
      "level": "1",
      "par": ["Imperative", "Procedural"],
      "fields": ["System Programming", "Embedded Systems", "Reverse Engineering", "Operating Systems"],
      "rank": "40+ Niche แต่จำเป็นสำหรับ Low-level Programming",
      "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-95,000 บาท/เดือน (Senior)",
      "salary": ["N/A"],
      "pros": [
        "ประสิทธิภาพสูงสุด",
        "ควบคุมฮาร์ดแวร์ได้สมบูรณ์",
        "ขนาดโปรแกรมเล็กมาก",
        "ใช้ในการทำ Reverse Engineering และ Malware Analysis"
      ],
      "cons": [
        "เรียนรู้และใช้งานยากที่สุด",
        "ต้องมีความรู้เรื่องสถาปัตยกรรม Processor อย่างลึกซึ้ง",
        "เขียนโปรแกรมซับซ้อนได้ยากและใช้เวลานาน",
        "โค้ดไม่สามารถนำไปใช้กับ Processor ต่างชนิดกันได้",
        "การดีบักซับซ้อน"
      ],
      "frameworks": ["None"],
      "learn": ["Assembly Language for x86 Processors", "The Art of Assembly Language", "NASM Documentation", "MASM Documentation"],
      "variables": {
        "declaration": [
          "section .data",
          "  my_var db 10 ; define byte",
          "  message db 'Hello', 0"
        ],
        "types": [
          "BYTE (db)", "WORD (dw)", "DWORD (dd)", "QWORD (dq)",
          "Registers (EAX, EBX, ECX, EDX, etc.)"
        ],
        "examples": [
          "section .data\n  num_val dw 1234\n  text_msg db 'Assembly is fun!', 0",
          "section .text\n  _start:\n    mov eax, 1\n    mov ebx, 0\n    int 0x80"
        ]
      },
      "functions": {
        "declaration": [
          "my_function:",
          "  ; function body",
          "  ret"
        ],
        "examples": [
          "section .text\n  global _start\n\n_start:\n  ; Hello World in NASM (Linux)\n  mov eax, 4\n  mov ebx, 1\n  mov ecx, msg\n  mov edx, len\n  int 0x80\n\n  mov eax, 1\n  mov ebx, 0\n  int 0x80\n\nsection .data\n  msg db 'Hello, World!', 0xA\n  len equ $ - msg"
        ],
        "built_in": [
          "mov", "add", "sub", "jmp", "call", "ret", "int", "push", "pop", "cmp", "test"
        ]
      },
      "syntax": {
        "comments": [
          "; Single line comment"
        ],
        "conditions": [
          "cmp reg, value",
          "je label (Jump if Equal)",
          "jne label (Jump if Not Equal)",
          "jg label (Jump if Greater)",
          "jl label (Jump if Less)"
        ],
        "loops": [
          "loop_start:",
          "  ; loop body",
          "  dec ecx",
          "  jnz loop_start"
        ],
        "operators": [
          "Arithmetic: add, sub, mul, div",
          "Logical: and, or, xor, not",
          "Bitwise: shl, shr, rol, ror"
        ],
        "examples": [
          "// Example of conditional jump",
          "cmp eax, 10\njg greater_than_10\n; code if eax <= 10\njmp end_if\ngreater_than_10:\n; code if eax > 10\nend_if:",
          "// Example of loop",
          "mov ecx, 3 ; loop 3 times\nloop_count:\n  ; your code here\n  loop loop_count"
        ]
      }
    },
    {
      "id": 25,
      "name": "MATLAB",
      "slug": "matlab",
      "logo": "img/matlab.png",
      "desc": "MATLAB เป็นภาษาและแพลตฟอร์มสำหรับการคำนวณเชิงตัวเลข (Numerical Computing) และการเขียนโปรแกรมเชิงเทคนิค มีชื่อเสียงในการวิเคราะห์ข้อมูล, พัฒนาอัลกอริทึม, สร้างโมเดล และ Simulation ทางวิศวกรรมและวิทยาศาสตร์",
      "by": "MathWorks",
      "yr": "1984",
      "level": "5",
      "par": ["Array-oriented", "Procedural", "Object-Oriented"],
      "fields": ["Scientific Computing", "Data Science / Analytics", "Robotics / IoT"],
      "rank": "16-20 แข็งแกร่งใน Academic และ Engineering",
      "salary_range": "฿32,000-52,000 บาท/เดือน (Junior), ฿52,000-85,000 บาท/เดือน (Senior)",
      "salary": ["low", "mid", "high"],
      "pros": [
        "ทรงพลังสำหรับการคำนวณเชิงตัวเลขและเมทริกซ์",
        "มี Toolbox เฉพาะทางสำหรับงานวิศวกรรม/วิทยาศาสตร์",
        "สร้าง Plot และ Visualization ได้ง่าย",
        "มีสภาพแวดล้อมการพัฒนา (IDE) ที่ครบวงจร",
        "ใช้ในการวิจัยและพัฒนาในอุตสาหกรรม"
      ],
      "cons": [
        "เป็นซอฟต์แวร์เชิงพาณิชย์ (มีค่าใช้จ่าย)",
        "ประสิทธิภาพอาจไม่เท่าภาษาคอมไพล์สำหรับงานทั่วไป",
        "ไม่เหมาะสำหรับการพัฒนา Web Application",
        "Learning Curve สำหรับผู้ที่ไม่มีพื้นฐานคณิตศาสตร์/วิศวกรรม"
      ],
      "frameworks": ["None (เป็นแพลตฟอร์ม)"],
      "learn": ["MathWorks Official Documentation", "Coursera: MATLAB Programming", "MATLAB Academy", "Tutorials Point MATLAB"],
      "variables": {
        "declaration": [
          "x = 10; % Scalar",
          "A = [1 2; 3 4]; % Matrix",
          "str = 'Hello MATLAB';"
        ],
        "types": [
          "double", "single", "int8", "uint8", "logical", "char", "string",
          "cell", "struct", "table", "datetime"
        ],
        "examples": [
          "my_variable = 100; % กำหนดตัวแปร my_variable เป็นตัวเลข",
          "name = 'Data Scientist'; % กำหนดตัวแปร name เป็นสตริง",
          "data_array = [1 2 3 4 5]; % สร้าง Array",
          "is_valid = true; % กำหนดตัวแปร is_valid เป็น boolean"
        ]
      },
      "functions": {
        "declaration": [
          "function [output1, output2] = func_name(input1, input2)\n  % ...\nend"
        ],
        "examples": [
          "function y = my_sum(a, b)\n  y = a + b;\nend",
          "function print_message(msg)\n  disp(msg);\nend",
          "// การเรียกใช้ฟังก์ชัน",
          "result = my_sum(20, 30); % result จะมีค่า 50",
          "print_message('Welcome to MATLAB!'); % แสดงผล 'Welcome to MATLAB!'"
        ],
        "built_in": [
          "disp()",
          "plot()",
          "sum()",
          "mean()",
          "sin()",
          "cos()",
          "size()",
          "zeros()",
          "ones()"
        ]
      },
      "syntax": {
        "comments": [
          "% Single line comment"
        ],
        "conditions": [
          "if condition\n  % ...\nelseif condition\n  % ...\nelse\n  % ...\nend",
          "switch expression\n  case value1\n    % ...\n  case value2\n    % ...\n  otherwise\n    % ...\nend"
        ],
        "loops": [
          "for i = 1:5\n  % ...\nend",
          "while condition\n  % ...\nend"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, .*, ./, ^, .^",
          "Assignment: =",
          "Comparison: ==, ~=, >, <, >=, <=",
          "Logical: && (AND), || (OR), ~ (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "temp = 35;\nif temp > 30\n  disp('Hot weather');\nelse\n  disp('Normal weather');\nend",
          "// Example of for loop",
          "for i = 1:3\n  disp(['Loop MATLAB: ', num2str(i)]);\nend"
        ]
      }
    },
    {
      "id": 26,
      "name": "COBOL",
      "slug": "cobol",
      "logo": "img/cobol.png",
      "desc": "COBOL (Common Business-Oriented Language) เป็นภาษาโปรแกรมที่เก่าแก่และถูกออกแบบมาเพื่อการประมวลผลข้อมูลทางธุรกิจโดยเฉพาะ มักใช้ในระบบ Mainframe ของธนาคารและหน่วยงานรัฐบาล",
      "by": "CODASYL Committee",
      "yr": "1959",
      "level": "1",
      "par": ["Procedural", "Imperative"],
      "fields": ["Finance / Trading Systems", "(Legacy)"],
      "rank": "45+ ลดลงแต่ยังจำเป็นใน Legacy Banking Systems",
      "salary_range": "฿25,000-42,000 บาท/เดือน (Junior), ฿42,000-75,000 บาท/เดือน (Senior)",
      "salary": ["mid", "high"],
      "pros": [
        "เสถียรและเชื่อถือได้สำหรับงาน Business Critical",
        "มีประสิทธิภาพสูงในการประมวลผลข้อมูลจำนวนมาก (Batch Processing)",
        "อ่านง่าย (คล้ายภาษาอังกฤษ)",
        "เหมาะสำหรับระบบ Mainframe ที่ยังคงใช้งานอยู่"
      ],
      "cons": [
        "ล้าสมัยและไม่เหมาะกับการพัฒนาสมัยใหม่",
        "ทรัพยากรการเรียนรู้และนักพัฒนามีน้อย",
        "การปรับตัวเข้ากับเทคโนโลยีใหม่ๆ ทำได้ยาก",
        "มี Learning Curve สำหรับผู้เริ่มต้น",
        "ค่าใช้จ่ายในการบำรุงรักษาสูง"
      ],
      "frameworks": ["None (เป็นภาษาพื้นฐาน)"],
      "learn": ["OpenCOBOL Programmer's Guide", "COBOL Tutorial", "IBM COBOL Documentation"],
      "variables": {
        "declaration": [
          "01 WS-EMP-REC.",
          "   05 WS-EMP-ID   PIC 9(5).",
          "   05 WS-EMP-NAME PIC X(30)."
        ],
        "types": [
          "PIC 9 (numeric)", "PIC X (alphanumeric)", "PIC A (alphabetic)",
          "COMP (binary)", "DISPLAY (character)"
        ],
        "examples": [
          "DATA DIVISION.",
          "WORKING-STORAGE SECTION.",
          "01 WS-CUSTOMER-NAME PIC X(20) VALUE 'John Doe'.",
          "01 WS-QUANTITY      PIC 9(3) VALUE 123.",
          "",
          "PROCEDURE DIVISION.",
          "    MOVE 'Jane' TO WS-CUSTOMER-NAME.",
          "    ADD 10 TO WS-QUANTITY."
        ]
      },
      "functions": {
        "declaration": [
          "SECTION-NAME SECTION.",
          "PARAGRAPH-NAME.",
          "    STATEMENT.",
          "    EXIT."
        ],
        "examples": [
          "PROCEDURE DIVISION.",
          "MAIN-LOGIC SECTION.",
          "    DISPLAY 'Hello, COBOL!'.",
          "    COMPUTE RESULT = A + B.",
          "    PERFORM CALCULATE-TOTAL.",
          "    STOP RUN.",
          "",
          "CALCULATE-TOTAL SECTION.",
          "    ADD AMOUNT1 TO AMOUNT2 GIVING TOTAL.",
          "    EXIT."
        ],
        "built_in": [
          "DISPLAY", "ACCEPT", "MOVE", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "COMPUTE"
        ]
      },
      "syntax": {
        "comments": [
          "* This is a comment line",
          "*> Another comment line"
        ],
        "conditions": [
          "IF condition THEN\n  statement\nELSE\n  statement\nEND-IF.",
          "EVALUATE expression\n  WHEN value1\n    statement\n  WHEN OTHER\n    statement\nEND-EVALUATE."
        ],
        "loops": [
          "PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10\n  statement\nEND-PERFORM.",
          "PERFORM paragraph-name THRU paragraph-end UNTIL condition."
        ],
        "operators": [
          "Arithmetic: +, -, *, /, **",
          "Comparison: IS EQUAL TO, IS NOT EQUAL TO, IS GREATER THAN, IS LESS THAN",
          "Logical: AND, OR, NOT"
        ],
        "examples": [
          "// Example of IF-ELSE",
          "    IF WS-AGE IS GREATER THAN 18 THEN\n        DISPLAY 'Adult'\n    ELSE\n        DISPLAY 'Minor'\n    END-IF.",
          "// Example of PERFORM VARYING (loop)",
          "    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 3\n        DISPLAY 'Loop COBOL: ' I\n    END-PERFORM."
        ]
      }
    },
    {
      "id": 27,
      "name": "Fortran",
      "slug": "fortran",
      "logo": "img/fortran.png",
      "desc": "Fortran (Formula Translation) เป็นภาษาโปรแกรมที่เก่าแก่และยังคงใช้กันอย่างแพร่หลายในงานทางวิทยาศาสตร์และการคำนวณทางวิศวกรรม โดยเฉพาะงานที่เกี่ยวข้องกับ Supercomputing และ Numerical Analysis",
      "by": "John Backus (IBM)",
      "yr": "1957",
      "level": "1",
      "par": ["Procedural", "Imperative", "Array-oriented"],
      "fields": ["Scientific Computing"],
      "rank": "35-40 ยังใช้ใน High-Performance Scientific Computing",
      "salary_range": "฿28,000-48,000 บาท/เดือน (Junior), ฿48,000-80,000 บาท/เดือน (Senior)",
      "salary": ["mid", "high"],
      "pros": [
        "ประสิทธิภาพสูงมากสำหรับการคำนวณตัวเลขและ Array",
        "มีไลบรารีทางคณิตศาสตร์และวิทยาศาสตร์ที่แข็งแกร่ง",
        "เหมาะสำหรับ Parallel Computing",
        "มีความเสถียรและเชื่อถือได้"
      ],
      "cons": [
        "ล้าสมัยและไม่เหมาะกับการพัฒนาเว็บ/แอปทั่วไป",
        "Syntax ค่อนข้างโบราณและไม่ยืดหยุ่น",
        "การจัดการ I/O ซับซ้อน",
        "ชุมชนนักพัฒนาลดลง",
        "การเรียนรู้อาจยากสำหรับผู้เริ่มต้น"
      ],
      "frameworks": ["None (เป็นภาษาพื้นฐาน)"],
      "learn": ["Fortran Wiki", "Fortran-lang.org", "Fortran 90/95 for Scientists and Engineers"],
      "variables": {
        "declaration": [
          "INTEGER :: i",
          "REAL :: x",
          "CHARACTER(len=20) :: name"
        ],
        "types": [
          "INTEGER", "REAL", "DOUBLE PRECISION", "COMPLEX", "LOGICAL", "CHARACTER"
        ],
        "examples": [
          "INTEGER :: count = 10",
          "REAL :: pi = 3.14159",
          "CHARACTER(len=15) :: message = 'Hello Fortran'",
          "LOGICAL :: is_true = .TRUE."
        ]
      },
      "functions": {
        "declaration": [
          "FUNCTION func_name(param1, param2)\n  % ...\nEND FUNCTION func_name",
          "SUBROUTINE sub_name(param1, param2)\n  % ...\nEND SUBROUTINE sub_name"
        ],
        "examples": [
          "FUNCTION add(a, b)\n  INTEGER, INTENT(IN) :: a, b\n  INTEGER :: add\n  add = a + b\nEND FUNCTION add",
          "SUBROUTINE print_data(value)\n  INTEGER, INTENT(IN) :: value\n  PRINT *, 'Value is: ', value\nEND SUBROUTINE print_data",
          "// การเรียกใช้ฟังก์ชัน/Subroutine",
          "RESULT = add(5, 5) ; ! RESULT จะมีค่า 10",
          "CALL print_data(25) ; ! แสดงผล 'Value is: 25'"
        ],
        "built_in": [
          "PRINT *",
          "READ *",
          "SQRT()",
          "SIN()",
          "COS()",
          "MAX()",
          "MIN()"
        ]
      },
      "syntax": {
        "comments": [
          "! Single line comment",
          "C Multi-line comment (legacy)"
        ],
        "conditions": [
          "IF (condition) THEN\n  % ...\nELSE IF (condition) THEN\n  % ...\nELSE\n  % ...\nEND IF",
          "SELECT CASE (expression)\n  CASE (value1)\n    % ...\n  CASE DEFAULT\n    % ...\nEND SELECT"
        ],
        "loops": [
          "DO i = 1, 5\n  % ...\nEND DO",
          "DO WHILE (condition)\n  % ...\nEND DO"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, **",
          "Assignment: =",
          "Comparison: .EQ., .NE., .GT., .LT., .GE., .LE.",
          "Logical: .AND., .OR., .NOT."
        ],
        "examples": [
          "// Example of IF-ELSE",
          "INTEGER :: num = 10\nIF (num > 5) THEN\n  PRINT *, 'Num is greater than 5'\nELSE\n  PRINT *, 'Num is not greater than 5'\nEND IF",
          "// Example of DO loop",
          "DO I = 1, 3\n  PRINT *, 'Loop Fortran: ', I\nEND DO"
        ]
      }
    },
    {
      "id": 28,
      "name": "Lisp",
      "slug": "lisp",
      "logo": "img/lisp.png",
      "desc": "Lisp (LISt Processing) เป็นภาษาโปรแกรมที่เก่าแก่เป็นอันดับสองรองจาก Fortran มีชื่อเสียงในด้าน AI, การประมวลผลสัญลักษณ์ และ Functional Programming โดดเด่นด้วยการใช้ Parentheses จำนวนมาก",
      "by": "John McCarthy",
      "yr": "1958",
      "level": "3",
      "par": ["Functional", "Procedural", "Object-Oriented", "Metaprogramming"],
      "fields": ["AI / Machine Learning", "Compiler / Language Design", "Education / Teaching Tools"],
      "rank": "40+ Niche ใน AI Research และ Academic",
      "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-90,000 บาท/เดือน (Senior)",
      "salary": ["mid", "high"],
      "pros": [
        "ทรงพลังสำหรับ AI และ Symbolic computing",
        "มี Metaprogramming (Macros) ที่ยืดหยุ่น",
        "Functional Programming ที่บริสุทธิ์",
        "มีการใช้งานใน Emacs และ CAD/CAM",
        "มีคุณสมบัติในการปรับเปลี่ยนภาษาได้เอง (Homoiconicity)"
      ],
      "cons": [
        "Syntax ใช้ Parentheses จำนวนมาก (Lisp is a lot of parentheses)",
        "Learning Curve สูงมาก",
        "ไม่ได้รับความนิยมในอุตสาหกรรมทั่วไป",
        "ทรัพยากรการเรียนรู้มีจำกัด",
        "ประสิทธิภาพอาจไม่ดีเท่าภาษาคอมไพล์"
      ],
      "frameworks": ["Common Lisp HyperSpec", "Clojure (JVM Lisp)", "Scheme"],
      "learn": ["Structure and Interpretation of Computer Programs (SICP)", "Practical Common Lisp", "Common Lisp: A Gentle Introduction"],
      "variables": {
        "declaration": [
          "(setq x 10)",
          "(defvar *name* \"Lisp\")"
        ],
        "types": [
          "numbers", "strings", "booleans", "symbols", "lists", "vectors", "hash-tables"
        ],
        "examples": [
          "(setq count 10) ; กำหนดตัวแปร count เป็น 10",
          "(setq greeting \"Hello Lisp\") ; กำหนดตัวแปร greeting เป็นสตริง",
          "(setq my-list '(1 2 3)) ; สร้าง List"
        ]
      },
      "functions": {
        "declaration": [
          "(defun function-name (params) body)"
        ],
        "examples": [
          "(defun add (a b) (+ a b))",
          "(defun greet (name) (format t \"Hello, ~a!~%\" name))",
          "// การเรียกใช้ฟังก์ชัน",
          "(setq sum (add 5 5)) ; sum จะมีค่า 10",
          "(greet \"World\") ; แสดงผล 'Hello, World!'"
        ],
        "built_in": [
          "car", "cdr", "cons", "atom", "list", "quote", "lambda", "defun", "format", "print"
        ]
      },
      "syntax": {
        "comments": [
          "; Single line comment",
          "#| Multi-line\n   comment |#"
        ],
        "conditions": [
          "(if condition then-form else-form)",
          "(cond (test1 expr1) (test2 expr2) (t default-expr))"
        ],
        "loops": [
          "(loop for i from 1 to 5 do (format t \"~a~%\" i))",
          "(dolist (item list) (format t \"~a~%\" item))",
          "(dotimes (i 5) (format t \"~a~%\" i))"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, rem",
          "Comparison: =, /=, <, >, <=, >=",
          "Logical: and, or, not"
        ],
        "examples": [
          "// Example of if-else",
          "(if (> age 18) (format t \"Adult~%\") (format t \"Minor~%\"))",
          "// Example of loop",
          "(dotimes (i 3) (format t \"Loop Lisp: ~a~%\" i))"
        ]
      }
    },
    {
      "id": 29,
      "name": "Haskell",
      "slug": "haskell",
      "logo": "img/haskell.png",
      "desc": "Haskell เป็นภาษาโปรแกรม Functional ที่บริสุทธิ์ (Purely Functional) และเป็น Statically-typed เน้นความถูกต้องทางคณิตศาสตร์และการเขียนโค้ดที่ไม่เปลี่ยนแปลง (Immutable) เหมาะสำหรับงานวิจัย, การศึกษา และโปรแกรมที่ต้องการความเสถียรสูง",
      "by": "Simon Peyton Jones, Philip Wadler, et al.",
      "yr": "1990",
      "level": "3",
      "par": ["Functional", "Lazy Evaluation"],
      "fields": ["Functional Programming", "Blockchain", "Compiler / Language Design", "Finance / Trading Systems"],
      "rank": "35-40 Niche ใน Functional Programming",
      "salary_range": "฿38,000-60,000 บาท/เดือน (Junior), ฿60,000-105,000 บาท/เดือน (Senior)",
      "salary": ["mid", "high"],
      "pros": [
        "โค้ดมีความถูกต้องทางคณิตศาสตร์สูง (Guaranteed Correctness)",
        "ลด Bug จาก Side Effects",
        "มี Type System ที่แข็งแกร่งและปลอดภัย",
        "รองรับ Lazy Evaluation",
        "เหมาะสำหรับ Concurrency"
      ],
      "cons": [
        "Learning Curve สูงมาก (แนวคิด Functional ที่แตกต่าง)",
        "เข้าใจ Monads และ Type Classes ได้ยาก",
        "การดีบักอาจทำได้ยาก",
        "ชุมชนนักพัฒนาเล็กและ Niche",
        "ไม่ได้รับความนิยมในอุตสาหกรรมทั่วไป"
      ],
      "frameworks": ["Yesod", "Servant"],
      "learn": ["Learn You a Haskell for Great Good!", "Haskell Book", "Haskell.org", "Stackage"],
      "variables": {
        "declaration": [
          "let x = 5",
          "let greeting = \"Hello\""
        ],
        "types": [
          "Int", "Float", "Double", "Char", "Bool", "String",
          "List a", "Tuple a b", "Maybe a", "IO a"
        ],
        "examples": [
          "let number = 10 -- กำหนดค่าคงที่ number เป็น 10",
          "let message = \"Purely Functional\" -- กำหนดค่าคงที่ message เป็นสตริง",
          "let myList = [1, 2, 3] -- สร้าง List"
        ]
      },
      "functions": {
        "declaration": [
          "functionName :: Type -> Type -> ReturnType\nfunctionName param1 param2 = expression"
        ],
        "examples": [
          "add :: Int -> Int -> Int\nadd a b = a + b",
          "greet :: String -> IO ()\ngreet name = putStrLn (\"Hello, \" ++ name ++ \"!\")",
          "// การเรียกใช้ฟังก์ชัน",
          "let sum = add 5 5 -- sum จะมีค่า 10",
          "greet \"Haskeller\" -- แสดงผล 'Hello, Haskeller!'"
        ],
        "built_in": [
          "putStrLn",
          "getLine",
          "map",
          "filter",
          "foldl",
          "head",
          "tail"
        ]
      },
      "syntax": {
        "comments": [
          "-- Single line comment",
          "{- Multi-line\n   comment -}"
        ],
        "conditions": [
          "if condition then expression1 else expression2",
          "case expression of\n  pattern1 -> result1\n  pattern2 -> result2"
        ],
        "loops": [
          "-- ไม่มี loop แบบ Imperative โดยตรง ใช้ Recursion หรือ Higher-Order Functions",
          "map (+1) [1,2,3] -- [2,3,4]"
        ],
        "operators": [
          "Arithmetic: +, -, *, /, ^",
          "Comparison: ==, /=, <, >, <=, >=",
          "Logical: && (AND), || (OR), not (NOT)"
        ],
        "examples": [
          "// Example of if-else",
          "let age = 20\nlet status = if age >= 18 then \"Adult\" else \"Minor\"\nputStrLn status",
          "// Example of map (functional loop)",
          "let numbers = [1, 2, 3]\nlet doubled = map (*2) numbers\nprint doubled"
        ]
      }
    },
    {
      "id": 30,
      "name": "Prolog",
      "slug": "prolog",
      "logo": "img/prolog.png",
      "desc": "Prolog (PROgramming in LOGic) เป็นภาษาโปรแกรมเชิงตรรกะ (Logic Programming) ที่ใช้ในการสร้างระบบผู้เชี่ยวชาญ (Expert Systems), การประมวลผลภาษาธรรมชาติ และ AI เป็นหลัก โปรแกรมถูกเขียนในรูปของข้อเท็จจริงและกฎเกณฑ์",
      "by": "Alain Colmerauer and Robert Kowalski",
      "yr": "1972",
      "level": "4",
      "par": ["Logic Programming", "Declarative"],
      "fields": ["AI / Machine Learning", "Database / SQL"],
      "rank": "45+ Niche ใน Logic Programming",
      "salary_range": "฿25,000-42,000 บาท/เดือน (Junior), ฿42,000-75,000 บาท/เดือน (Senior)",
      "salary": ["mid", "high"],
      "pros": [
        "เหมาะสำหรับงาน AI ที่เกี่ยวข้องกับตรรกะและการค้นหา (Search)",
        "สามารถสร้าง Expert Systems ได้ง่าย",
        "มีการ Backtracking ในตัว",
        "มีคุณสมบัติในการประมวลผลภาษาธรรมชาติ",
        "สามารถเขียนโปรแกรมที่กระชับและทรงพลังสำหรับปัญหาบางประเภท"
      ],
      "cons": [
        "Learning Curve สูงมาก (แนวคิดการเขียนโปรแกรมที่แตกต่าง)",
        "ไม่เหมาะสำหรับการพัฒนาแอปพลิเคชันทั่วไป",
        "ประสิทธิภาพอาจไม่ดีสำหรับงานคำนวณเชิงตัวเลข",
        "ชุมชนนักพัฒนาเล็กและ Niche",
        "การดีบักอาจทำได้ยากเมื่อเกิด Failure"
      ],
      "frameworks": ["None (เป็นภาษาพื้นฐาน)"],
      "learn": ["Learn Prolog Now!", "The Art of Prolog", "SWI-Prolog Documentation", "Tutorials Point Prolog"],
      "variables": {
        "declaration": [
          "X is 10. % X is a variable",
          "Name = 'Alice'. % Name is a variable"
        ],
        "types": [
          "Atoms (symbols, e.g., 'hello')",
          "Numbers (integers, floats)",
          "Variables (start with uppercase, e.g., X)",
          "Lists ([1, 2, 3])",
          "Structures (e.g., person(Name, Age))"
        ],
        "examples": [
          "father(john, mary). % Fact: John is the father of Mary",
          "likes(mary, books). % Fact: Mary likes books",
          "age(peter, 30). % Fact: Peter's age is 30"
        ]
      },
      "functions": {
        "declaration": [
          "rule_name(Head) :- Body. % Rule definition",
          "fact_name(Arg1, Arg2)."
        ],
        "examples": [
          "parent(X, Y) :- father(X, Y).",
          "parent(X, Y) :- mother(X, Y).",
          "grandparent(X, Z) :- parent(X, Y), parent(Y, Z).",
          "// การ Query",
          "?- grandparent(john, Z). % Query: Who are John's grandchildren?",
          "?- father(F, mary). % Query: Who is Mary's father?"
        ],
        "built_in": [
          "write()",
          "read()",
          "findall()",
          "member()",
          "is",
          "consult()"
        ]
      },
      "syntax": {
        "comments": [
          "% Single line comment",
          "/* Multi-line\n   comment */"
        ],
        "conditions": [
          "A :- B, C. % A if B AND C",
          "A :- B; C. % A if B OR C"
        ],
        "loops": [
          "% ไม่มี loop แบบ Imperative โดยตรง ใช้ Recursion หรือ Backtracking",
          "count(0).",
          "count(N) :- count(M), N is M+1."
        ],
        "operators": [
          "Arithmetic: +, -, *, /, mod",
          "Comparison: =:=, =\\=, <, >, =<, >=",
          "Logical: , (AND), ; (OR), \\+ (NOT)"
        ],
        "examples": [
          "// Example of rule (if-then)",
          "can_vote(Person) :- age(Person, Age), Age >= 18.",
          "// Example of recursion (loop-like behavior)",
          "list_items([]).",
          "list_items([Head|Tail]) :- write(Head), nl, list_items(Tail)."
        ]
      }
    },
    {
        "id": 31, 
        "name": "Lua",
        "slug": "lua",
        "logo": "img/lua.png",
        "desc": "Lua เป็นภาษา Scripting ที่มีน้ำหนักเบา (lightweight), ประสิทธิภาพสูง, และมีความสามารถในการขยาย (extensible) สูง เหมาะสำหรับการฝัง (embedding) ในแอปพลิเคชันอื่น ๆ เช่น เกม และระบบฝังตัว (embedded systems) มีไวยากรณ์ที่เรียบง่ายและเรียนรู้ได้เร็ว",
        "by": "Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes",
        "yr": "1993",
        "level": "2",
        "par": ["Procedural", "Functional", "Object-Oriented (prototype-based)"],
        "fields": ["Game Development", "Embedded Systems", "Scripting / Automation", "Plugin / Extension Development"],
        "rank": "25-30 ใช้ใน Game Development และ Embedded Systems",
        "salary_range": "฿25,000-40,000 บาท/เดือน (Junior), ฿40,000-68,000 บาท/เดือน (Senior)",
        "salary": ["mid", "high"],
        "pros": [
          "มีน้ำหนักเบาและรวดเร็ว เหมาะสำหรับการฝัง",
          "ไวยากรณ์เรียบง่ายและเรียนรู้ง่าย",
          "มี Table ซึ่งเป็น Data Structure ที่ยืดหยุ่นมาก",
          "ประสิทธิภาพสูงสำหรับภาษา Scripting",
          "เป็นที่นิยมในอุตสาหกรรมเกม (Game Scripting)"
        ],
        "cons": [
          "ระบบจัดการ Error ที่ค่อนข้างจำกัด",
          "ชุมชนนักพัฒนาอาจเล็กกว่าภาษาหลักบางภาษา",
          "ไม่มี Standard Library ที่ครอบคลุมเท่าภาษาอื่น",
          "ไม่มีระบบ Type ในตัว (ก่อน Luau)",
          "ไม่เหมาะสำหรับการพัฒนาแอปพลิเคชันขนาดใหญ่โดยลำพัง"
        ],
        "frameworks": ["Luvit (Web/Networking), OpenResty (Web Platform), Corona SDK (Game Dev), Love2D (Game Dev)"],
        "learn": ["Lua.org Official Manual", "Programming in Lua (book)", "Learn Lua in 15 Minutes", "Codecademy"],
        "variables": {
          "declaration": [
            "local myVar = 10 -- Local variable",
            "globalVar = \"Hello\" -- Global variable (discouraged)",
            "local name = 'Alice'"
          ],
          "types": [
            "nil",
            "boolean (true, false)",
            "number (integers, floats)",
            "string",
            "function",
            "userdata",
            "thread",
            "table"
          ],
          "examples": [
            "local score = 100",
            "local isActive = true",
            "local message = \"Welcome!\"",
            "local myTable = {key = 'value', 1, 2, 3}"
          ]
        },
        "functions": {
          "declaration": [
            "function funcName(param1, param2)\\n  -- code\\n  return result\\nend",
            "local anonFunc = function(x) return x * 2 end"
          ],
          "examples": [
            "local function add(a, b)\\n  return a + b\\nend\\nprint(add(5, 3))",
            "local function factorial(n)\\n  if n == 0 then return 1 end\\n  return n * factorial(n - 1)\\nend\\nprint(factorial(5))"
          ],
          "built_in": [
            "print()",
            "type()",
            "tonumber()",
            "tostring()",
            "require()",
            "ipairs()",
            "pairs()",
            "table.insert()",
            "math.random()"
          ]
        },
        "syntax": {
          "comments": [
            "-- Single-line comment",
            "--[[ Multi-line\\n  comment --]]"
          ],
          "conditions": [
            "if condition then\\n  -- code\\nelseif anotherCondition then\\n  -- code\\nelse\\n  -- code\\nend"
          ],
          "loops": [
            "for i = 1, 10 do\\n  print(i)\\nend",
            "while condition do\\n  -- code\\nend",
            "repeat\\n  -- code\\nuntil condition"
          ],
          "operators": [
            "Arithmetic: +, -, *, /, %, ^",
            "Comparison: ==, ~=, <, >, <=, >=",
            "Logical: and, or, not",
            "Concatenation: .."
          ],
          "examples": [
            "local age = 20\\nif age >= 18 then\\n  print(\"Adult\")\\nelse\\n  print(\"Minor\")\\nend",
            "for i = 1, 3 do\\n  print(\"Loop: \" .. i)\\nend",
            "local numbers = {10, 20, 30}\\nfor i, v in ipairs(numbers) do\\n  print(i, v)\\nend"
          ]
        }
      },
      {
        "id": 32,
        "name": "Luau",
        "slug": "luau",
        "logo": "img/luau.png",
        "desc": "Luau เป็นภาษา Scripting ที่พัฒนาโดย Roblox โดยอิงจาก Lua มีประสิทธิภาพสูง, มีระบบ Type ที่ค่อยๆ เพิ่มเข้ามาได้ (Gradual Typing), และคุณสมบัติที่ทันสมัยอื่น ๆ เพื่อการพัฒนาเกมบนแพลตฟอร์ม Roblox Studio โดยเฉพาะ",
        "by": "Roblox",
        "yr": "2019",
        "level": "3",
        "par": ["Procedural", "Functional", "Object-Oriented (prototype-based)", "Gradual Typing"],
        "fields": ["Game Development", "(Roblox specific)"],
        "rank": "เติบโตในชุมชน Game Development (Roblox Ecosystem)", 
        "salary_range": "฿26,000-42,000 บาท/เดือน (Junior), ฿42,000-72,000 บาท/เดือน (Senior)",
        "salary": ["mid", "high"],
        "pros": [
          "ประสิทธิภาพดีเยี่ยมบน Roblox",
          "มีระบบ Type (Gradual Typing) ช่วยลดข้อผิดพลาด",
          "มีความปลอดภัยสูงขึ้น",
          "ไวยากรณ์คล้าย Lua ทำให้เรียนรู้ง่ายสำหรับผู้ที่รู้จัก Lua",
          "เข้าถึงผู้เล่นจำนวนมากผ่านแพลตฟอร์ม Roblox"
        ],
        "cons": [
          "ใช้งานได้ดีที่สุดใน Ecosystem ของ Roblox เท่านั้น",
          "ชุมชนนักพัฒนาส่วนใหญ่อยู่ใน Roblox",
          "ไม่เหมาะสำหรับแอปพลิเคชันทั่วไปนอก Roblox",
          "ทรัพยากรการเรียนรู้นอก Roblox อาจจำกัด"
        ],
        "frameworks": ["Roblox API"],
        "learn": ["Roblox Creator Hub (Official Documentation)", "The Roblox Wiki", "YouTube Tutorials for Luau"],
        "variables": {
          "declaration": [
            "local myVar = 10 -- Local variable",
            "local name: string = 'Alice'",
            "local count: number = 0"
          ],
          "types": [
            "nil",
            "boolean",
            "number",
            "string",
            "function",
            "userdata",
            "thread",
            "table",
            "any (for gradual typing)"
          ],
          "examples": [
            "local player_health: number = 100",
            "local is_game_over: boolean = false",
            "local player_name: string = \"Bob\"",
            "local config_table: { [string]: any } = { debug = true, version = 1 }"
          ]
        },
        "functions": {
          "declaration": [
            "local function funcName(param1: type1, param2: type2): returnType\\n  -- code\\n  return result\\nend",
            "local anonFunc = function(x: number): number return x * 2 end"
          ],
          "examples": [
            "local function add(a: number, b: number): number\\n  return a + b\\nend\\nprint(add(5, 3))",
            "local function greet(name: string)\\n  print(\"Hello, \" .. name .. \"!\")\\nend\\nprint(\"Hello, World!\")"
          ],
          "built_in": [
            "print()",
            "type()",
            "tonumber()",
            "tostring()",
            "require()",
            "ipairs()",
            "pairs()",
            "table.insert()",
            "math.random()",
            "task.wait()",
            "game:GetService()"
          ]
        },
        "syntax": {
          "comments": [
            "-- Single-line comment",
            "--[[ Multi-line\\n  comment --]]"
          ],
          "conditions": [
            "if condition then\\n  -- code\\nelseif anotherCondition then\\n  -- code\\nelse\\n  -- code\\nend"
          ],
          "loops": [
            "for i = 1, 10 do\\n  print(i)\\nend",
            "while condition do\\n  -- code\\nend",
            "repeat\\n  -- code\\nuntil condition"
          ],
          "operators": [
            "Arithmetic: +, -, *, /, %, ^",
            "Comparison: ==, ~=, <, >, <=, >=",
            "Logical: and, or, not",
            "Concatenation: .."
          ],
          "examples": [
            "local age: number = 20\\nif age >= 18 then\\n  print(\"Adult\")\\nelse\\n  print(\"Minor\")\\nend",
            "for i = 1, 3 do\\n  print(\"Loop: \" .. i)\\nend",
            "local numbers: { number } = {10, 20, 30}\\nfor i, v in ipairs(numbers) do\\n  print(i, v)\\nend"
          ]
        }
      },
      {
        "id": 33,
        "name": "Elixir",
        "slug": "elixir",
        "logo": "img/elixir.png", 
        "desc": "Elixir เป็นภาษา Functional Programming ที่ทำงานบน Erlang Virtual Machine (BEAM) มีจุดเด่นด้าน Concurrency, Fault-tolerance (ความทนทานต่อข้อผิดพลาด) และ Scalability สูงมาก ออกแบบมาเพื่อสร้างระบบที่มีความทนทานสูงและสามารถรองรับผู้ใช้จำนวนมหาศาล เหมาะสำหรับ Web Servers, APIs, Chat applications และ Distributed Systems",
        "by": "José Valim",
        "yr": "2012",
        "level": "3",
        "par": ["Functional", "Concurrent", "Dynamic"],
        "fields": ["Web Backend", "Cloud Infrastructure", "Network Programming"],
        "rank": "30-35 เติบโตใน High-concurrency Systems",
        "salary_range": "฿32,000-52,000 บาท/เดือน (Junior), ฿52,000-88,000 บาท/เดือน (Senior)",
        "salary": ["high", "veryhigh"],
        "pros": [
          "Concurrency สูงและจัดการได้ง่าย (ผ่าน Actor Model)",
          "Fault-tolerance (ระบบมีความทนทานต่อข้อผิดพลาดสูง)",
          "Scalability ดีเยี่ยม (เนื่องจากมาจาก Erlang VM)",
          "ไวยากรณ์ที่สะอาดและอ่านง่าย (คล้าย Ruby)",
          "Hot Code Swapping (สามารถอัปเดตโค้ดได้โดยไม่ต้องหยุดระบบ)"
        ],
        "cons": [
          "Learning Curve สูงสำหรับผู้ที่ไม่คุ้นเคยกับ Functional Programming หรือ Actor Model",
          "Ecosystem และ Library ยังเล็กกว่าภาษาหลักๆ",
          "จำนวนนักพัฒนาที่มีความเชี่ยวชาญค่อนข้างน้อย",
          "การจัดการ Memory อาจต้องใช้ความเข้าใจเฉพาะ"
        ],
        "frameworks": ["Phoenix (Web Framework), Nerves (Embedded Systems), Ecto (Database Wrapper)"],
        "learn": ["Elixir Official Website", "Elixir School", "Programming Elixir (Book)", "Phoenix Guides"],
        "variables": {
          "declaration": [
            "name = \"Alice\"",
            "age = 30",
            "list = [1, 2, 3]"
          ],
          "types": [
            "Atoms (symbols, e.g., :ok)",
            "Numbers (integers, floats)",
            "Booleans (true, false)",
            "Strings",
            "Lists, Tuples",
            "Maps",
            "PIDs (Process Identifiers)"
          ],
          "examples": [
            "name = \"Bob\"",
            "is_active = true",
            "user_data = %{name: \"Charlie\", age: 25}",
            "numbers = [10, 20, 30]"
          ]
        },
        "functions": {
          "declaration": [
            "def func_name(param1, param2) do\\n  # code\\n  result\\nend",
            "add = fn a, b -> a + b end"
          ],
          "examples": [
            "defmodule Math do\\n  def add(a, b) do\\n    a + b\\n  end\\nend\\nresult = Math.add(5, 3)",
            "defmodule Greeter do\\n  def greet(name) do\\n    IO.puts(\"Hello, \" <> name <> \"!\")\\n  end\\nend\\nGreeter.greet(\"World\")"
          ],
          "built_in": [
            "IO.puts()",
            "Enum.map()",
            "String.split()",
            "Map.get()",
            "hd(), tl() (for lists)",
            "if, cond, case"
          ]
        },
        "syntax": {
          "comments": [
            "# Single-line comment"
          ],
          "conditions": [
            "if condition do\\n  # code\\nelse if another_condition do\\n  # code\\nelse\\n  # code\\nend",
            "case variable do\\n  1 -> # code\\n  _ -> # code\\nend"
          ],
          "loops": [
            "Enum.each([1, 2, 3], fn x -> IO.puts(x) end)",
            "for x <- [1, 2, 3] do\\n  IO.puts(x)\\nend",
            "while (condition) do # rarely used\\n  # code\\nend"
          ],
          "operators": [
            "Arithmetic: +, -, *, /, rem",
            "Comparison: ==, !=, <, >, <=, >=",
            "Logical: and, or, not (boolean operators)",
            "Concatenation: <>, ++, --"
          ],
          "examples": [
            "age = 20\\nif age >= 18 do\\n  IO.puts(\"Adult\")\\nelse\\n  IO.puts(\"Minor\")\\nend",
            "for i <- 0..2 do\\n  IO.puts(\"Loop: #{i}\")\\nend"
          ]
        }
      },
      {
        "id": 34,
        "name": "Clojure",
        "slug": "clojure",
        "logo": "img/clojure.png", 
        "desc": "Clojure เป็นภาษา Functional Programming ในตระกูล Lisp ที่ทำงานบน JVM (Java Virtual Machine) มีจุดเด่นด้าน Persistent Data Structures, Concurrency ที่แข็งแกร่ง และการพัฒนาแบบ Interactive Development (REPL) เป็นที่นิยมใน Data Science, Web Development (ClojureScript) และ Distributed Systems สำหรับการสร้างแอปพลิเคชันที่ทนทานและมีประสิทธิภาพสูง",
        "by": "Rich Hickey",
        "yr": "2007",
        "level": "3",
        "par": ["Functional", "Concurrent", "Dynamic", "Lisp"],
        "fields": ["Web Backend", "Data Science / Analytics", "AI / Machine Learning", "Finance / Trading Systems"],
        "rank": "35-40 Niche ใน Functional Programming บน JVM",
        "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-92,000 บาท/เดือน (Senior)",
        "salary": ["high", "veryhigh"],
        "pros": [
          "Functional Programming ที่บริสุทธิ์ ช่วยให้โค้ด Predictable",
          "Concurrency ที่แข็งแกร่งและจัดการได้ง่าย",
          "Persistent Data Structures ลด Mutability Bug",
          "Interactive Development (REPL) ที่ยอดเยี่ยม",
          "ทำงานร่วมกับ Java Ecosystem ได้อย่างสมบูรณ์",
          "เหมาะสำหรับระบบที่ซับซ้อนและต้องการความทนทาน"
        ],
        "cons": [
          "Learning Curve สูงมาก (แนวคิด Functional Programming, Syntax แบบ Lisp)",
          "ไวยากรณ์ (Parentheses) อาจดูแปลกสำหรับผู้เริ่มต้น",
          "Community เล็กกว่าภาษาหลักทั่วไป",
          "เวลาในการ Startup ของ JVM อาจช้าสำหรับ Script เล็กๆ",
          "Debugging อาจท้าทายกว่า"
        ],
        "frameworks": ["Luminus (Web), Reagent (Frontend with ClojureScript), yada (Web API)"],
        "learn": ["Clojure.org Official Guide", "Brave Clojure (Book)", "Clojure for the Brave and True", "Practicalli Clojure"],
        "variables": {
          "declaration": [
            "(def x 10) ; global",
            "(let [y 20] y) ; local",
            "(def name \"Alice\")"
          ],
          "types": [
            "Numbers (integers, floats)",
            "Strings",
            "Booleans (true, false)",
            "Keywords (:keyword)",
            "Symbols (my-var)",
            "Lists, Vectors, Maps, Sets"
          ],
          "examples": [
            "(def counter 0)",
            "(def message \"Hello, Clojure!\")",
            "(def is-active true)",
            "(def numbers [1 2 3])"
          ]
        },
        "functions": {
          "declaration": [
            "(defn func-name [param1 param2] ; code )",
            "(def add (fn [a b] (+ a b)))"
          ],
          "examples": [
            "(defn add [a b]\\n  (+ a b))\\n(def result (add 5 3))",
            "(defn greet [name]\\n  (println (str \"Hello, \" name \"!\")))\\n(greet \"World\")"
          ],
          "built_in": [
            "println",
            "str",
            "+",
            "-",
            "*",
            "/",
            "map",
            "filter",
            "reduce",
            "if",
            "cond",
            "loop/recur"
          ]
        },
        "syntax": {
          "comments": [
            "; Single-line comment",
            "(comment\\n  Multi-line\\n  comment)"
          ],
          "conditions": [
            "(if condition ; true-branch ; false-branch )",
            "(cond\\n  (> x 10) \"Greater\"\\n  (< x 5) \"Smaller\"\\n  :else \"Middle\")"
          ],
          "loops": [
            "(doseq [x [1 2 3]] (println x))",
            "(loop [i 0] (when (< i 3) (println i) (recur (inc i))))",
            "; Functional approaches like map, reduce are more common"
          ],
          "operators": [
            "; Operators are functions: (+ 1 2), (- 5 3)",
            "Arithmetic: +, -, *, /, rem",
            "Comparison: =, <, >, <=, >=",
            "Logical: and, or, not"
          ],
          "examples": [
            "(def age 20)\\n(if (>= age 18)\\n  (println \"Adult\")\\n  (println \"Minor\"))",
            "(dotimes [i 3] (println (str \"Loop: \" i)))"
          ]
        }
      },
      {
        "id": 35,
        "name": "Ada",
        "slug": "ada",
        "logo": "img/ada.png",
        "desc": "Ada เป็นภาษาโปรแกรมที่มีโครงสร้างชัดเจนและแข็งแกร่ง (Strongly-typed) พัฒนาขึ้นโดยกระทรวงกลาโหมสหรัฐฯ เน้นความน่าเชื่อถือและความปลอดภัยสูง เหมาะสำหรับระบบฝังตัว (Embedded Systems), ระบบควบคุมแบบเรียลไทม์ (Real-time Systems) และระบบที่มีความสำคัญด้านความปลอดภัยสูง เช่น การบินและอวกาศ, การทหาร, และการควบคุมการจราจรทางอากาศ",
        "by": "Jean Ichbiah (ทีมงาน)",
        "yr": "1980 (Ada 83)",
        "level": "1",
        "par": ["Structured", "Object-Oriented", "Concurrent", "Imperative"],
        "fields": ["Embedded Systems", "Operating Systems", "Aerospace & Defense"],
        "rank": "฿28,000-48,000 บาท/เดือน (Junior), ฿48,000-80,000 บาท/เดือน (Senior)",
        "salary_range": "N/A (เป็นที่ต้องการสูงมากในอุตสาหกรรมเฉพาะทาง)",
        "salary": ["n/a"],
        "pros": [
          "ความน่าเชื่อถือและความปลอดภัยสูงมาก (built-in checks)",
          "เหมาะสำหรับระบบขนาดใหญ่และซับซ้อน",
          "มีคุณสมบัติ Concurrency ในตัว (Tasks)",
          "Strongly-typed ช่วยลดข้อผิดพลาด",
          "Modular Design ที่ดี"
        ],
        "cons": [
          "Learning Curve สูง",
          "ชุมชนนักพัฒนาเล็กและเฉพาะทาง",
          "ไม่เหมาะกับแอปพลิเคชันทั่วไปหรือเว็บ",
          "เวลาในการคอมไพล์นาน",
          "ขาด Library ที่หลากหลายเมื่อเทียบกับภาษาอื่น"
        ],
        "frameworks": [],
        "learn": ["AdaCore", "Wikibooks: Ada Programming", "Learn Ada"],
        "variables": {
          "declaration": [
            "Variable_Name : Type_Name := Initial_Value;",
            "Constant_Name : constant Type_Name := Value;"
          ],
          "types": [
            "Integer", "Float", "Boolean", "Character", "String", "Enumeration Types", "Record Types", "Array Types", "Access Types (Pointers)"
          ],
          "examples": [
            "My_Integer : Integer := 10; -- ประกาศตัวแปร Integer พร้อมค่าเริ่มต้น",
            "Is_Active : Boolean := True; -- ประกาศตัวแปร Boolean",
            "PI : constant Float := 3.14159; -- ประกาศค่าคงที่ Float"
          ]
        },
        "functions": {
          "declaration": [
            "function Function_Name (Parameters) return Return_Type is ... end Function_Name;",
            "procedure Procedure_Name (Parameters) is ... end Procedure_Name;"
          ],
          "examples": [
            "function Add (A, B : Integer) return Integer is\nbegin\n  return A + B;\nend Add;",
            "procedure Greet (Name : String) is\nbegin\n  Put_Line (\"Hello \" & Name);\nend Greet;"
          ],
          "built_in": ["Put_Line (from Text_IO)", "Integer'Image", "Float'Image"],
          "async": ["task Task_Name is ... end Task_Name;"]
        },
        "syntax": {
          "comments": [
            "-- This is an Ada comment -- คอมเมนต์บรรทัดเดียว"
          ],
          "conditions": [
            "if Condition then ... [elsif ... then ...] [else ...] end if;",
            "case Expression is when ... => ... when others => ... end case;"
          ],
          "loops": [
            "loop ... exit when Condition; end loop;",
            "while Condition loop ... end loop;",
            "for Loop_Variable in Range loop ... end loop;"
          ],
          "operators": [
            "+", "-", "*", "/", "mod", "rem", "=", "/=", "<", "<=", ">", ">=", "and", "or", "not"
          ],
          "examples": [
            "if My_Integer > 0 then\n  Put_Line (\"Positive\");\nelse\n  Put_Line (\"Non-positive\");\nend if;",
            "for I in 1 .. 5 loop\n  Put_Line (\"Loop: \" & Integer'Image(I));\nend loop;"
          ]
        }
      },
      {
        "id": 36,
        "name": "Scheme",
        "slug": "scheme",
        "logo": "img/scheme.png",
        "desc": "Scheme เป็นภาษาโปรแกรม Functional Programming ในตระกูล Lisp ที่เน้นความเรียบง่าย (Minimalism) และความสอดคล้องทางทฤษฎี (Theoretical Consistency) เป็นอย่างสูง ถูกใช้ในการศึกษาด้านวิทยาการคอมพิวเตอร์, การวิจัย และการพัฒนาแอปพลิเคชันที่ต้องการความยืดหยุ่นสูงและการจัดการโค้ดในฐานะข้อมูล (Code as Data)",
        "by": "Guy L. Steele Jr. and Gerald Jay Sussman",
        "yr": "1975",
        "level": "3",
        "par": ["Functional", "Procedural", "Reflective", "Metaprogramming"],
        "fields": ["Education / Teaching Tools", "Compiler / Language Design", "AI / Machine Learning"],
        "rank": "45+ Niche ใน Education และ Computer Science Research",
        "salary_range": "฿24,000-40,000 บาท/เดือน (Junior), ฿40,000-68,000 บาท/เดือน (Senior)",
        "salary": ["n/a"],
        "pros": [
          "ไวยากรณ์ที่เรียบง่ายและสอดคล้อง (S-expressions)",
          "รองรับ Functional Programming อย่างเต็มที่",
          "ความสามารถในการ Meta-programming สูง (Macro System)",
          "เหมาะสำหรับการเรียนรู้แนวคิดพื้นฐานของวิทยาการคอมพิวเตอร์",
          "มีระบบ Continuations ที่ทรงพลัง"
        ],
        "cons": [
          "Learning Curve สูงสำหรับผู้ที่ไม่คุ้นเคยกับ Lisp หรือ Functional Programming",
          "ไวยากรณ์วงเล็บ (Parentheses) อาจดูสับสนสำหรับผู้เริ่มต้น",
          "ชุมชนนักพัฒนาและ Library เล็กกว่าภาษาหลัก",
          "ไม่เหมาะกับแอปพลิเคชันเชิงพาณิชย์ขนาดใหญ่โดยตรง",
          "ประสิทธิภาพอาจไม่ดีเท่าภาษาที่คอมไพล์แบบ Native"
        ],
        "frameworks": [],
        "learn": ["SICP (Structure and Interpretation of Computer Programs)", "Racket (dialect of Scheme)", "Scheme R7RS"],
        "variables": {
          "declaration": [
            "(define variable-name value)"
          ],
          "types": [
            "Numbers (integers, reals, complex)", "Booleans (#t, #f)", "Characters", "Strings", "Symbols", "Lists", "Pairs", "Procedures (Functions)", "Vectors"
          ],
          "examples": [
            "(define x 10) ; กำหนดตัวแปร x เก็บค่า 10",
            "(define message \"Hello Scheme\") ; กำหนดตัวแปร message เก็บสตริง",
            "(define pi 3.14159)"
          ]
        },
        "functions": {
          "declaration": [
            "(define (function-name parameters) body)"
          ],
          "examples": [
            "(define (add a b) (+ a b)) ; ฟังก์ชัน add เพื่อบวกเลข",
            "(define (greet name) (display \"Hello \") (display name) (newline)) ; ฟังก์ชัน greet เพื่อทักทาย"
          ],
          "built_in": ["+", "-", "*", "/", "display", "newline", "car", "cdr", "cons", "list", "lambda"],
          "async": []
        },
        "syntax": {
          "comments": [
            "; This is a Scheme comment ; คอมเมนต์บรรทัดเดียว",
            "#| Multi line |# ; คอมเมนต์หลายบรรทัด"
          ],
          "conditions": [
            "(if condition then-expression else-expression)",
            "(cond (condition1 expr1) (condition2 expr2) (else default-expr))"
          ],
          "loops": [
            "(do ((var init step) ...) (test result ...) body ...)",
            "recursive functions (common for iteration)"
          ],
          "operators": [
            "(+ a b)", "(- a b)", "(* a b)", "(/ a b)", "(= a b)", "(< a b)", "(> a b)", "(and cond1 cond2)", "(or cond1 cond2)", "(not cond)"
          ],
          "examples": [
            "(if (> x 0) 'positive 'non-positive) ; ถ้า x > 0 เป็นบวก ไม่งั้นไม่ใช่บวก",
            "(define (countdown n)\n  (if (= n 0)\n      (display \"Blastoff!\")\n      (begin (display n) (newline) (countdown (- n 1))))) ; ฟังก์ชันนับถอยหลัง"
          ]
        }
      },
      {
        "id": 37,
        "name": "Smalltalk",
        "slug": "smalltalk",
        "logo": "img/smalltalk.png",
        "desc": "Smalltalk เป็นภาษาโปรแกรมเชิงวัตถุบริสุทธิ์ (Pure Object-Oriented) ที่มีแนวคิดการทำงานแบบ Message Passing และสภาพแวดล้อมการพัฒนาแบบโต้ตอบ (Interactive Development Environment - IDE) ซึ่งเป็นผู้บุกเบิกแนวคิด GUI และการพัฒนาแบบ Rapid Prototyping มีอิทธิพลอย่างมากต่อภาษาและ Frameworks สมัยใหม่หลายตัว",
        "by": "Alan Kay, Dan Ingalls, Adele Goldberg, etc. (Xerox PARC)",
        "yr": "1970s (Smalltalk-80)",
        "level": "3",
        "par": ["Object-Oriented", "Reflective", "Dynamic"],
        "fields": ["Education / Teaching Tools", "Rapid Prototyping", "(Legacy)"],
        "rank": "45+ ลดลงมาก แต่ยังมีใช้ใน Legacy Enterprise",
        "salary_range": "฿26,000-42,000 บาท/เดือน (Junior), ฿42,000-72,000 บาท/เดือน (Senior)",
        "salary": ["n/a"],
        "pros": [
          "Pure Object-Oriented System (ทุกอย่างเป็น Object)",
          "สภาพแวดล้อมการพัฒนาแบบโต้ตอบ (REPL) ที่ทรงพลัง",
          "Hot-swapping code (เปลี่ยนโค้ดขณะรันได้)",
          "Concept ที่เรียบง่ายแต่ทรงพลัง (Message Passing)",
          "เป็นผู้บุกเบิกแนวคิด GUI และ OOP สมัยใหม่"
        ],
        "cons": [
          "Learning Curve สูงสำหรับผู้ที่ไม่คุ้นเคยกับแนวคิด Pure OOP",
          "ไวยากรณ์ที่แตกต่างจากภาษาตระกูล C อย่างมาก",
          "ชุมชนนักพัฒนาขนาดเล็กและเฉพาะทาง",
          "ไม่ได้รับความนิยมในตลาดหลักในปัจจุบัน (เน้น Legacy Systems)",
          "ประสิทธิภาพอาจไม่ดีเท่าภาษาที่คอมไพล์แบบ Native"
        ],
        "frameworks": ["Seaside (Web Framework)"],
        "learn": ["Pharo (modern Smalltalk environment)", "Squeak Smalltalk", "Smalltalk-80: The Language and its Implementation"],
        "variables": {
          "declaration": [
            "| variableName | (Temporary variables)",
            "ClassName new (Instance creation)"
          ],
          "types": [
            "Boolean", "Integer", "Float", "Fraction", "Character", "String", "Array", "Dictionary", "Block (code block)", "Object (base class)"
          ],
          "examples": [
            "| myNumber | \"ประกาศตัวแปรชั่วคราว myNumber\"",
            "myNumber := 10. \"กำหนดค่า 10 ให้ myNumber\"",
            "| greeting | greeting := 'Hello Smalltalk'. \"กำหนดสตริง\"",
            "Object new \"สร้าง Object ใหม่\""
          ]
        },
        "functions": {
          "declaration": [
            "methodName: argument1 with: argument2\n  \"Comment explaining the method\"\n  | temporaryVar |\n  ... method body ...\n  ^ result"
          ],
          "examples": [
            "add: a and: b\n  ^ a + b \"เมธอดบวกเลข\"",
            "greet: aName\n  Transcript show: 'Hello ' , aName; cr \"เมธอดทักทาย\""
          ],
          "built_in": ["at:", "put:", "do:", "collect:", "select:", "ifTrue:ifFalse:"],
          "async": []
        },
        "syntax": {
          "comments": [
            "\"This is a Smalltalk comment\""
          ],
          "conditions": [
            "condition ifTrue: [ ... ] ifFalse: [ ... ]",
            "number isZero ifTrue: [ ... ]"
          ],
          "loops": [
            "1 to: 5 do: [ :i | Transcript show: i asString; cr ]",
            "collection do: [ :each | ... ]"
          ],
          "operators": [
            "+", "-", "*", "/", "=", "<", ">", "<=", ">=", "~=", "// (message sending)"
          ],
          "examples": [
            "10 > 5 ifTrue: [ Transcript show: '10 is greater than 5'; cr ] ; 'ถ้า 10 มากกว่า 5 ให้แสดงผล'",
            "1 to: 3 do: [ :i | Transcript show: 'Loop: ' , i asString; cr ] ; 'วนลูป 1 ถึง 3 แสดงผล'"
          ]
        }
      },
      {
        "id": 38,
        "name": "Julia",
        "slug": "julia",
        "logo": "img/julia.png", 
        "desc": "Julia คือภาษาโปรแกรมที่มีความเร็วสูง เหมาะสำหรับงานคำนวณทางวิทยาศาสตร์ วิเคราะห์ข้อมูล และ Machine Learning โดยเฉพาะ ถูกออกแบบมาให้มีความง่ายในการเขียนเหมือน Python แต่มีความเร็วใกล้เคียง C",
        "by": "Jeff Bezanson, Stefan Karpinski, Viral B. Shah, Alan Edelman",
        "yr": "February 2012",
        "level": "3",
        "par": ["Multi-paradigm", "Multiple dispatch", "High-performance"],
        "fields": ["Scientific Computing", "Data Science / Analytics", "AI / Machine Learning", "High-Performance Computing", "Numerical Computing"],
        "rank": "25-30 เติบโตใน Scientific Computing (1.9% แต่กำลังเพิ่ม)",
        "salary_range": "฿35,000-58,000 บาท/เดือน (Junior), ฿58,000-98,000 บาท/เดือน (Senior)",
        "salary": ["high", "veryhigh"],
        "pros": [
            "ประสิทธิภาพสูงมากสำหรับการคำนวณตัวเลข",
            "เขียนง่ายและมีไวยากรณ์คล้าย Python",
            "สามารถเรียกใช้ไลบรารีจาก Python, R, C, Fortran ได้โดยตรง",
            "เหมาะสำหรับงานวิจัยและพัฒนาโมเดลที่ซับซ้อน",
            "มีระบบประเภทข้อมูล (type system) ที่แข็งแกร่งแต่ยืดหยุ่น"
        ],
        "cons": [
            "ชุมชนนักพัฒนายังไม่ใหญ่เท่า Python หรือ R",
            "มีแพ็คเกจและไลบรารีให้เลือกใช้น้อยกว่าภาษาที่นิยมกว่า",
            "เวลาในการคอมไพล์ครั้งแรก (Time To First Plot - TTFP) อาจช้า",
            "ตลาดงานในไทยยังค่อนข้างเฉพาะทาง"
        ],
        "frameworks": ["Flux.jl (Machine Learning)", "DataFrames.jl (Data Manipulation)", "Plots.jl (Visualization)"],
        "learn": ["Julia Documentation", "Julia Academy", "Julia for Data Science"],
        "variables": {
            "declaration": ["var_name = value"],
            "types": ["Int", "Float64", "Complex", "String", "Char", "Bool", "Array", "Tuple", "Dict"],
            "examples": [
                "x = 10 // กำหนดตัวแปร x เก็บตัวเลข 10",
                "name = \"Julia\" // กำหนดตัวแปร name เก็บสตริง \"Julia\"",
                "A = [1 2; 3 4] // กำหนดเมทริกซ์ 2x2"
            ]
        },
        "functions": {
            "declaration": ["function name(params) ... end", "name(params) = ... (Single-line function)"],
            "examples": [
                "function greet(name) return \"Hello $(name)\" end // ฟังก์ชัน greet เพื่อทักทาย",
                "add(a, b) = a + b // ฟังก์ชัน add แบบย่อ เพื่อบวกเลข"
            ],
            "built_in": ["print()", "sqrt()", "sum()", "length()"]
        },
        "syntax": {
            "comments": ["# Single line comment # คอมเมนต์บรรทัดเดียว", "#= Multi line comment =# # คอมเมนต์หลายบรรทัด"],
            "conditions": ["if...elseif...else...end"],
            "loops": ["for...in...end", "while...end"],
            "operators": ["+", "-", "*", "/", "^", "%", "==", "!=", "&&", "||", "!"]
        }
    },
    {
      "id": 39,
      "name": "Solidity",
      "slug": "solidity",
      "logo": "img/solidity.png", 
      "desc": "Solidity คือภาษาโปรแกรมที่ใช้สำหรับเขียน Smart Contracts ที่ทำงานบน Ethereum Blockchain และ EVM (Ethereum Virtual Machine) Compatible Chains อื่นๆ เช่น BNB Smart Chain, Polygon เป็นภาษาหลักในการพัฒนาแอปพลิเคชันแบบกระจายศูนย์ (dApps) และ Token",
      "by": "Gavin Wood, Christian Reitwiessner, Alex Beregszaszi, Liana Husikyan, Yoichi Hirai",
      "yr": "2014",
      "level": "3",
      "par": ["Object-Oriented", "Imperative", "Contract-Oriented"],
      "fields": ["Blockchain Development", "Smart Contracts", "Decentralized Applications (dApps)", "Web3"],
      "rank": "30+ เติบโตตาม Blockchain และ Web3 Trend",
      "salary_range": "฿40,000-65,000 บาท/เดือน (Junior), ฿65,000-130,000 บาท/เดือน (Senior)",
      "salary": ["veryhigh"],
      "pros": [
          "ภาษามาตรฐานสำหรับการพัฒนา Smart Contracts บน Ethereum",
          "มีเครื่องมือและไลบรารีสำหรับ Blockchain Development ค่อนข้างเยอะ",
          "รองรับการทำงานกับเครือข่าย EVM-compatible หลากหลาย",
          "ความต้องการในตลาด Blockchain สูงและรายได้ดี"
      ],
      "cons": [
          "การเขียนโค้ดต้องระมัดระวังเรื่องความปลอดภัยสูงมาก (ช่องโหว่)",
          "ค่าธรรมเนียม Gas ในการทำงานบน Blockchain ทำให้การทำงานบางอย่างมีต้นทุนสูง",
          "ไม่เหมาะสำหรับงานทั่วไปที่ไม่เกี่ยวข้องกับ Blockchain",
          "การดีบักและการทดสอบอาจซับซ้อนกว่าภาษาทั่วไป"
      ],
      "frameworks": ["Hardhat", "Truffle", "Foundry", "OpenZeppelin"],
      "learn": ["Solidity Documentation", "CryptoZombies", "freeCodeCamp - Blockchain Development"],
      "variables": {
          "declaration": ["type visibility name;"],
          "types": ["uint (unsigned integer)", "int (signed integer)", "address", "bool", "bytes", "string", "array (fixed/dynamic)", "struct", "enum", "mapping"],
          "examples": [
              "uint public myNumber = 10; // ตัวแปรจำนวนเต็มบวกสาธารณะ",
              "address public owner; // ตัวแปรที่อยู่บน Blockchain",
              "bool private _isActive; // ตัวแปรบูลีนส่วนตัว"
          ]
      },
      "functions": {
          "declaration": ["function name(params) visibility stateMutability { ... }"],
          "examples": [
              "function withdraw(uint amount) public { require(balance[msg.sender] >= amount); balance[msg.sender] -= amount; } // ฟังก์ชันถอนเงิน",
              "function getBalance() public view returns (uint) { return balance[msg.sender]; } // ฟังก์ชันดูยอดคงเหลือ"
          ],
          "built_in": ["msg.sender", "msg.value", "block.timestamp", "require()", "revert()"]
      },
      "syntax": {
          "comments": ["// Single line // คอมเมนต์บรรทัดเดียว", "/* Multi line */ // คอมเมนต์หลายบรรทัด"],
          "conditions": ["if...else"],
          "loops": ["for", "while"],
          "operators": ["+", "-", "*", "/", "%", "==", "!=", "<", ">", "<=", ">="]
      }
  },
  {
    "id": 40,
    "name": "Verilog / VHDL",
    "slug": "verilog-vhdl",
    "logo": "img/hdl.png", 
    "desc": "Verilog และ VHDL เป็นภาษาสำหรับการอธิบายฮาร์ดแวร์ (Hardware Description Languages - HDLs) ไม่ใช่ภาษาโปรแกรมมิ่งทั่วไป แต่ใช้ในการออกแบบวงจรอิเล็กทรอนิกส์, ชิป (ASIC) และโปรแกรม FPGA (Field-Programmable Gate Array) เพื่อจำลองและสังเคราะห์ฮาร์ดแวร์",
    "by": "Verilog: Phil Moorby (Gateway Design Automation); VHDL: U.S. Department of Defense",
    "yr": "Verilog: 1984; VHDL: 1987",
    "level": "1",
    "par": ["Hardware Description", "Concurrent", "Dataflow", "Behavioral"],
    "fields": ["Hardware Design", "Embedded Systems", "Digital Circuit Design", "FPGA / ASIC Development", "Microelectronics"],
    "rank": "40+ Niche ใน Hardware Design",
    "salary_range": "฿32,000-52,000 บาท/เดือน (Junior), ฿52,000-90,000 บาท/เดือน (Senior)",
    "salary": ["veryhigh"],
    "pros": [
        "เป็นมาตรฐานในการออกแบบและจำลองวงจรดิจิทัล",
        "สามารถสร้างวงจรที่ซับซ้อนบนชิปและ FPGA ได้",
        "เป็นพื้นฐานสำคัญสำหรับวิศวกรรมอิเล็กทรอนิกส์และคอมพิวเตอร์ฮาร์ดแวร์",
        "ผู้เชี่ยวชาญมีน้อยและเป็นที่ต้องการสูงในอุตสาหกรรมชิป"
    ],
    "cons": [
        "ไม่สามารถใช้เขียนโปรแกรมซอฟต์แวร์ทั่วไปได้",
        "การเรียนรู้และเข้าใจแนวคิดฮาร์ดแวร์ต้องใช้เวลา",
        "การดีบักและจำลองวงจรซับซ้อนอาจใช้เวลานานและทรัพยากรสูง",
        "ตลาดงานเฉพาะทางสูงมาก"
    ],
    "frameworks": ["Vivado (Xilinx)", "Quartus Prime (Intel Altera)", "ModelSim (Siemens EDA)"],
    "learn": ["Nand2Tetris (concept)", "Online FPGA/ASIC courses", "Textbooks on Digital Design"],
    "variables": {
        "declaration": ["wire signal_name;", "reg variable_name;"],
        "types": ["wire", "reg", "integer", "real", "time", "bit", "logic"],
        "examples": [
            "wire [7:0] data_bus; // สายสัญญาณขนาด 8 บิต",
            "reg [3:0] counter; // ตัวแปรรีจิสเตอร์ขนาด 4 บิต"
        ]
    },
    "functions": {
        "declaration": ["function name; ... endfunction (Verilog)", "function name return type is ... end function (VHDL)"],
        "examples": [
            "always @(posedge clk) begin counter <= counter + 1; end // เพิ่มค่า counter ทุก clock edge (Verilog)",
            "process (clk) begin if rising_edge(clk) then counter <= counter + 1; end if; end process; // VHDL"
        ],
        "built_in": ["$display", "$time", "assign", "always", "initial", "process", "port map"]
    },
    "syntax": {
        "comments": ["// Single line (Verilog) // คอมเมนต์บรรทัดเดียว", "-- Single line (VHDL) // คอมเมนต์บรรทัดเดียว", "/* Multi line */ (Verilog) // คอมเมนต์หลายบรรทัด"],
        "conditions": ["if...else", "case"],
        "loops": ["for", "while"],
        "operators": ["& (AND)", "| (OR)", "~ (NOT)", "^ (XOR)", "+", "-", "*", "/", "==", "!="]
    }
  },
  {
    "id": 41,
    "name": "Bash",
    "slug": "bash",
    "logo": "img/bash.png",
    "desc": "Bash (Bourne-Again SHell) เป็น Command Language Interpreter และ Shell Scripting Language ที่ใช้กันอย่างแพร่หลายในระบบปฏิบัติการ Linux, Unix และ macOS สำหรับการทำงานอัตโนมัติ, การจัดการระบบ, การประมวลผลไฟล์ และการทำงานผ่าน Command Line Interface (CLI)",
    "by": "Brian Fox",
    "yr": "1989",
    "level": "Unknown",
    "par": ["Imperative", "Procedural", "Scripting"],
    "fields": ["Scripting / Automation", "DevOps / Automation", "System Administration", "Command-line Tools"],
    "rank": "ใช้โดย 28.1% ของนักพัฒนา System Administration",
    "salary_range": "฿25,000-40,000 บาท/เดือน (Junior), ฿40,000-68,000 บาท/เดือน (Senior)",
    "salary": ["low", "mid", "high"],
    "pros": [
      "ใช้งานง่ายสำหรับการจัดการระบบและไฟล์",
      "เป็นมาตรฐานบนระบบ Unix-like ส่วนใหญ่",
      "มีเครื่องมือ CLI จำนวนมากให้ใช้ร่วมกัน",
      "เหมาะสำหรับงาน Automation ขนาดเล็กถึงกลาง"
    ],
    "cons": [
      "ไวยากรณ์อาจซับซ้อนและผิดพลาดได้ง่ายสำหรับงานใหญ่ๆ",
      "ประสิทธิภาพไม่สูงเท่าภาษา Compiled",
      "การจัดการ Error ที่ซับซ้อนอาจทำได้ยาก",
      "ไม่เหมาะกับงานที่ต้องมีการคำนวณซับซ้อน"
    ],
    "frameworks": [],
    "learn": ["Bash Manual", "Linux Command Line Basics", "Shell Scripting Tutorial"],
    "variables": {
      "declaration": ["variable_name=value"],
      "types": ["String", "Number (Implicit)", "Array"],
      "examples": [
        "name=\"John Doe\" # กำหนดตัวแปร name เก็บสตริง 'John Doe'",
        "age=30 # กำหนดตัวแปร age เก็บตัวเลข 30",
        "files=(file1.txt file2.txt) # กำหนดอาร์เรย์ files"
      ]
    },
    "functions": {
      "declaration": ["function_name() { ... }", "name() { ... }"],
      "examples": [
        "greet() { echo \"Hello, $1!\"; } # ฟังก์ชัน greet รับพารามิเตอร์แรก",
        "calculate_sum() { sum=$(($1 + $2)); echo \"Sum: $sum\"; } # ฟังก์ชันบวกเลข"
      ],
      "built_in": ["echo", "cd", "ls", "grep", "cat", "find", "cp", "mv"]
    },
    "syntax": {
      "comments": ["# Single line comment # คอมเมนต์บรรทัดเดียว"],
      "conditions": ["if...then...fi", "case...esac"],
      "loops": ["for...do...done", "while...do...done"],
      "operators": ["-eq", "-ne", "-gt", "-lt", "-ge", "-le", "==", "!=", "&&", "||", "-z", "-n"],
      "examples": [
        "if [ $age -ge 18 ]; then echo \"Adult\"; else echo \"Minor\"; fi # ถ้าอายุถึง 18 เป็นผู้ใหญ่ ไม่งั้นเป็นเด็ก",
        "for file in *.txt; do echo \"Processing $file\"; done # วนลูปประมวลผลไฟล์ .txt ทุกไฟล์",
        "read -p \"Enter your name: \" user_name; echo \"Welcome, $user_name!\" # รับอินพุตจากผู้ใช้"
      ]
    }
  },
  {
    "id": 42,
    "name": "PowerShell",
    "slug": "powershell",
    "logo": "img/powershell.png",
    "desc": "PowerShell เป็น Command-line Shell และ Scripting Language ของ Microsoft ที่พัฒนาขึ้นมาเพื่อการจัดการระบบ Windows และ Cloud (Azure) มีความสามารถในการจัดการวัตถุ (Objects) ทำให้มีพลังมากกว่า Command Prompt เดิม และเป็นส่วนสำคัญในงาน DevOps และ Automation บนแพลตฟอร์ม Microsoft",
    "by": "Microsoft (Jeffrey Snover)",
    "yr": "2006",
    "level": "Unknown",
    "par": ["Object-Oriented", "Imperative", "Procedural", "Scripting"],
    "fields": ["Scripting / Automation", "DevOps / Automation", "System Administration", "Cloud Infrastructure (Azure)", "Windows Management"],
    "rank": "30+ แข็งแกร่งใน Windows Ecosystem",
    "salary_range": "฿26,000-42,000 บาท/เดือน (Junior), ฿42,000-72,000 บาท/เดือน (Senior)",
    "salary": ["low", "mid", "high"],
    "pros": [
      "ทรงพลังในการจัดการระบบ Windows และ Azure",
      "ทำงานกับ Objects ได้ ทำให้จัดการข้อมูลได้มีประสิทธิภาพ",
      "มี Module และ Cmdlet (Command-let) จำนวนมาก",
      "รองรับการทำงานแบบ Cross-platform (Core)"
    ],
    "cons": [
      "ไวยากรณ์อาจแตกต่างจากภาษา Scripting อื่นๆ",
      "การเริ่มต้นเรียนรู้อาจมี Learning Curve",
      "ประสิทธิภาพไม่สูงเท่าภาษา Compiled",
      "เน้นไปที่ Ecosystem ของ Microsoft เป็นหลัก"
    ],
    "frameworks": [],
    "learn": ["PowerShell Documentation", "Microsoft Learn - PowerShell"],
    "variables": {
      "declaration": ["$variable_name = value"],
      "types": ["String", "Int32", "Boolean", "Array", "HashTable", "Object"],
      "examples": [
        "$name = \"Jane Doe\" # กำหนดตัวแปร name เก็บสตริง 'Jane Doe'",
        "$age = 25 # กำหนดตัวแปร age เก็บตัวเลข 25",
        "$files = @(\"file1.txt\", \"file2.txt\") # กำหนดอาร์เรย์ files"
      ]
    },
    "functions": {
      "declaration": ["function function-name { ... }", "function name { param(...) ... }"],
      "examples": [
        "function Get-Greeting { param([string]$Name) \"Hello, $Name!\" } # ฟังก์ชันรับพารามิเตอร์",
        "function Add-Numbers { param([int]$a, [int]$b) return ($a + $b) } # ฟังก์ชันบวกเลข"
      ],
      "built_in": ["Get-Process", "Set-Item", "Remove-Item", "Get-Content", "Invoke-WebRequest"]
    },
    "syntax": {
      "comments": ["# Single line comment # คอมเมนต์บรรทัดเดียว", "<# Multi line #> # คอมเมนต์หลายบรรทัด"],
      "conditions": ["if (...) { ... } elseif (...) { ... } else { ... }", "switch"],
      "loops": ["for (...){...}", "foreach (...){...}", "while (...){...}"],
      "operators": ["-eq", "-ne", "-gt", "-lt", "-ge", "-le", "-and", "-or", "-not"],
      "examples": [
        "if ($age -ge 18) { \"Adult\" } else { \"Minor\" } # ถ้าอายุถึง 18 เป็นผู้ใหญ่ ไม่งั้นเป็นเด็ก",
        "Get-Service | Where-Object {$_.Status -eq 'Running'} # ดึง Service ที่กำลังทำงานอยู่",
        "foreach ($file in $files) { Write-Host \"Processing $file\" } # วนลูปประมวลผลไฟล์"
      ]
    }
  },
  {
    "id": 43,
    "name": "TensorFlow (Python API)",
    "slug": "tensorflow",
    "logo": "img/tensorflow.png",
    "desc": "TensorFlow เป็น Open-source Machine Learning Framework ที่พัฒนาโดย Google ใช้สำหรับงาน Machine Learning และ Deep Learning โดยเฉพาะการสร้างและฝึกฝนโมเดล Neural Networks รองรับการทำงานได้ทั้งบน CPU, GPU และ TPU รวมถึงการ Deploy บน Mobile และ Web เขียนโค้ดหลักด้วย Python",
    "by": "Google Brain Team",
    "yr": "2015",
    "level": "unknown (เป็น Framework ของภาษา Python)",
    "par": ["Deep Learning", "Machine Learning"],
    "fields": ["AI / Machine Learning", "Deep Learning", "Data Science / Analytics", "Cloud Infrastructure"],
    "rank": "1 ML Framework ทั่วโลก (ใช้โดย 12.1% ของนักพัฒนา AI)",
    "salary_range": "฿45,000-70,000 บาท/เดือน (Junior), ฿70,000-125,000 บาท/เดือน (Senior)",
    "salary": ["mid", "high", "veryhigh"],
    "pros": [
      "รองรับงาน Deep Learning ที่ซับซ้อน",
      "มี Ecosystem ขนาดใหญ่และเครื่องมือที่หลากหลาย",
      "ยืดหยุ่นและปรับแต่งได้สูง",
      "รองรับการ Deploy บนหลายแพลตฟอร์ม"
    ],
    "cons": [
      "อาจมี Learning Curve สูงสำหรับผู้เริ่มต้น",
      "การจัดการ Graph ที่ซับซ้อนอาจทำได้ยาก",
      "บางครั้งอาจรู้สึกเป็น 'Black Box'"
    ],
    "frameworks": [],
    "learn": ["TensorFlow Official Docs", "Coursera - TensorFlow Courses"],
    "variables": {
      "declaration": ["tf.constant", "tf.Variable"],
      "types": ["tf.Tensor (float32, int32, etc.)"],
      "examples": [
        "import tensorflow as tf",
        "tensor_a = tf.constant([1, 2, 3]) # กำหนดค่าคงที่ Tensor",
        "variable_b = tf.Variable(0.5) # กำหนดตัวแปรที่เปลี่ยนแปลงได้"
      ]
    },
    "functions": {
      "declaration": ["tf.function", "tf.keras.layers.Dense", "model.compile", "model.fit"],
      "examples": [
        "model = tf.keras.Sequential([tf.keras.layers.Dense(10, activation='relu')]) # สร้าง Layer ในโมเดล",
        "model.compile(optimizer='adam', loss='mse') # กำหนด Optimizer และ Loss",
        "model.fit(X_train, y_train, epochs=10) # ฝึกฝนโมเดล"
      ],
      "built_in": ["tf.add()", "tf.matmul()", "tf.GradientTape()"]
    },
    "syntax": {
      "comments": ["# Python style comments"],
      "conditions": ["Python if/else"],
      "loops": ["Python for/while"],
      "operators": ["Python operators"],
      "examples": [
        "if tf.reduce_sum(tensor_a) > 5: print(\"Sum is large\") # เงื่อนไขบน Tensor",
        "for i in range(3): print(tensor_a[i]) # วนลูปผ่าน Tensor",
        "with tf.GradientTape() as tape: loss = model(inputs) # คำนวณ Gradient"
      ]
    }
  },
  {
    "id": 44,
    "name": "PyTorch (Python API)",
    "slug": "pytorch",
    "logo": "img/pytorch.png",
    "desc": "PyTorch เป็น Open-source Machine Learning Library ที่พัฒนาโดย Facebook AI Research (FAIR) เน้นความยืดหยุ่นและความง่ายในการใช้งานสำหรับการสร้างและฝึกฝนโมเดล Deep Learning โดยเฉพาะงานวิจัยและ Prototyping มีจุดเด่นที่ Dynamic Computational Graph เขียนโค้ดหลักด้วย Python",
    "by": "Facebook AI Research (FAIR)",
    "yr": "2016",
    "level": "unknown (เป็น Library/Framework ของภาษา Python)",
    "par": ["Deep Learning", "Machine Learning"],
    "fields": ["AI / Machine Learning", "Deep Learning", "Data Science / Analytics", "Research & Development"],
    "rank": "2 ML Framework และเติบโตแซง TensorFlow (10.2% ของนักพัฒนา)",
    "salary_range": "฿42,000-68,000 บาท/เดือน (Junior), ฿68,000-120,000 บาท/เดือน (Senior)",
    "salary": ["mid", "high", "veryhigh"],
    "pros": [
      "ใช้งานง่ายและยืดหยุ่นสำหรับงานวิจัยและ Prototyping",
      "Dynamic Computational Graph ช่วยให้ดีบักง่าย",
      "ได้รับความนิยมในวงการวิจัยและวิชาการ",
      "มีชุมชนที่แข็งแกร่ง"
    ],
    "cons": [
      "Ecosystem อาจไม่ใหญ่เท่า TensorFlow ในบางด้าน",
      "การ Deploy บน Production Scale อาจต้องใช้เครื่องมือเสริม"
    ],
    "frameworks": [],
    "learn": ["PyTorch Official Docs", "Fast.ai Courses"],
    "variables": {
      "declaration": ["torch.tensor", "torch.nn.Parameter"],
      "types": ["torch.Tensor (float32, int32, etc.)"],
      "examples": [
        "import torch",
        "x = torch.tensor([1, 2, 3]) # กำหนด Tensor",
        "w = torch.nn.Parameter(torch.randn(10)) # กำหนด Parameter สำหรับโมเดล"
      ]
    },
    "functions": {
      "declaration": ["torch.nn.Module", "forward (method)"],
      "examples": [
        "class MyModel(torch.nn.Module): # สร้าง Class โมเดล",
        "  def forward(self, x): return self.linear(x) # กำหนดการทำงานของโมเดล",
        "loss.backward() # คำนวณ Gradient"
      ],
      "built_in": ["torch.sum()", "torch.matmul()", "torch.optim.SGD()"]
    },
    "syntax": {
      "comments": ["# Python style comments"],
      "conditions": ["Python if/else"],
      "loops": ["Python for/while"],
      "operators": ["Python operators"],
      "examples": [
        "if x.sum() > 5: print(\"Sum is large\") # เงื่อนไขบน Tensor",
        "for data, label in dataloader: # วนลูปผ่าน DataLoader",
        "  output = model(data)"
      ]
    }
  },
  {
    "id": 45,
    "name": "GraphQL",
    "slug": "graphql",
    "logo": "img/graphql.png",
    "desc": "GraphQL คือภาษา Query Language สำหรับ API และเป็น Runtime สำหรับการทำ Query ด้วยข้อมูลที่มีอยู่ คุณลักษณะเฉพาะของ GraphQL คือความสามารถในการให้ Client กำหนดรูปแบบโครงสร้างของข้อมูลที่ต้องการจาก Server ได้อย่างชัดเจน",
    "by": "Facebook",
    "yr": "2015 (Open Sourced)",
    "level": "5",
    "par": ["Declarative"],
    "fields": ["API Development", "Web Backend", "Data Fetching"],
    "rank": "20-25 เติบโตใน Modern API Development (5.1% ของนักพัฒนา)",
    "salary_range": "฿35,000-58,000 บาท/เดือน (Junior), ฿58,000-98,000 บาท/เดือน (Senior)",
    "salary": ["mid", "high"],
    "pros": [
      "Client สามารถระบุข้อมูลที่ต้องการได้อย่างแม่นยำ (ลด Over-fetching/Under-fetching)",
      "Single Endpoint สำหรับ Query ข้อมูลหลายประเภท",
      "ลดจำนวน Round Trips ระหว่าง Client กับ Server",
      "มีเครื่องมือและ Ecosystem ที่เติบโตอย่างรวดเร็ว (เช่น Apollo, Relay)"
    ],
    "cons": [
      "Learning Curve สูงกว่า REST สำหรับบางกรณี",
      "การจัดการ Caching อาจซับซ้อนกว่า",
      "ไม่เหมาะกับทุก Use Case (บางครั้ง REST ก็พอ)",
      "อาจทำให้เกิด Query ที่ซับซ้อนและมีประสิทธิภาพต่ำหากออกแบบไม่ดี"
    ],
    "frameworks": ["Apollo Server", "Relay", "Hasura"],
    "learn": ["GraphQL Official Website", "How to GraphQL", "Apollo GraphQL Docs"],
    "variables": {
      "declaration": ["Query variables ($varName: Type!)"],
      "types": ["String", "Int", "Float", "Boolean", "ID", "Enum", "Custom Scalar"],
      "examples": [
        "query GetUserById($id: ID!) { # กำหนด Query และตัวแปร id",
        "  user(id: $id) { # ดึงข้อมูล user โดยใช้ id",
        "    name",
        "    email",
        "    posts { # ดึงข้อมูลโพสต์ของ user นั้นๆ ด้วย",
        "      title",
        "      content",
        "    }",
        "  }",
        "}",
        "mutation CreateUser($name: String!, $email: String!) { # กำหนด Mutation และตัวแปร",
        "  createUser(input: { name: $name, email: $email }) {",
        "    id",
        "    name",
        "  }",
        "}"
      ]
    },
    "functions": {
      "declaration": ["Queries", "Mutations", "Subscriptions"],
      "examples": [
        "query { allUsers { id name } } # Query เพื่อดึงข้อมูลผู้ใช้ทั้งหมด",
        "mutation { createUser(name: \"New User\") { id } } # Mutation เพื่อสร้างผู้ใช้ใหม่",
        "subscription { newPost { id title } } # Subscription เพื่อรับการแจ้งเตือนเมื่อมีโพสต์ใหม่"
      ],
      "built_in": []
    },
    "syntax": {
      "comments": ["# Single line comment"],
      "conditions": ["N/A (Logic handled by resolver functions in backend)"],
      "loops": ["N/A (Logic handled by resolver functions in backend)"],
      "operators": ["N/A (Logical operations handled by backend)"],
      "examples": [
        "query { product(id: \"123\") { name price } } # Query ดึงชื่อและราคาของสินค้าที่มี ID 123",
        "fragment UserFields on User { # Fragment สำหรับระบุ Field ที่ใช้ซ้ำๆ",
        "  id",
        "  name",
        "}",
        "query GetUserAndPosts {",
        "  user(id: \"456\") { ...UserFields }",
        "  posts(userId: \"456\") { title }",
        "}"
      ]
    },
    "why_good": "ดีเยี่ยมสำหรับการสร้าง API ที่ยืดหยุ่นและมีประสิทธิภาพสูง ทำให้ Client สามารถควบคุมข้อมูลที่จะได้รับได้อย่างละเอียด ลด Over-fetching และ Under-fetching"
  },
  {
    "id": 46,
    "name": "PL/SQL",
    "slug": "plsql",
    "logo": "img/oracle.png",
    "desc": "PL/SQL เป็นภาษา Extension ที่เพิ่มความสามารถเชิงโครงสร้าง (Procedural) ให้กับ SQL ในฐานข้อมูล Oracle Database ใช้สำหรับเขียน Stored Procedures, Functions, Packages และ Triggers เพื่อจัดการและประมวลผลข้อมูลที่ซับซ้อนภายในฐานข้อมูลโดยตรง",
    "by": "Oracle Corporation",
    "yr": "1980s",
    "level": "5",
    "par": ["Procedural", "Declarative (SQL embedded)"],
    "fields": ["Database / SQL", "Backend Development", "Enterprise Systems"],
    "rank": "35+ แข็งแกร่งใน Oracle Database Ecosystem",
    "salary_range": "฿28,000-45,000 บาท/เดือน (Junior), ฿45,000-78,000 บาท/เดือน (Senior)",
    "salary": ["low", "mid", "high"],
    "pros": [
      "ประสิทธิภาพสูงในการประมวลผลข้อมูลใน Database Server",
      "ลด Traffic ระหว่าง Client กับ Server",
      "ช่วยให้การจัดการ Transaction ซับซ้อนทำได้ง่ายขึ้น",
      "เป็นภาษาที่สำคัญสำหรับ Oracle Ecosystem"
    ],
    "cons": [
      "เฉพาะสำหรับ Oracle Database",
      "การดีบักและจัดการ Version Control อาจทำได้ยาก",
      "Learning Curve สำหรับผู้เริ่มต้น SQL",
      "ไม่เหมาะกับงานนอก Database"
    ],
    "frameworks": [],
    "learn": ["Oracle PL/SQL Documentation", "Oracle Academy"],
    "variables": {
      "declaration": ["variable_name datatype;"],
      "types": ["VARCHAR2", "NUMBER", "DATE", "BOOLEAN", "RECORD", "TABLE"],
      "examples": [
        "DECLARE\n  v_employee_name VARCHAR2(100);\n  v_salary NUMBER(10, 2) := 50000.00;\nBEGIN\n  SELECT name INTO v_employee_name FROM employees WHERE id = 1;\nEND;"
      ]
    },
    "functions": {
      "declaration": ["FUNCTION function_name (params) RETURN datatype IS ... END;"],
      "examples": [
        "CREATE OR REPLACE FUNCTION get_employee_count RETURN NUMBER IS\n  v_count NUMBER;\nBEGIN\n  SELECT COUNT(*) INTO v_count FROM employees;\n  RETURN v_count;\nEND;"
      ],
      "built_in": ["DBMS_OUTPUT.PUT_LINE", "TO_DATE", "TO_CHAR"]
    },
    "syntax": {
      "comments": ["-- Single line comment", "/* Multi line */"],
      "conditions": ["IF...THEN...ELSIF...ELSE...END IF;"],
      "loops": ["LOOP...EXIT WHEN...END LOOP;", "FOR...LOOP...END LOOP;", "WHILE...LOOP...END LOOP;"],
      "operators": ["+", "-", "*", "/", "%", "=", "<>", ">", "<", ">=", "<="],
      "examples": [
        "IF v_salary > 60000 THEN DBMS_OUTPUT.PUT_LINE('High Salary'); END IF;",
        "FOR i IN 1..5 LOOP DBMS_OUTPUT.PUT_LINE('Loop: ' || i); END LOOP;"
      ]
    },
    "why_good": "ดีเยี่ยมสำหรับการจัดการและประมวลผลข้อมูลที่ซับซ้อนภายใน Oracle Database ช่วยเพิ่มประสิทธิภาพและลด Traffic ระหว่าง Client กับ Server"
  },
  {
    "id": 47,
    "name": "T-SQL",
    "slug": "tsql",
    "logo": "img/sqlserver.png",
    "desc": "T-SQL เป็นภาษา Extension ที่เพิ่มความสามารถเชิงโครงสร้าง (Procedural) ให้กับ SQL สำหรับ Microsoft SQL Server และ Azure SQL Database ใช้สำหรับสร้าง Stored Procedures, Functions, และ Triggers เพื่อขยายความสามารถของ SQL และประมวลผลข้อมูลที่ซับซ้อนบนฐานข้อมูลฝั่ง Server",
    "by": "Microsoft",
    "yr": "1980s",
    "level": "5",
    "par": ["Procedural", "Declarative (SQL embedded)"],
    "fields": ["Database / SQL", "Backend Development", "Enterprise Systems"],
    "rank": "35+ แข็งแกร่งใน Microsoft SQL Server Environment",
    "salary_range": "฿26,000-42,000 บาท/เดือน (Junior), ฿42,000-72,000 บาท/เดือน (Senior)",
    "salary": ["low", "mid", "high"],
    "pros": [
      "มีประสิทธิภาพในการประมวลผลข้อมูลขนาดใหญ่บน SQL Server",
      "ช่วยลด Network Traffic",
      "รองรับ Transaction Control ได้ดี",
      "เป็นส่วนสำคัญของ Microsoft SQL Server Ecosystem"
    ],
    "cons": [
      "เฉพาะสำหรับ Microsoft SQL Server",
      "การจัดการ Version Control อาจเป็นเรื่องท้าทาย",
      "ไวยากรณ์และแนวคิดแตกต่างจากภาษาโปรแกรมมิ่งทั่วไป"
    ],
    "frameworks": [],
    "learn": ["Microsoft T-SQL Documentation", "SQL Server Tutorials"],
    "variables": {
      "declaration": ["DECLARE @variable_name datatype;"],
      "types": ["VARCHAR", "NVARCHAR", "INT", "DECIMAL", "DATETIME", "BIT", "TABLE"],
      "examples": [
        "DECLARE @employeeName VARCHAR(100);",
        "DECLARE @salary DECIMAL(10, 2) = 55000.00;",
        "SELECT @employeeName = Name FROM Employees WHERE Id = 2;"
      ]
    },
    "functions": {
      "declaration": ["CREATE FUNCTION function_name (@params datatype) RETURNS datatype AS BEGIN ... END;"],
      "examples": [
        "CREATE FUNCTION dbo.GetTotalSales (@year INT) RETURNS DECIMAL(18,2) AS\nBEGIN\n  DECLARE @total DECIMAL(18,2);\n  SELECT @total = SUM(SalesAmount) FROM Sales WHERE YEAR(SaleDate) = @year;\n  RETURN @total;\nEND;"
      ],
      "built_in": ["PRINT", "GETDATE", "SUBSTRING", "SUM", "COUNT"]
    },
    "syntax": {
      "comments": ["-- Single line comment", "/* Multi line */"],
      "conditions": ["IF...BEGIN...END ELSE...BEGIN...END"],
      "loops": ["WHILE...BEGIN...END"],
      "operators": ["+", "-", "*", "/", "%", "=", "<>", ">", "<", ">=", "<="],
      "examples": [
        "IF @salary > 60000 BEGIN PRINT 'High Salary'; END ELSE BEGIN PRINT 'Standard Salary'; END;",
        "WHILE @counter <= 5 BEGIN PRINT 'Loop: ' + CAST(@counter AS VARCHAR); SET @counter = @counter + 1; END;"
      ]
    },
    "why_good": "ดีเยี่ยมสำหรับการจัดการและประมวลผลข้อมูลที่ซับซ้อนภายใน Microsoft SQL Server และ Azure SQL Database ช่วยเพิ่มประสิทธิภาพและควบคุม Transaction ได้ดี"
  },
  {
    "id": 48,
    "name": "Bun",
    "slug": "bun",
    "logo": "img/bun.png",
    "desc": "Bun คือ JavaScript Runtime แบบ All-in-one ที่สร้างขึ้นด้วยภาษา Zig ถูกออกแบบมาเพื่อความเร็วและประสิทธิภาพสูง มี Built-in Package Manager, Bundler และ Test Runner ทำให้เป็นเครื่องมือครบวงจรสำหรับ JavaScript/TypeScript Development.ดีเยี่ยมสำหรับ JavaScript/TypeScript Development ที่ต้องการความเร็วและประสิทธิภาพสูงสุด ลดความซับซ้อนด้วยการรวม Package Manager และ Bundler ไว้ในตัว ทำให้ Workflow การพัฒนา JavaScript ง่ายและรวดเร็วขึ้น",
    "by": "Jarred Sumner",
    "yr": "2022",
    "level": "N/A (เป็น JavaScript Runtime)",
    "par": ["N/A"],
    "type": "JavaScript Runtime",
    "fields": ["Web Backend", "Web Frontend", "Tooling", "DevOps / Automation", "Performance Optimization"],
    "rank": "เติบโตเร็วใน JavaScript Ecosystem (ทางเลือกของ Node.js)",
    "salary_range": "฿32,000-52,000 บาท/เดือน (Junior), ฿52,000-85,000 บาท/เดือน (Senior)",
    "salary": ["mid", "high"],
    "pros": [
      "ประสิทธิภาพสูงมาก (เร็วกว่า Node.js และ Deno)",
      "All-in-one Toolchain (มี Package Manager, Bundler, Test Runner ในตัว)",
      "รองรับ TypeScript และ JSX ได้ทันที",
      "ใช้งานง่ายและมี API ที่คุ้นเคย"
    ],
    "cons": [
      "ยังใหม่มากและอาจมี Bugs หรือ API ที่ยังไม่เสถียร",
      "Ecosystem และ Community ยังไม่ใหญ่เท่า Node.js",
      "บาง Library เก่าๆ อาจยังไม่รองรับเต็มที่"
    ],
    "frameworks": [],
    "learn": ["Bun Official Website", "Bun Documentation"],
    "commands": {
        "installation": [
            "curl -fsSL https://bun.sh/install | bash // ติดตั้ง Bun",
            "bun --version // ตรวจสอบเวอร์ชัน"
        ],
        "project_management": [
            "bun init // สร้างโปรเจค JavaScript/TypeScript ใหม่",
            "bun install // ติดตั้ง dependencies",
            "bun add <package> // เพิ่ม package",
            "bun remove <package> // ลบ package",
            "bun update // อัพเดท packages"
        ],
        "run_build": [
            "bun run <script> // รันสคริปต์จาก package.json",
            "bun <file.js> // รันไฟล์ JavaScript โดยตรง",
            "bun build <entry> --outdir <dir> // build โปรเจค",
            "bun test // รัน tests"
        ],
        "examples": [
            "// สร้างเซิร์ฟเวอร์ HTTP ง่ายๆ",
            "const server = Bun.serve({",
            "  port: 3000,",
            "  fetch(req) {",
            "    return new Response('Hello Bun!');",
            "  },",
            "});",
            "",
            "// อ่านไฟล์แบบ async",
            "const file = Bun.file('data.txt');",
            "const text = await file.text();"
        ]
    }
  },
  {
    "id": 49,
    "name": "Linux",
    "slug": "linux",
    "logo": "img/linux.png",
    "desc": "Linux คือ Kernel ของระบบปฏิบัติการ Open Source ที่เป็นรากฐานของ Distribution ต่างๆ เช่น Ubuntu, Fedora, Debian เป็นระบบปฏิบัติการที่ได้รับความนิยมอย่างสูงในงาน Server, Cloud Computing, Embedded Systems และ DevOps.",
    "by": "Linus Torvalds",
    "yr": "1991",
    "level": "N/A (เป็น OS Kernel)",
    "par": ["N/A"],
    "type": "Operating System (Kernel)",
    "fields": ["Operating Systems", "Server Management", "Cloud Infrastructure", "DevOps / Automation", "Embedded Systems", "Cybersecurity"],
    "rank": "ใช้โดย 55.6% ของนักพัฒนาทั่วโลก",
    "salary_range": "฿30,000-50,000 บาท/เดือน (Junior), ฿50,000-85,000 บาท/เดือน (Senior)",
    "salary": ["mid", "high"],
    "pros": [
      "เสถียรภาพและความน่าเชื่อถือสูง",
      "Open Source และปรับแต่งได้สูง",
      "ระบบความปลอดภัยแข็งแกร่ง",
      "มีเครื่องมือ Command Line ที่ทรงพลังและยืดหยุ่น",
      "ใช้กันอย่างแพร่หลายใน Server และ Cloud"
    ],
    "cons": [
      "สำหรับผู้ใช้งานทั่วไปอาจมี Learning Curve สูงกว่า Windows/macOS",
      "การรองรับ Hardware Driver บางตัวอาจจำกัด",
      "ซอฟต์แวร์ Desktop บางตัวอาจไม่รองรับ"
    ],
    "frameworks": [],
    "learn": ["Linux Foundation", "Linux Journey", "Ubuntu Documentation"],
    "commands": {
        "file_operations": [
            "ls -la // แสดงรายการไฟล์และโฟลเดอร์",
            "cd /path/to/directory // เปลี่ยนไดเรกทอรี",
            "cp file1 file2 // คัดลอกไฟล์",
            "mv file1 file2 // ย้าย/เปลี่ยนชื่อไฟล์",
            "rm file // ลบไฟล์",
            "mkdir directory // สร้างโฟลเดอร์",
            "rmdir directory // ลบโฟลเดอร์ว่าง"
        ],
        "system_info": [
            "ps aux // แสดงกระบวนการที่ทำงาน",
            "top // แสดงการใช้ CPU และ Memory",
            "df -h // แสดงพื้นที่ฮาร์ดดิสก์",
            "free -h // แสดงการใช้ RAM",
            "uname -a // แสดงข้อมูลระบบ"
        ],
        "network": [
            "ping google.com // ทดสอบการเชื่อมต่อ",
            "wget https://example.com/file // ดาวน์โหลดไฟล์",
            "curl https://api.example.com // ส่ง HTTP request",
            "netstat -tuln // แสดงพอร์ตที่เปิดใช้งาน"
        ],
        "package_management": [
            "apt update && apt upgrade // อัพเดท Ubuntu/Debian",
            "yum update // อัพเดท CentOS/RHEL",
            "apt install package-name // ติดตั้ง software",
            "systemctl start service // เริ่มบริการ",
            "systemctl enable service // เปิดใช้บริการตอน boot"
        ]
    }
  },
  {
    "id": 50,
    "name": "npm",
    "slug": "npm",
    "logo": "img/npm.png",
    "desc": "npm คือ Package Manager มาตรฐานสำหรับ Node.js และเป็น Registry ที่ใหญ่ที่สุดในโลกสำหรับ JavaScript Packages ใช้สำหรับติดตั้ง, จัดการ และเผยแพร่ Library และ Tools ต่างๆ ในโครงการ JavaScript/Node.js.",
    "by": "Isaac Schlueter",
    "yr": "2010",
    "level": "N/A (เป็น Package Manager)",
    "par": ["N/A"],
    "type": "Package Manager",
    "fields": ["JavaScript Development", "Node.js Development", "Web Frontend", "Web Backend", "Tooling"],
    "rank": "ใช้โดย 67.0% ของนักพัฒนา JavaScript",
    "salary_range": "฿28,000-45,000 บาท/เดือน (Junior), ฿45,000-75,000 บาท/เดือน (Senior)",
    "salary": ["low", "mid", "high"],
    "pros": [
      "เป็นมาตรฐานสำหรับ JavaScript Package Management",
      "มี Library และ Tools ให้เลือกใช้มากมายมหาศาล",
      "จัดจัดการ Dependency ได้อย่างมีประสิทธิภาพ",
      "มี Community ขนาดใหญ่และ Active"
    ],
    "cons": [
      "`node_modules` โฟลเดอร์อาจมีขนาดใหญ่มาก",
      "บางครั้งอาจมีปัญหาเรื่อง Dependency Hell",
      "อาจมีช่องโหว่ด้านความปลอดภัยใน Packages ที่ไม่ได้รับการดูแล"
    ],
    "frameworks": [],
    "learn": ["npm Docs", "Node.js Documentation"],
    "commands": {
        "installation": [
            "npm install // ติดตั้ง dependencies ทั้งหมด",
            "npm install <package> // ติดตั้ง package",
            "npm install <package> -g // ติดตั้ง package แบบ global",
            "npm install <package> --save-dev // ติดตั้งเป็น devDependency"
        ],
        "project_management": [
            "npm init // สร้าง package.json ใหม่",
            "npm init -y // สร้าง package.json แบบเร็ว",
            "npm uninstall <package> // ถอนการติดตั้ง package",
            "npm update // อัพเดท packages",
            "npm outdated // ตรวจสอบ packages ที่ล้าสมัย"
        ],
        "scripts": [
            "npm run <script> // รัน script จาก package.json",
            "npm start // รัน start script",
            "npm test // รัน test script",
            "npm run build // รัน build script"
        ],
        "info": [
            "npm list // แสดง packages ที่ติดตั้ง",
            "npm search <package> // ค้นหา package",
            "npm info <package> // ดูข้อมูล package",
            "npm audit // ตรวจสอบ security vulnerabilities"
        ]
    }
  },
  {
    "id": 51,
    "name": "Git",
    "slug": "git",
    "logo": "img/git.png",
    "desc": "Git คือ Distributed Version Control System (DVCS) ที่ใช้สำหรับติดตามการเปลี่ยนแปลงของโค้ดในโครงการซอฟต์แวร์ ช่วยให้ทีมพัฒนาสามารถทำงานร่วมกันได้อย่างมีประสิทธิภาพ, จัดการเวอร์ชันของโค้ด, และย้อนกลับไปยังสถานะก่อนหน้าได้ง่าย.",
    "by": "Linus Torvalds",
    "yr": "2005",
    "level": "N/A (เป็น Version Control System)",
    "par": ["N/A"],
    "type": "Version Control System",
    "fields": ["Software Development", "Collaboration", "DevOps / Automation", "Source Code Management"],
    "rank": "ใช้โดย 87.2% ของนักพัฒนาทั่วโลก",
    "salary_range": "฿28,000-48,000 บาท/เดือน (Junior), ฿48,000-78,000 บาท/เดือน (Senior)",
    "salary": ["low", "mid", "high"],
    "pros": [
      "กระจายศูนย์ (Decentralized) ทำให้ทำงานแบบ Offline ได้",
      "ประสิทธิภาพสูงและรวดเร็ว",
      "จัดการ Branching และ Merging ได้ดีเยี่ยม",
      "เป็นมาตรฐานอุตสาหกรรมและมี Community ขนาดใหญ่"
    ],
    "cons": [
      "Learning Curve อาจสูงสำหรับผู้เริ่มต้น",
      "การจัดการ Conflict ที่ซับซ้อนอาจท้าทาย",
      "GUI Tools บางตัวอาจยังไม่สมบูรณ์"
    ],
    "frameworks": [],
    "learn": ["Git Official Documentation", "Pro Git Book", "GitHub Guides"],
    "commands": {
        "basic": [
            "git init // เริ่มต้น repository ใหม่",
            "git clone <url> // ดาวน์โหลด repository",
            "git status // ดูสถานะไฟล์",
            "git add <file> // เพิ่มไฟล์เข้า staging area",
            "git add . // เพิ่มไฟล์ทั้งหมด",
            "git commit -m 'message' // บันทึกการเปลี่ยนแปลง"
        ],
        "branching": [
            "git branch // ดู branch ทั้งหมด",
            "git branch <name> // สร้าง branch ใหม่",
            "git checkout <branch> // เปลี่ยน branch",
            "git checkout -b <branch> // สร้างและเปลี่ยนไป branch ใหม่",
            "git merge <branch> // รวม branch",
            "git branch -d <branch> // ลบ branch"
        ],
        "remote": [
            "git remote add origin <url> // เพิ่ม remote repository",
            "git push origin <branch> // อัพโหลดไป remote",
            "git pull origin <branch> // ดาวน์โหลดจาก remote",
            "git fetch // ดึงข้อมูลจาก remote โดยไม่ merge"
        ],
        "history": [
            "git log // ดูประวัติ commit",
            "git log --oneline // ดูประวัติแบบย่อ",
            "git diff // ดูการเปลี่ยนแปลงไฟล์",
            "git reset --hard <commit> // ย้อนกลับไปยัง commit"
        ]
    }
  },
  {
    "id": 52,
    "name": "Docker",
    "slug": "docker",
    "logo": "img/docker.png",
    "desc": "Docker คือแพลตฟอร์มสำหรับการพัฒนา, Deploy และ Run แอปพลิเคชันโดยใช้ Container ทำให้แอปพลิเคชันและ Dependency ทั้งหมดถูกบรรจุอยู่ในสภาพแวดล้อมที่แยกจากกันและพกพาได้ ช่วยให้มั่นใจว่าแอปพลิเคชันจะทำงานเหมือนกันในทุกสภาพแวดล้อม.",
    "by": "Docker, Inc.",
    "yr": "2013",
    "level": "N/A (เป็น Containerization Platform)",
    "par": ["N/A"],
    "type": "Containerization Platform",
    "fields": ["DevOps / Automation", "Cloud Infrastructure", "Deployment", "Microservices", "Application Packaging"],
    "rank": "ใช้โดย 48.7% ของนักพัฒนาใน DevOps",
    "salary_range": "฿35,000-55,000 บาท/เดือน (Junior), ฿55,000-92,000 บาท/เดือน (Senior)",
    "salary": ["mid", "high"],
    "pros": [
      "Portable: แอปพลิเคชันทำงานเหมือนกันในทุกสภาพแวดล้อม",
      "Lightweight: Container ใช้ทรัพยากรน้อยกว่า Virtual Machine",
      "Scalable: ง่ายต่อการ Deploy และ Scale แอปพลิเคชัน",
      "รันแอปพลิเคชันได้โดยไม่มี Dependency Conflicts"
    ],
    "cons": [
      "Learning Curve สำหรับแนวคิด Containerization",
      "การจัดการ Persistent Data อาจซับซ้อน",
      "ไม่เหมาะกับการรัน VM ขนาดใหญ่"
    ],
    "frameworks": [],
    "learn": ["Docker Official Documentation", "Play with Docker"],
    "commands": {
        "images": [
            "docker pull <image> // ดาวน์โหลด image",
            "docker images // ดูรายการ images",
            "docker build -t <name> . // สร้าง image จาก Dockerfile",
            "docker rmi <image> // ลบ image",
            "docker tag <image> <new-name> // เปลี่ยนชื่อ image"
        ],
        "containers": [
            "docker run <image> // สร้างและรัน container",
            "docker run -d <image> // รัน container แบบ background",
            "docker run -p 8080:80 <image> // map port",
            "docker ps // ดู container ที่ทำงาน",
            "docker ps -a // ดู container ทั้งหมด",
            "docker stop <container> // หยุด container",
            "docker rm <container> // ลบ container"
        ],
        "management": [
            "docker exec -it <container> bash // เข้าไปใน container",
            "docker logs <container> // ดู logs",
            "docker cp <file> <container>:/path // คัดลอกไฟล์",
            "docker volume create <volume> // สร้าง volume",
            "docker network create <network> // สร้าง network"
        ],
        "compose": [
            "docker-compose up // รัน services จาก docker-compose.yml",
            "docker-compose up -d // รัน services แบบ background",
            "docker-compose down // หยุด services",
            "docker-compose logs // ดู logs ของ services"
        ]
    }
  },
  {
    "id": 53,
    "name": "Kubernetes (K8s)",
    "slug": "kubernetes",
    "logo": "img/kubernetes.png",
    "desc": "Kubernetes เป็น Open-source Container Orchestration System ที่พัฒนาโดย Google ใช้สำหรับ Automate การ Deploy, Scaling และ Management ของ Containerized Applications ช่วยให้การจัดการ Microservices และ Workloads ขนาดใหญ่บน Cloud มีประสิทธิภาพ.",
    "by": "Google",
    "yr": "2014",
    "level": "N/A (เป็น Container Orchestration System)",
    "par": ["N/A"],
    "type": "Container Orchestration System",
    "fields": ["Cloud Infrastructure", "DevOps / Automation", "Microservices", "Deployment", "Scalability"],
    "rank": "ใช้โดย 28.7% ของนักพัฒนาใน Container Orchestration",
    "salary_range": "฿40,000-65,000 บาท/เดือน (Junior), ฿65,000-115,000 บาท/เดือน (Senior)",
    "salary": ["mid", "high", "veryhigh"],
    "pros": [
      "Automate การ Deploy และ Scaling แอปพลิเคชัน",
      "จัดการ Self-healing และ Load Balancing",
      "รองรับ Workloads ขนาดใหญ่และซับซ้อน",
      "เป็นมาตรฐานอุตสาหกรรมและมี Community ขนาดใหญ่"
    ],
    "cons": [
      "Learning Curve สูงมากและซับซ้อนในการตั้งค่า",
      "ต้องใช้ทรัพยากรมาก (Overhead) สำหรับ Cluster ขนาดเล็ก",
      "ต้องมีความรู้ด้าน Networking และ System Administration สูง"
    ],
    "frameworks": [],
    "learn": ["Kubernetes Official Documentation", "Certified Kubernetes Administrator (CKA)"],
    "commands": {
        "cluster": [
            "kubectl cluster-info // ดูข้อมูล cluster",
            "kubectl get nodes // ดู nodes ใน cluster",
            "kubectl describe node <node> // ดูรายละเอียด node",
            "kubectl top nodes // ดูการใช้ทรัพยากรของ nodes"
        ],
        "pods": [
            "kubectl get pods // ดู pods ทั้งหมด",
            "kubectl get pods -o wide // ดู pods พร้อมข้อมูลเพิ่มเติม",
            "kubectl describe pod <pod> // ดูรายละเอียด pod",
            "kubectl logs <pod> // ดู logs ของ pod",
            "kubectl exec -it <pod> -- bash // เข้าไปใน pod"
        ],
        "deployments": [
            "kubectl create deployment <name> --image=<image> // สร้าง deployment",
            "kubectl get deployments // ดู deployments",
            "kubectl scale deployment <name> --replicas=3 // เพิ่ม replicas",
            "kubectl rollout status deployment/<name> // ดูสถานะ rollout",
            "kubectl delete deployment <name> // ลบ deployment"
        ],
        "services": [
            "kubectl get services // ดู services",
            "kubectl expose deployment <name> --port=80 // สร้าง service",
            "kubectl port-forward service/<name> 8080:80 // forward port",
            "kubectl describe service <name> // ดูรายละเอียด service"
        ],
        "config": [
            "kubectl apply -f <file.yaml> // apply configuration",
            "kubectl get configmaps // ดู config maps",
            "kubectl get secrets // ดู secrets",
            "kubectl create configmap <name> --from-file=<file> // สร้าง config map"
        ]
    }
  },
  {
    "id": 54,
    "name": "Flutter",
    "slug": "flutter",
    "logo": "img/flutter.png",
    "desc": "Flutter คือ UI Toolkit แบบ Open Source ที่พัฒนาโดย Google สำหรับการสร้าง Native-like Applications สำหรับ Mobile (iOS, Android), Web, Desktop (Windows, macOS, Linux) และ Embedded Devices จาก Single Codebase ด้วยภาษา Dart ทำให้การพัฒนาแอปพลิเคชันข้ามแพลตฟอร์มรวดเร็วและมีประสิทธิภาพ",
    "by": "Google",
    "yr": "2017",
    "level": "4",
    "par": ["Declarative UI", "Reactive Programming"],
    "type": "Cross-Platform UI Toolkit",
    "fields": ["Mobile Development", "Web Development", "Desktop Development", "UI/UX Development", "Cross-Platform Development"],
    "rank": "#3 Cross-platform Framework (ใช้โดย 9.1% ของนักพัฒนา Mobile)",
    "salary_range": "฿32,000-52,000 บาท/เดือน (Junior), ฿52,000-88,000 บาท/เดือน (Senior)",
    "salary": ["mid", "high"],
    "pros": [
      "Cross-Platform: เขียนโค้ดครั้งเดียว รันได้หลายแพลตฟอร์ม (Mobile, Web, Desktop)",
      "Hot Reload & Hot Restart: ช่วยให้พัฒนาได้รวดเร็ว เห็นการเปลี่ยนแปลงทันที",
      "Performance: แอปพลิเคชันมีประสิทธิภาพใกล้เคียง Native",
      "Rich Widgets: มี Widget ที่สวยงามและปรับแต่งได้หลากหลาย",
      "Growing Community: ชุมชนที่เติบโตและให้การสนับสนุนดี"
    ],
    "cons": [
      "ขนาดไฟล์แอปพลิเคชันอาจใหญ่กว่า Native เล็กน้อย",
      "Learning Curve สำหรับภาษา Dart (ถ้าไม่คุ้นเคย)",
      "ยังไม่เหมาะกับทุก Use Case ที่ต้องการเข้าถึง Native Feature ที่ลึกซึ้งมากๆ",
      "Ecosystem บางส่วนยังไม่สมบูรณ์เท่า Native"
    ],
    "frameworks": [],
    "learn": ["Flutter Official Website", "Flutter Docs", "Codecademy Flutter"],
    "commands": {
      "cluster": [
        "kubectl cluster-info // ดูข้อมูล cluster",
        "kubectl get nodes // ดู nodes ใน cluster",
        "kubectl describe node <node> // ดูรายละเอียด node",
        "kubectl top nodes // ดูการใช้ทรัพยากรของ nodes"
      ],
      "pods": [
        "kubectl get pods // ดู pods ทั้งหมด",
        "kubectl get pods -o wide // ดู pods พร้อมข้อมูลเพิ่มเติม",
        "kubectl describe pod <pod> // ดูรายละเอียด pod",
        "kubectl logs <pod> // ดู logs ของ pod",
        "kubectl exec -it <pod> -- bash // เข้าไปใน pod"
      ],
      "deployments": [
        "kubectl create deployment <name> --image=<image> // สร้าง deployment",
        "kubectl get deployments // ดู deployments",
        "kubectl scale deployment <name> --replicas=3 // เพิ่ม replicas",
        "kubectl rollout status deployment/<name> // ดูสถานะ rollout",
        "kubectl delete deployment <name> // ลบ deployment"
      ],
      "services": [
        "kubectl get services // ดู services",
        "kubectl expose deployment <name> --port=80 // สร้าง service",
        "kubectl port-forward service/<name> 8080:80 // forward port",
        "kubectl describe service <name> // ดูรายละเอียด service"
      ],
      "config": [
        "kubectl apply -f <file.yaml> // apply configuration",
        "kubectl get configmaps // ดู config maps",
        "kubectl get secrets // ดู secrets",
        "kubectl create configmap <name> --from-file=<file> // สร้าง config map"
      ]
    }
  }
] 