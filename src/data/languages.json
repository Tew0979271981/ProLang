[
  {
    "id": 1,
    "name": "C",
    "slug": "c",
    "desc": "ภาษาระดับต่ำที่มีประสิทธิภาพสูง เหมาะสำหรับการพัฒนาระบบ ปรับแต่งหน่วยความจำ และใช้ในระบบปฏิบัติการหรือ embedded systems",
    "by": "Dennis Ritchie",
    "yr": "1972",
    "level": "5",
    "language_type": "1",
    "par": ["Procedural"],
    "cateid": [2],
    "logo": "/img/c.png",
    "uses": ["ระบบปฏิบัติการ", "Embedded systems", "Compiler", "Firmware", "Driver"],
    "pros": [
      "ประสิทธิภาพสูงมาก",
      "ควบคุมการจัดการหน่วยความจำได้ละเอียด",
      "พื้นฐานของภาษาอื่น ๆ เช่น C++, Objective-C",
      "คอมไพล์ข้ามแพลตฟอร์มได้"
    ],
    "cons": [
      "ไม่มี Garbage Collection",
      "เขียนโค้ดยากและต้องจัดการ Memory เอง",
      "เสี่ยงต่อ Buffer Overflow และ Security Issues",
      "ไม่รองรับแนวคิด OOP โดยตรง"
    ],
    "variables": {
      "declaration": [
        "int => ใช้ประกาศตัวแปรชนิดเลขจำนวนเต็ม",
        "float => ใช้ประกาศตัวแปรชนิดเลขทศนิยมความแม่นยำต่ำ",
        "char => ใช้ประกาศตัวแปรชนิดอักขระ",
        "double => ใช้ประกาศตัวแปรชนิดเลขทศนิยมความแม่นยำสูง"
      ],
      "types": [
        "int => เลขจำนวนเต็ม",
        "float => เลขทศนิยม (single precision)",
        "char => อักขระเดี่ยว",
        "double => เลขทศนิยม (double precision)",
        "void => ไม่มีประเภท, ใช้กับฟังก์ชันที่ไม่คืนค่าหรือพอยน์เตอร์ทั่วไป",
        "struct => โครงสร้างข้อมูลที่เก็บตัวแปรหลายประเภทเข้าด้วยกัน",
        "pointer => ตัวแปรที่เก็บที่อยู่หน่วยความจำของตัวแปรอื่น"
      ],
      "examples": [
        "int age = 25; => ประกาศตัวแปร age เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 25",
        "float weight = 60.5; => ประกาศตัวแปร weight เป็นเลขทศนิยมและกำหนดค่าเป็น 60.5",
        "char initial = 'A'; => ประกาศตัวแปร initial เป็นอักขระและกำหนดค่าเป็น 'A'",
        "int numbers[3] = {1, 2, 3}; => ประกาศ array ชื่อ numbers ขนาด 3 ช่อง เก็บเลขจำนวนเต็มและกำหนดค่าเริ่มต้น"
      ]
    },
    "functions": {
      "declaration": [
        "return_type function_name(params) => รูปแบบการประกาศฟังก์ชัน, ระบุชนิดข้อมูลที่ส่งคืน ชื่อฟังก์ชัน และพารามิเตอร์"
      ],
      "examples": [
        "int add(int a, int b) { return a + b; } => ฟังก์ชันชื่อ add รับเลขจำนวนเต็มสองตัวแล้วคืนค่าผลรวมเป็นเลขจำนวนเต็ม",
        "void greet() { printf(\"Hello\\n\"); } => ฟังก์ชันชื่อ greet ที่ไม่รับพารามิเตอร์และไม่คืนค่า ทำหน้าที่แสดงข้อความ \"Hello\""
      ],
      "built_in": [
        "printf() => ใช้สำหรับแสดงผลข้อมูลออกทางหน้าจอ",
        "scanf() => ใช้สำหรับรับข้อมูลจากผู้ใช้",
        "strlen() => ใช้สำหรับหาความยาวของสตริง",
        "strcpy() => ใช้สำหรับคัดลอกสตริง",
        "malloc() => ใช้สำหรับจัดสรรหน่วยความจำแบบไดนามิก",
        "free() => ใช้สำหรับคืนหน่วยความจำที่จัดสรรไว้"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "if...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าไม่จริงทำอีกชุดคำสั่งหนึ่ง",
        "switch => คำสั่งเลือกทำตามค่าของตัวแปร"
      ],
      "loops": [
        "for => ลูปสำหรับทำซ้ำตามจำนวนรอบที่กำหนด",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "do...while => ลูปสำหรับทำซ้ำอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ",
        "!= => ไม่เท่ากับ",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "! => ไม่ (NOT)"
      ],
      "examples": [
        "if (x > 0) { printf(\"Positive\"); } => ถ้า x มากกว่า 0 ให้แสดงคำว่า \"Positive\"",
        "for (int i = 0; i < 5; i++) { printf(\"%d\", i); } => ลูปที่แสดงตัวเลข 0 ถึง 4"
      ]
    },
    "frameworks": [],
    "learning_resources": ["Learn-C.org", "GeeksforGeeks", "C Programming Language (K&R)"],
    "popularity_rank": 6,
    "salary_range": "35,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 2,
    "name": "C++",
    "slug": "cpp",
    "desc": "ภาษาโปรแกรมมิ่งที่มีประสิทธิภาพสูง เหมาะสำหรับระบบที่ต้องการการควบคุมหน่วยความจำและความเร็วในการประมวลผล",
    "by": "Bjarne Stroustrup",
    "yr": "1985",
    "level": "2",
    "par": ["Object-oriented", "Generic", "Imperative"],
    "cateid": [4, 6],
    "logo": "/img/c-plus.png",
    "uses": ["Operating Systems", "Games", "Embedded Systems", "Performance-critical Apps", "Compilers"],
    "pros": [
      "Performance สูงมาก - ใกล้เคียง machine code",
      "Manual memory management - ควบคุมได้ทุกอย่าง",
      "รองรับ multiple programming paradigms",
      "Standard Template Library (STL) ที่ powerful",
      "Cross-platform development",
      "Used in system programming",
      "Large codebase compatibility"
    ],
    "cons": [
      "Complex syntax และ steep learning curve",
      "Manual memory management ทำให้เกิด bugs ง่าย",
      "Compilation time ช้า",
      "ไม่มี built-in garbage collection",
      "Platform-specific code บางส่วน",
      "Debugging ยาก"
    ],
    "variables": {
      "declaration": [
        "Strong typing with explicit declaration => การประกาศตัวแปรต้องระบุชนิดข้อมูลอย่างชัดเจน"
      ],
      "types": [
        "int => เลขจำนวนเต็ม",
        "double => เลขทศนิยมความแม่นยำสูง",
        "float => เลขทศนิยมความแม่นยำต่ำ",
        "char => อักขระเดี่ยว",
        "bool => ค่าความจริง (true/false)",
        "string => ลำดับของอักขระ",
        "vector => dynamic array (อาร์เรย์ที่สามารถปรับขนาดได้)",
        "array => อาร์เรย์ขนาดคงที่"
      ],
      "examples": [
        "int age = 25; => ประกาศตัวแปร age เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 25",
        "double pi = 3.14159; => ประกาศตัวแปร pi เป็นเลขทศนิยมความแม่นยำสูงและกำหนดค่าเป็น 3.14159",
        "char grade = 'A'; => ประกาศตัวแปร grade เป็นอักขระและกำหนดค่าเป็น 'A'",
        "bool isActive = true; => ประกาศตัวแปร isActive เป็นค่าความจริงและกำหนดค่าเป็น true",
        "string name = \"Alice\"; => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น \"Alice\"",
        "vector<int> numbers = {1, 2, 3, 4, 5}; => ประกาศ vector ของเลขจำนวนเต็มและกำหนดค่าเริ่มต้น",
        "int arr[5] = {1, 2, 3, 4, 5}; => ประกาศ array ขนาด 5 ช่อง เก็บเลขจำนวนเต็มและกำหนดค่าเริ่มต้น"
      ]
    },
    "functions": {
      "declaration": [
        "Function prototypes and definitions => การประกาศต้นแบบฟังก์ชันและการนิยามฟังก์ชัน"
      ],
      "examples": [
        "int add(int a, int b) { return a + b; } => ฟังก์ชันชื่อ add รับเลขจำนวนเต็มสองตัวแล้วคืนค่าผลรวมเป็นเลขจำนวนเต็ม",
        "void printHello() { cout << \"Hello\"; } => ฟังก์ชันชื่อ printHello ที่ไม่รับพารามิเตอร์และไม่คืนค่า ทำหน้าที่แสดงข้อความ \"Hello\"",
        "double calculateArea(double radius); => ต้นแบบฟังก์ชัน calculateArea รับเลขทศนิยมความแม่นยำสูงและคืนค่าเป็นเลขทศนิยมความแม่นยำสูง",
        "template<typename T> T maximum(T a, T b) { return (a > b) ? a : b; } => ฟังก์ชัน template ชื่อ maximum รับตัวแปรสองตัวที่เป็นชนิดเดียวกันแล้วคืนค่าตัวที่มากที่สุด"
      ],
      "built_in": [
        "cout => ใช้สำหรับแสดงผลข้อมูลออกทาง console",
        "cin => ใช้สำหรับรับข้อมูลจาก console",
        "printf() => ใช้สำหรับแสดงผลข้อมูลออกทางหน้าจอ (จาก C)",
        "scanf() => ใช้สำหรับรับข้อมูลจากผู้ใช้ (จาก C)",
        "strlen() => ใช้สำหรับหาความยาวของสตริง (จาก C)",
        "sizeof() => ใช้สำหรับหาขนาดของตัวแปรหรือชนิดข้อมูลในหน่วยความจำ"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "if...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าไม่จริงทำอีกชุดคำสั่งหนึ่ง",
        "switch => คำสั่งเลือกทำตามค่าของตัวแปร"
      ],
      "loops": [
        "for => ลูปสำหรับทำซ้ำตามจำนวนรอบที่กำหนด",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "do-while => ลูปสำหรับทำซ้ำอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข",
        "range-based for => ลูปสำหรับวนซ้ำผ่านองค์ประกอบของคอลเลกชัน (เช่น array, vector)"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ",
        "!= => ไม่เท่ากับ",
        "< => น้อยกว่า",
        "> => มากกว่า",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "! => ไม่ (NOT)",
        "++ => เพิ่มค่าขึ้น 1",
        "-- => ลดค่าลง 1"
      ],
      "examples": [
        "if (age >= 18) { cout << \"Adult\"; } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า \"Adult\"",
        "for (int i = 0; i < 10; i++) { cout << i; } => ลูปที่แสดงตัวเลข 0 ถึง 9",
        "for (auto& element : container) { cout << element; } => ลูปสำหรับวนแสดงแต่ละ element ใน container"
      ]
    },
    "frameworks": ["Qt", "Boost", "OpenCV", "Unreal Engine", "POCO", "Conan"],
    "learning_resources": ["C++ Primer", "Effective C++", "cppreference.com", "The C++ Programming Language"],
    "popularity_rank": 4,
    "salary_range": "55,000 - 160,000 บาท/เดือน"
  },
  {
    "id": 3,
    "name": "C#",
    "slug": "csharp",
    "desc": "ภาษาแบบ Object-oriented จาก Microsoft ที่ใช้พัฒนาแอปพลิเคชันบน Windows, Web และ Game Development ด้วย Unity",
    "by": "Microsoft (Anders Hejlsberg)",
    "yr": "2000",
    "level": "4",
    "par": ["Object-oriented", "Event-driven"],
    "cateid": [1, 3],
    "logo": "/img/c-sharp.png",
    "uses": ["Desktop App", "Web App (.NET)", "เกม (Unity)", "Mobile App (Xamarin)"],
    "pros": [
      "เป็นภาษาที่มีโครงสร้างดี เข้าใจง่าย",
      "มีเครื่องมือสนับสนุนจาก Microsoft (.NET)",
      "ใช้ได้กับทั้ง Desktop และ Web",
      "เหมาะกับการพัฒนาเกม (Unity)"
    ],
    "cons": [
      "ผูกกับแพลตฟอร์ม Microsoft เดิม",
      "ขนาดไฟล์ใหญ่เมื่อ Build",
      "มีการจัดการหน่วยความจำแบบอัตโนมัติ อาจช้ากว่าภาษาอื่น"
    ],
    "variables": {
      "declaration": [
        "int => ใช้ประกาศตัวแปรชนิดเลขจำนวนเต็ม",
        "string => ใช้ประกาศตัวแปรชนิดข้อความ",
        "bool => ใช้ประกาศตัวแปรชนิดค่าความจริง",
        "var => ใช้ประกาศตัวแปรที่คอมไพเลอร์จะอนุมานชนิดข้อมูลเอง"
      ],
      "types": [
        "int => เลขจำนวนเต็ม",
        "string => ข้อความ",
        "bool => ค่าความจริง (true/false)",
        "float => เลขทศนิยม (single precision)",
        "double => เลขทศนิยม (double precision)",
        "object => ชนิดข้อมูลพื้นฐานที่ทุกชนิดข้อมูลอื่นสืบทอดมา",
        "List<T> => คอลเลกชันของรายการที่มีชนิดข้อมูล T"
      ],
      "examples": [
        "int age = 30; => ประกาศตัวแปร age เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 30",
        "string name = \"John\"; => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น \"John\"",
        "bool isActive = true; => ประกาศตัวแปร isActive เป็นค่าความจริงและกำหนดค่าเป็น true",
        "var score = 95; => ประกาศตัวแปร score และคอมไพเลอร์จะอนุมานว่าเป็น int"
      ]
    },
    "functions": {
      "declaration": [
        "returnType FunctionName(params) => รูปแบบการประกาศฟังก์ชัน, ระบุชนิดข้อมูลที่ส่งคืน ชื่อฟังก์ชัน และพารามิเตอร์"
      ],
      "examples": [
        "int Add(int a, int b) { return a + b; } => ฟังก์ชันชื่อ Add รับเลขจำนวนเต็มสองตัวแล้วคืนค่าผลรวมเป็นเลขจำนวนเต็ม",
        "void SayHello() { Console.WriteLine(\"Hello\"); } => ฟังก์ชันชื่อ SayHello ที่ไม่รับพารามิเตอร์และไม่คืนค่า ทำหน้าที่แสดงข้อความ \"Hello\"",
        "async Task FetchData() { await api.Get(); } => ฟังก์ชันแบบ Asynchronous ชื่อ FetchData ที่คืนค่าเป็น Task ทำหน้าที่เรียกข้อมูลจาก API"
      ],
      "built_in": [
        "Console.WriteLine() => ใช้สำหรับแสดงผลข้อมูลออกทาง console",
        "Math.Abs() => ใช้สำหรับหาค่าสัมบูรณ์ของตัวเลข",
        "string.Length => property สำหรับหาความยาวของสตริง",
        "List.Add() => เมธอดสำหรับเพิ่มรายการใน List",
        "DateTime.Now => property สำหรับรับค่าวันที่และเวลาปัจจุบัน"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด",
        "/// XML Comments => คอมเมนต์สำหรับสร้างเอกสาร XML"
      ],
      "conditions": [
        "if...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าไม่จริงทำอีกชุดคำสั่งหนึ่ง",
        "switch => คำสั่งเลือกทำตามค่าของตัวแปร"
      ],
      "loops": [
        "for => ลูปสำหรับทำซ้ำตามจำนวนรอบที่กำหนด",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "foreach => ลูปสำหรับวนซ้ำผ่านองค์ประกอบของคอลเลกชัน",
        "do...while => ลูปสำหรับทำซ้ำอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ",
        "!= => ไม่เท่ากับ",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "?? => Null-coalescing operator, ถ้า operand ซ้ายเป็น null จะคืนค่า operand ขวา",
        "! => ไม่ (NOT)"
      ],
      "examples": [
        "if (score > 80) { Console.WriteLine(\"Good\"); } => ถ้า score มากกว่า 80 ให้แสดงคำว่า \"Good\"",
        "foreach (var item in list) { Console.WriteLine(item); } => ลูปที่วนแสดงแต่ละ item ใน list"
      ]
    },
    "frameworks": [".NET", "ASP.NET", "Unity", "Xamarin", "Blazor"],
    "learning_resources": ["Microsoft Learn", "C# Programming Yellow Book", "Dotnet.microsoft.com"],
    "popularity_rank": 5,
    "salary_range": "40,000 - 110,000 บาท/เดือน"
  },
  {
    "id": 4,
    "name": "JavaScript",
    "slug": "javascript",
    "desc": "ภาษาโปรแกรมมิ่งที่ใช้กันอย่างแพร่หลายในการพัฒนาเว็บ ทั้งฝั่ง Frontend และ Backend สามารถสร้างเว็บไซต์แบบ Interactive และแอปพลิเคชันที่ซับซ้อนได้",
    "by": "Brendan Eich",
    "yr": "1995",
    "level": "4",
    "par": ["Object-oriented", "Functional", "Event-driven"],
    "cateid": [1],
    "logo": "/img/js.gif",
    "uses": ["เว็บไซต์", "เว็บแอป", "Server (Node.js)", "แอปมือถือ", "Desktop Apps"],
    "pros": [
      "ไม่ต้องคอมไพล์ รันได้ทันที",
      "มี Library และ Framework เยอะมาก",
      "ใช้ได้ทั้ง Frontend และ Backend",
      "Community ใหญ่และใช้งานง่าย",
      "รองรับ Asynchronous Programming",
      "Cross-platform development",
      "การพัฒนาเร็ว (Rapid Development)"
    ],
    "cons": [
      "Dynamic Typing ทำให้เกิด Runtime Error ได้ง่าย",
      "Performance ไม่ดีเท่าภาษาที่คอมไพล์",
      "Browser compatibility issues",
      "Callback Hell ในการเขียน Async Code",
      "Security vulnerabilities ในฝั่ง client",
      "Memory leaks ใน long-running applications"
    ],
    "variables": {
      "declaration": [
        "var => ใช้ประกาศตัวแปรแบบเก่า (function-scoped)",
        "let => ใช้ประกาศตัวแปรแบบ block-scoped (แนะนำ)",
        "const => ใช้ประกาศตัวแปรแบบ block-scoped ที่ไม่สามารถเปลี่ยนแปลงค่าได้ (ค่าคงที่)"
      ],
      "types": [
        "Number => ตัวเลข (ทั้งจำนวนเต็มและทศนิยม)",
        "String => ข้อความ",
        "Boolean => ค่าความจริง (true/false)",
        "Object => วัตถุ, คู่ของ key-value",
        "Array => คอลเลกชันของรายการ",
        "Function => ฟังก์ชัน",
        "undefined => ค่าของตัวแปรที่ยังไม่ได้กำหนดค่า",
        "null => การไม่มีอยู่ของวัตถุหรือค่าใดๆ"
      ],
      "examples": [
        "let name = 'John'; => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น 'John'",
        "const age = 25; => ประกาศตัวแปร age เป็นค่าคงที่เลขจำนวนเต็มและกำหนดค่าเป็น 25",
        "var isActive = true; => ประกาศตัวแปร isActive เป็นค่าความจริงและกำหนดค่าเป็น true",
        "let numbers = [1, 2, 3]; => ประกาศตัวแปร numbers เป็น array ของตัวเลข",
        "const user = { name: 'Alice', age: 30 }; => ประกาศตัวแปร user เป็น object พร้อมกำหนดคุณสมบัติ"
      ]
    },
    "functions": {
      "declaration": [
        "function => การประกาศฟังก์ชันแบบปกติ",
        "arrow function => การประกาศฟังก์ชันแบบสั้น (ES6)",
        "function expression => การกำหนดฟังก์ชันให้ตัวแปร"
      ],
      "examples": [
        "function greet(name) { return 'Hello ' + name; } => ฟังก์ชันชื่อ greet รับชื่อแล้วคืนค่าข้อความทักทาย",
        "const add = (a, b) => a + b; => Arrow function ชื่อ add รับสองตัวเลขแล้วคืนค่าผลรวม",
        "const multiply = function(x, y) { return x * y; }; => Function expression ชื่อ multiply รับสองตัวเลขแล้วคืนค่าผลคูณ",
        "async function fetchData() { return await api.getData(); } => ฟังก์ชัน asynchronous ชื่อ fetchData ที่รอการดึงข้อมูลจาก API"
      ],
      "built_in": [
        "parseInt() => ใช้แปลงสตริงเป็นเลขจำนวนเต็ม",
        "parseFloat() => ใช้แปลงสตริงเป็นเลขทศนิยม",
        "setTimeout() => ใช้สำหรับกำหนดเวลาในการรันฟังก์ชันในอนาคต",
        "setInterval() => ใช้สำหรับรันฟังก์ชันซ้ำๆ ทุกช่วงเวลาที่กำหนด",
        "JSON.parse() => ใช้แปลง JSON string เป็น JavaScript object",
        "JSON.stringify() => ใช้แปลง JavaScript object เป็น JSON string",
        "console.log() => ใช้สำหรับแสดงผลข้อมูลออกทาง console"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "if...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าไม่จริงทำอีกชุดคำสั่งหนึ่ง",
        "switch => คำสั่งเลือกทำตามค่าของตัวแปร",
        "ternary operator ? : => ตัวดำเนินการเงื่อนไขแบบสั้น"
      ],
      "loops": [
        "for => ลูปสำหรับทำซ้ำตามจำนวนรอบที่กำหนด",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "do...while => ลูปสำหรับทำซ้ำอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข",
        "for...in => ลูปสำหรับวนซ้ำผ่าน key/property ของ object",
        "for...of => ลูปสำหรับวนซ้ำผ่านค่าของ iterable object (เช่น Array, String)",
        "forEach() => เมธอดของ Array สำหรับวนซ้ำแต่ละ element"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ (เปรียบเทียบค่า ไม่สนใจชนิดข้อมูล)",
        "=== => เท่ากับ (เปรียบเทียบทั้งค่าและชนิดข้อมูล)",
        "!= => ไม่เท่ากับ (เปรียบเทียบค่า ไม่สนใจชนิดข้อมูล)",
        "!== => ไม่เท่ากับ (เปรียบเทียบทั้งค่าและชนิดข้อมูล)",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "! => ไม่ (NOT)"
      ],
      "examples": [
        "if (age >= 18) { console.log('Adult'); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า 'Adult'",
        "for (let i = 0; i < 10; i++) { console.log(i); } => ลูปที่แสดงตัวเลข 0 ถึง 9",
        "while (condition) { /* code */ } => ลูปที่ทำงานตราบใดที่ condition เป็นจริง",
        "array.forEach(item => console.log(item)); => วนซ้ำใน array และแสดงแต่ละ item"
      ]
    },
    "frameworks": ["React", "Vue.js", "Angular", "Node.js", "Express.js", "Next.js", "Nuxt.js"],
    "learning_resources": ["MDN Web Docs", "JavaScript.info", "Eloquent JavaScript", "You Don't Know JS"],
    "popularity_rank": 1,
    "salary_range": "40,000 - 120,000 บาท/เดือน"
  },
  {
    "id": 5,
    "name": "Python",
    "slug": "python",
    "desc": "ภาษาโปรแกรมมิ่งที่อ่านง่าย เขียนง่าย เหมาะสำหรับผู้เริ่มต้น มีไลบรารีมากมายสำหรับ Data Science, AI, และ Web Development",
    "by": "Guido van Rossum",
    "yr": "1991",
    "level": "4",
    "par": ["Object-oriented", "Imperative", "Functional"],
    "cateid": [1, 3],
    "logo": "/img/python.png",
    "uses": ["Data Science", "AI/ML", "Web Backend", "Automation", "Scientific Computing"],
    "pros": [
      "Syntax ที่อ่านง่ายและเรียนรู้ง่าย",
      "มี Library มากมายสำหรับทุกงาน",
      "Community และ Documentation ดีเยี่ยม",
      "เหมาะสำหรับ Rapid Prototyping",
      "Cross-platform compatibility",
      "ใช้ในงาน Data Science และ AI มาก",
      "Interpreted language - ไม่ต้องคอมไพล์"
    ],
    "cons": [
      "Performance ช้ากว่าภาษาที่คอมไพล์",
      "Global Interpreter Lock (GIL) จำกัด multi-threading",
      "Memory consumption สูง",
      "Runtime errors เนื่องจาก Dynamic typing",
      "ไม่เหมาะสำหรับ mobile development",
      "Dependency management อาจซับซ้อน"
    ],
    "variables": {
      "declaration": [
        "Dynamic typing - ไม่ต้องประกาศ type => การประกาศตัวแปรไม่ต้องระบุชนิดข้อมูล Python จะอนุมานเอง"
      ],
      "types": [
        "int => เลขจำนวนเต็ม",
        "float => เลขทศนิยม",
        "str => ข้อความ (string)",
        "bool => ค่าความจริง (True/False)",
        "list => ลำดับของรายการที่เปลี่ยนแปลงได้ (mutable)",
        "tuple => ลำดับของรายการที่ไม่เปลี่ยนแปลงได้ (immutable)",
        "dict => คอลเลกชันของคู่ key-value",
        "set => คอลเลกชันของรายการที่ไม่ซ้ำกันและไม่มีลำดับ"
      ],
      "examples": [
        "name = 'Alice' => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น 'Alice'",
        "age = 25 => ประกาศตัวแปร age เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 25",
        "is_student = True => ประกาศตัวแปร is_student เป็นค่าความจริงและกำหนดค่าเป็น True",
        "numbers = [1, 2, 3, 4, 5] => ประกาศตัวแปร numbers เป็น list ของตัวเลข",
        "person = {'name': 'Bob', 'age': 30} => ประกาศตัวแปร person เป็น dictionary พร้อมกำหนดคุณสมบัติ",
        "coordinates = (10, 20) => ประกาศตัวแปร coordinates เป็น tuple ของตัวเลข"
      ]
    },
    "functions": {
      "declaration": [
        "def keyword => ใช้คำว่า def เพื่อประกาศฟังก์ชัน"
      ],
      "examples": [
        "def greet(name): return f'Hello {name}' => ฟังก์ชันชื่อ greet รับชื่อแล้วคืนค่าข้อความทักทาย",
        "def add(a, b=0): return a + b => ฟังก์ชันชื่อ add รับตัวเลขสองตัว โดย b มีค่าเริ่มต้นเป็น 0 แล้วคืนค่าผลรวม",
        "def calculate(*args, **kwargs): pass => ฟังก์ชันชื่อ calculate รับ arguments ได้ไม่จำกัด (*args) และ keyword arguments ได้ไม่จำกัด (**kwargs)",
        "lambda x: x * 2 => anonymous function (lambda) ที่รับ x แล้วคืนค่า x คูณ 2",
        "def fibonacci(n): return n if n <= 1 else fibonacci(n-1) + fibonacci(n-2) => ฟังก์ชันแบบ recursive ชื่อ fibonacci สำหรับหาลำดับฟีโบนักชี"
      ],
      "built_in": [
        "print() => ใช้สำหรับแสดงผลข้อมูลออกทาง console",
        "len() => ใช้สำหรับหาความยาวของ object (เช่น list, string, dict)",
        "range() => ใช้สำหรับสร้างลำดับของตัวเลข",
        "enumerate() => ใช้สำหรับวนซ้ำคอลเลกชันพร้อมกับ index",
        "zip() => ใช้สำหรับรวม iterable หลายๆ อันเข้าด้วยกัน",
        "map() => ใช้สำหรับนำฟังก์ชันไปประยุกต์ใช้กับแต่ละ element ใน iterable",
        "filter() => ใช้สำหรับกรอง element ใน iterable ตามเงื่อนไข",
        "sorted() => ใช้สำหรับเรียงลำดับ element ใน iterable"
      ]
    },
    "syntax": {
      "comments": [
        "# Single line => คอมเมนต์บรรทัดเดียว",
        "\"\"\" Multi line \"\"\" => คอมเมนต์หลายบรรทัด (docstring)"
      ],
      "conditions": [
        "if...elif...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าเงื่อนไขอื่นจริงทำอีกชุดคำสั่งหนึ่ง ถ้าไม่จริงทั้งหมดทำชุดสุดท้าย"
      ],
      "loops": [
        "for...in => ลูปสำหรับวนซ้ำผ่าน element ใน iterable",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "list comprehension => วิธีสร้าง list แบบกระชับโดยใช้ลูปและเงื่อนไข"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร (ผลลัพธ์เป็น float)",
        "// => หาร (ผลลัพธ์เป็นจำนวนเต็ม)",
        "% => หาเศษจากการหาร",
        "** => ยกกำลัง",
        "== => เท่ากับ",
        "!= => ไม่เท่ากับ",
        "< => น้อยกว่า",
        "> => มากกว่า",
        "and => และ (AND)",
        "or => หรือ (OR)",
        "not => ไม่ (NOT)"
      ],
      "examples": [
        "if age >= 18: print('Adult') => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า 'Adult'",
        "for i in range(10): print(i) => ลูปที่แสดงตัวเลข 0 ถึง 9",
        "while condition: pass => ลูปที่ทำงานตราบใดที่ condition เป็นจริง (pass คือคำสั่งว่างเปล่า)",
        "[x*2 for x in range(10) if x % 2 == 0] => สร้าง list ใหม่โดยนำ x คูณ 2 สำหรับ x ที่เป็นเลขคู่ในช่วง 0 ถึง 9"
      ]
    },
    "frameworks": ["Django", "Flask", "FastAPI", "Pandas", "NumPy", "TensorFlow", "PyTorch", "Scikit-learn"],
    "learning_resources": ["Python.org Tutorial", "Automate the Boring Stuff", "Real Python", "Python Crash Course"],
    "popularity_rank": 2,
    "salary_range": "45,000 - 150,000 บาท/เดือน"
  },
  {
    "id": 6,
    "name": "Java",
    "slug": "java",
    "desc": "ภาษาโปรแกรมมิ่งที่มีความเสถียรสูง ใช้กันอย่างแพร่หลายในองค์กรขนาดใหญ่ สามารถทำงานได้หลากหลายแพลตฟอร์ม",
    "by": "James Gosling",
    "yr": "1995",
    "level": "4",
    "par": ["Object-oriented", "Class-based"],
    "cateid": [2, 5],
    "logo": "/img/java.png",
    "uses": ["Enterprise Apps", "Android Apps", "Web Backend", "Desktop Apps", "Big Data"],
    "pros": [
      "Platform independent (Write Once, Run Anywhere)",
      "Strong memory management และ Garbage Collection",
      "Large ecosystem และ mature libraries",
      "Enterprise-grade security features",
      "Multi-threading support ที่ดี",
      "Strong typing system",
      "Excellent IDE support"
    ],
    "cons": [
      "Verbose syntax - ต้องเขียนโค้ดเยอะ",
      "Slower development compared to dynamic languages",
      "Memory consumption สูง",
      "Learning curve สำหรับ OOP concepts",
      "Oracle licensing issues",
      "ไม่เหมาะสำหรับ scripting งานเล็กๆ"
    ],
    "variables": {
      "declaration": [
        "Strong typing - ต้องประกาศ type => การประกาศตัวแปรต้องระบุชนิดข้อมูลอย่างชัดเจน"
      ],
      "types": [
        "int => เลขจำนวนเต็ม",
        "double => เลขทศนิยมความแม่นยำสูง",
        "float => เลขทศนิยมความแม่นยำต่ำ",
        "boolean => ค่าความจริง (true/false)",
        "char => อักขระเดี่ยว",
        "String => ข้อความ (เป็น class ไม่ใช่ primitive type)",
        "Object => ชนิดข้อมูลพื้นฐานที่ทุก class สืบทอดมา",
        "Array => อาร์เรย์ของข้อมูลชนิดเดียวกัน"
      ],
      "examples": [
        "int age = 25; => ประกาศตัวแปร age เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 25",
        "String name = \"Alice\"; => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น \"Alice\"",
        "boolean isActive = true; => ประกาศตัวแปร isActive เป็นค่าความจริงและกำหนดค่าเป็น true",
        "double salary = 50000.50; => ประกาศตัวแปร salary เป็นเลขทศนิยมความแม่นยำสูงและกำหนดค่าเป็น 50000.50",
        "int[] numbers = {1, 2, 3, 4, 5}; => ประกาศ array ชื่อ numbers เก็บเลขจำนวนเต็มและกำหนดค่าเริ่มต้น",
        "List<String> names = new ArrayList<>(); => ประกาศ List ของ String และสร้าง instance ของ ArrayList"
      ]
    },
    "functions": {
      "declaration": [
        "method declaration ใน class => การประกาศเมธอด (ฟังก์ชัน) ภายในคลาส"
      ],
      "examples": [
        "public static void main(String[] args) { } => เมธอดหลัก (entry point) ของโปรแกรม Java",
        "public int add(int a, int b) { return a + b; } => เมธอดชื่อ add รับเลขจำนวนเต็มสองตัวแล้วคืนค่าผลรวมเป็นเลขจำนวนเต็ม",
        "private String getName() { return this.name; } => เมธอดชื่อ getName ที่เป็น private คืนค่าชื่อของ object ปัจจุบัน",
        "public static double calculateArea(double radius) { return Math.PI * radius * radius; } => เมธอด static ชื่อ calculateArea รับรัศมีแล้วคืนค่าพื้นที่วงกลม"
      ],
      "built_in": [
        "System.out.println() => ใช้สำหรับแสดงผลข้อมูลออกทาง console",
        "Math.max() => ใช้สำหรับหาค่าสูงสุดระหว่างสองตัวเลข",
        "String.valueOf() => ใช้สำหรับแปลงข้อมูลชนิดต่างๆ เป็น String",
        "Integer.parseInt() => ใช้สำหรับแปลง String เป็นเลขจำนวนเต็ม"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด",
        "/** JavaDoc */ => คอมเมนต์สำหรับสร้างเอกสาร JavaDoc"
      ],
      "conditions": [
        "if...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าไม่จริงทำอีกชุดคำสั่งหนึ่ง",
        "switch => คำสั่งเลือกทำตามค่าของตัวแปร"
      ],
      "loops": [
        "for => ลูปสำหรับทำซ้ำตามจำนวนรอบที่กำหนด",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "do-while => ลูปสำหรับทำซ้ำอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข",
        "enhanced for => ลูปสำหรับวนซ้ำผ่านองค์ประกอบของ array หรือ collection"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ (เปรียบเทียบค่าสำหรับ primitive type, เปรียบเทียบ reference สำหรับ object)",
        "!= => ไม่เท่ากับ",
        "< => น้อยกว่า",
        "> => มากกว่า",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "! => ไม่ (NOT)"
      ],
      "examples": [
        "if (age >= 18) { System.out.println(\"Adult\"); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า \"Adult\"",
        "for (int i = 0; i < 10; i++) { System.out.println(i); } => ลูปที่แสดงตัวเลข 0 ถึง 9",
        "for (String name : names) { System.out.println(name); } => ลูปที่วนแสดงแต่ละ name ใน names (enhanced for loop)"
      ]
    },
    "frameworks": ["Spring", "Spring Boot", "Hibernate", "Apache Maven", "Gradle", "JUnit", "Apache Kafka"],
    "learning_resources": ["Oracle Java Tutorials", "Head First Java", "Effective Java", "Java: The Complete Reference"],
    "popularity_rank": 3,
    "salary_range": "50,000 - 140,000 บาท/เดือน"
  },
  {
    "id": 7,
    "name": "Swift",
    "slug": "swift",
    "desc": "ภาษาโปรแกรมมิ่งที่สร้างโดย Apple สำหรับพัฒนาแอป iOS, macOS, watchOS และ tvOS มีไวยากรณ์ที่ทันสมัยและ Safe",
    "by": "Apple Inc.",
    "yr": "2014",
    "level": "3",
    "par": ["Object-oriented", "Functional", "Protocol-oriented"],
    "cateid": [2],
    "logo": "/img/swift.png",
    "uses": ["iOS Apps", "macOS Apps", "watchOS Apps", "tvOS Apps", "Server-side"],
    "pros": [
      "Modern syntax ที่อ่านง่าย",
      "Memory safety และ type safety",
      "Performance ใกล้เคียง C++",
      "Interoperability กับ Objective-C",
      "Strong type inference",
      "Protocol-oriented programming",
      "Active development by Apple"
    ],
    "cons": [
      "จำกัดเฉพาะ Apple ecosystem",
      "Rapid changes ใน language updates",
      "Limited job market นอก iOS development",
      "ABI stability issues ในรุ่นเก่า",
      "Learning curve สำหรับ protocol-oriented concepts",
      "Smaller community เทียบกับภาษาอื่น"
    ],
    "variables": {
      "declaration": [
        "var (mutable) => ใช้ประกาศตัวแปรที่สามารถเปลี่ยนแปลงค่าได้",
        "let (immutable) => ใช้ประกาศตัวแปรที่ไม่สามารถเปลี่ยนแปลงค่าได้ (ค่าคงที่)"
      ],
      "types": [
        "Int => เลขจำนวนเต็ม",
        "Double => เลขทศนิยมความแม่นยำสูง",
        "String => ข้อความ",
        "Bool => ค่าความจริง (true/false)",
        "Array => คอลเลกชันของรายการที่มีลำดับ",
        "Dictionary => คอลเลกชันของคู่ key-value",
        "Optional => ชนิดข้อมูลที่สามารถมีค่าหรือเป็น nil ได้"
      ],
      "examples": [
        "let name = \"Alice\" => ประกาศค่าคงที่ name เป็นสตริงและกำหนดค่าเป็น \"Alice\"",
        "var age = 25 => ประกาศตัวแปร age เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 25",
        "let isActive: Bool = true => ประกาศค่าคงที่ isActive เป็น Bool และกำหนดค่าเป็น true (ระบุ type ชัดเจน)",
        "var numbers = [1, 2, 3, 4, 5] => ประกาศตัวแปร numbers เป็น Array ของตัวเลข",
        "let person = [\"name\": \"Bob\", \"age\": \"30\"] => ประกาศค่าคงที่ person เป็น Dictionary พร้อมกำหนดคุณสมบัติ",
        "var optionalValue: String? = nil => ประกาศตัวแปร optionalValue เป็น Optional String และกำหนดค่าเริ่มต้นเป็น nil"
      ]
    },
    "functions": {
      "declaration": [
        "func keyword => ใช้คำว่า func เพื่อประกาศฟังก์ชัน"
      ],
      "examples": [
        "func greet(name: String) -> String { return \"Hello \\(name)\" } => ฟังก์ชันชื่อ greet รับพารามิเตอร์ name ชนิด String และคืนค่า String",
        "func add(_ a: Int, _ b: Int) -> Int { return a + b } => ฟังก์ชันชื่อ add รับเลขจำนวนเต็มสองตัวโดยไม่มี label สำหรับพารามิเตอร์แรกและคืนค่าผลรวม",
        "func processData(completion: @escaping (Result<Data, Error>) -> Void) { } => ฟังก์ชันชื่อ processData ที่รับ closure เป็นพารามิเตอร์สำหรับจัดการผลลัพธ์แบบ asynchronous",
        "let multiply = { (a: Int, b: Int) -> Int in return a * b } => การกำหนด closure (anonymous function) ให้กับค่าคงที่ multiply"
      ],
      "built_in": [
        "print() => ใช้สำหรับแสดงผลข้อมูลออกทาง console",
        "readLine() => ใช้สำหรับอ่านข้อมูลจาก input",
        "abs() => ใช้สำหรับหาค่าสัมบูรณ์ของตัวเลข",
        "min() => ใช้สำหรับหาค่าที่น้อยที่สุดระหว่างค่าที่ให้มา",
        "max() => ใช้สำหรับหาค่าที่มากที่สุดระหว่างค่าที่ให้มา",
        "String() => ใช้สำหรับสร้าง String จากค่าอื่น"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "if...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าไม่จริงทำอีกชุดคำสั่งหนึ่ง",
        "switch => คำสั่งเลือกทำตามค่าของตัวแปรหรือ enum",
        "guard => คำสั่งสำหรับการตรวจสอบเงื่อนไขล้มเหลวเร็ว (early exit)"
      ],
      "loops": [
        "for...in => ลูปสำหรับวนซ้ำผ่าน element ใน sequence หรือ collection",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "repeat...while => ลูปสำหรับทำซ้ำอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ",
        "!= => ไม่เท่ากับ",
        "< => น้อยกว่า",
        "> => มากกว่า",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "! => ไม่ (NOT)",
        "?? => Nil-coalescing operator, ถ้า Optional เป็น nil จะคืนค่า default"
      ],
      "examples": [
        "if age >= 18 { print(\"Adult\") } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า \"Adult\"",
        "for i in 0..<10 { print(i) } => ลูปที่แสดงตัวเลข 0 ถึง 9 (ไม่รวม 10)",
        "guard let value = optionalValue else { return } => ถ้า optionalValue มีค่า ให้กำหนดค่าให้ value แล้วทำต่อ มิฉะนั้นให้ออกจากฟังก์ชัน",
        "let result = optionalValue ?? \"default\" => ถ้า optionalValue มีค่า ให้ใช้ค่านั้น มิฉะนั้นให้ใช้ \"default\""
      ]
    },
    "frameworks": ["UIKit", "SwiftUI", "Combine", "Core Data", "Alamofire", "RxSwift"],
    "learning_resources": ["Swift.org", "Swift Programming Language Book", "Hacking with Swift", "Ray Wenderlich"],
    "popularity_rank": 12,
    "salary_range": "60,000 - 180,000 บาท/เดือน"
  },
  {
    "id": 8,
    "name": "Kotlin",
    "slug": "kotlin",
    "desc": "ภาษาโปรแกรมมิ่งที่ทันสมัย สามารถทำงานร่วมกับ Java ได้อย่างสมบูรณ์ เป็นภาษาหลักสำหรับพัฒนา Android Apps",
    "by": "JetBrains",
    "yr": "2011",
    "level": "4",
    "par": ["Object-oriented", "Functional"],
    "cateid": [2, 1],
    "logo": "/img/kotlin.png",
    "uses": ["Android Apps", "Web Backend", "Desktop Apps", "Cross-platform Mobile", "Server-side"],
    "pros": [
      "100% interoperable กับ Java",
      "Concise syntax - เขียนโค้ดน้อยกว่า Java",
      "Null safety built-in",
      "Coroutines สำหรับ async programming",
      "Official language สำหรับ Android",
      "Multi-platform development (Kotlin Multiplatform)",
      "Modern language features"
    ],
    "cons": [
      "Compilation speed ช้ากว่า Java",
      "Learning curve สำหรับ Java developers",
      "Smaller community เทียบกับ Java",
      "Runtime size ใหญ่กว่าเล็กน้อย",
      "Limited resources เทียบกับ established languages",
      "Still evolving - breaking changes possible"
    ],
    "variables": {
      "declaration": [
        "var (mutable) => ใช้ประกาศตัวแปรที่สามารถเปลี่ยนแปลงค่าได้",
        "val (immutable) => ใช้ประกาศตัวแปรที่ไม่สามารถเปลี่ยนแปลงค่าได้ (ค่าคงที่)"
      ],
      "types": [
        "Int => เลขจำนวนเต็ม",
        "Double => เลขทศนิยมความแม่นยำสูง",
        "String => ข้อความ",
        "Boolean => ค่าความจริง (true/false)",
        "List => คอลเลกชันของรายการที่มีลำดับ",
        "Map => คอลเลกชันของคู่ key-value",
        "nullable types => ชนิดข้อมูลที่สามารถเก็บค่า null ได้ (ระบุด้วย ?)"
      ],
      "examples": [
        "val name = \"Alice\" => ประกาศค่าคงที่ name เป็นสตริงและกำหนดค่าเป็น \"Alice\"",
        "var age = 25 => ประกาศตัวแปร age เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 25",
        "val isActive: Boolean = true => ประกาศค่าคงที่ isActive เป็น Boolean และกำหนดค่าเป็น true (ระบุ type ชัดเจน)",
        "var numbers = listOf(1, 2, 3, 4, 5) => ประกาศตัวแปร numbers เป็น List ของตัวเลข",
        "val person = mapOf(\"name\" to \"Bob\", \"age\" to 30) => ประกาศค่าคงที่ person เป็น Map พร้อมกำหนดคุณสมบัติ",
        "var nullableValue: String? = null => ประกาศตัวแปร nullableValue เป็น String ที่สามารถเป็น null ได้ และกำหนดค่าเริ่มต้นเป็น null"
      ]
    },
    "functions": {
      "declaration": [
        "fun keyword => ใช้คำว่า fun เพื่อประกาศฟังก์ชัน"
      ],
      "examples": [
        "fun greet(name: String): String = \"Hello $name\" => ฟังก์ชันชื่อ greet รับพารามิเตอร์ name ชนิด String และคืนค่า String (รูปแบบ single-expression)",
        "fun add(a: Int, b: Int = 0): Int { return a + b } => ฟังก์ชันชื่อ add รับตัวเลขสองตัว โดย b มีค่าเริ่มต้นเป็น 0 แล้วคืนค่าผลรวม",
        "fun processData(callback: (String) -> Unit) { } => ฟังก์ชันชื่อ processData ที่รับ lambda/function เป็นพารามิเตอร์",
        "val multiply = { a: Int, b: Int -> a * b } => การกำหนด lambda expression ให้กับค่าคงที่ multiply"
      ],
      "built_in": [
        "println() => ใช้สำหรับแสดงผลข้อมูลออกทาง console",
        "readLine() => ใช้สำหรับอ่านข้อมูลจาก input",
        "let() => extension function สำหรับทำงานกับ object ที่ไม่เป็น null",
        "apply() => extension function สำหรับกำหนดค่า property ของ object",
        "with() => extension function สำหรับเรียกเมธอดบน object โดยไม่ต้องระบุชื่อ object ซ้ำๆ",
        "run() => extension function ที่คล้าย let() แต่มีประโยชน์เมื่อต้องการคำนวณและคืนค่า"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "if...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าไม่จริงทำอีกชุดคำสั่งหนึ่ง",
        "when => คล้าย switch ในภาษาอื่น แต่มีความยืดหยุ่นมากกว่า",
        "if expressions => if สามารถใช้เป็น expression (คืนค่าได้)"
      ],
      "loops": [
        "for...in => ลูปสำหรับวนซ้ำผ่าน element ใน iterable (คล้าย foreach)",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "do...while => ลูปสำหรับทำซ้ำอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ (เปรียบเทียบค่าและชนิดข้อมูล)",
        "!= => ไม่เท่ากับ",
        "< => น้อยกว่า",
        "> => มากกว่า",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "! => ไม่ (NOT)",
        "?: => Elvis operator, ถ้าค่าด้านซ้ายเป็น null จะคืนค่าด้านขวา",
        "?. => Safe call operator, ใช้เรียกเมธอดหรือเข้าถึง property ของ object ที่อาจเป็น null อย่างปลอดภัย"
      ],
      "examples": [
        "if (age >= 18) println(\"Adult\") => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า \"Adult\"",
        "for (i in 0..9) println(i) => ลูปที่แสดงตัวเลข 0 ถึง 9",
        "when (grade) { 'A' -> \"Excellent\" else -> \"Good\" } => ตรวจสอบค่า grade ถ้าเป็น 'A' แสดง \"Excellent\" ถ้าไม่ใช่แสดง \"Good\"",
        "val result = nullableValue?.length ?: 0 => ถ้า nullableValue ไม่เป็น null ให้คืนค่าความยาว มิฉะนั้นให้คืนค่า 0"
      ]
    },
    "frameworks": ["Android SDK", "Ktor", "Spring Boot", "Exposed", "TornadoFX", "Compose Multiplatform"],
    "learning_resources": ["Kotlin Official Docs", "Kotlin in Action", "Android Kotlin Fundamentals", "Kotlin Bootcamp"],
    "popularity_rank": 8,
    "salary_range": "55,000 - 170,000 บาท/เดือน"
  },
  {
    "id": 9,
    "name": "Svelte",
    "slug": "svelte",
    "desc": "เฟรมเวิร์กที่ compile เป็น vanilla JavaScript ให้ bundle size เล็กที่สุดและ performance สูงที่สุด ไม่มี Virtual DOM overhead",
    "by": "Rich Harris",
    "yr": "2016",
    "level": "5",
    "par": ["Component-based", "Reactive"],
    "cateid": [1],
    "logo": "/img/svelte.png",
    "uses": ["เว็บไซต์", "Single Page Apps", "Progressive Web Apps", "High-Performance Apps"],
    "pros": [
      "No Virtual DOM - ประสิทธิภาพสูง",
      "Bundle size เล็กมาก",
      "Built-in state management",
      "1 to learn syntax",
      "Compile-time optimizations",
      "Built-in animations และ transitions",
      "Less boilerplate code"
    ],
    "cons": [
      "Smaller ecosystem เทียบกับ React/Vue",
      "Limited job opportunities",
      "Fewer third-party components",
      "Still relatively new framework",
      "Less community support",
      "Limited tooling เทียบกับ mature frameworks"
    ],
    "variables": {
      "declaration": [
        "Reactive declarations => การประกาศตัวแปรที่มีการเปลี่ยนแปลงค่าแล้วส่งผลให้ UI อัปเดตอัตโนมัติ"
      ],
      "types": [
        "Same as JavaScript => ชนิดข้อมูลเดียวกับ JavaScript"
      ],
      "examples": [
        "let name = 'Alice'; => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น 'Alice'",
        "let count = 0; => ประกาศตัวแปร count เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 0",
        "$: doubled = count * 2; => Reactive declaration: doubled จะคำนวณใหม่ทุกครั้งที่ count เปลี่ยนแปลง",
        "let items = [1, 2, 3]; => ประกาศตัวแปร items เป็น array ของตัวเลข",
        "$: filteredItems = items.filter(x => x > 1); => Reactive declaration: filteredItems จะกรอง items ใหม่ทุกครั้งที่ items เปลี่ยนแปลง"
      ]
    },
    "functions": {
      "declaration": [
        "JavaScript functions + Svelte reactivity => ฟังก์ชัน JavaScript ที่สามารถทำงานร่วมกับระบบ reactivity ของ Svelte"
      ],
      "examples": [
        "function handleClick() { count += 1; } => ฟังก์ชันที่เพิ่มค่า count เมื่อถูกเรียก",
        "const greet = (name) => `Hello ${name}`; => ฟังก์ชันที่รับชื่อแล้วคืนค่าข้อความทักทาย",
        "$: if (count >= 10) { alert('Count is high!'); } => Reactive statement: ถ้า count ถึง 10 หรือมากกว่า จะแสดง alert",
        "export function createUser(name) { return { name, id: Date.now() }; } => ฟังก์ชันที่ถูก export เพื่อให้ component อื่นสามารถเรียกใช้ได้"
      ],
      "built_in": [
        "tick() => ส่ง promise ที่ resolved เมื่อมีการอัปเดต DOM รอบถัดไป",
        "createEventDispatcher() => ใช้สำหรับสร้างและส่ง custom event จาก component ลูกไป component แม่",
        "onMount() => lifecycle hook ที่ทำงานเมื่อ component ถูก mount เข้าสู่ DOM",
        "onDestroy() => lifecycle hook ที่ทำงานเมื่อ component ถูกทำลายออกจาก DOM"
      ]
    },
    "syntax": {
      "comments": [
        "=> คอมเมนต์ในส่วน HTML",
        "// JS comments => คอมเมนต์ในส่วน JavaScript"
      ],
      "conditions": [
        "{#if} => บล็อกเงื่อนไข ถ้าจริงแสดงเนื้อหาภายใน",
        "{#else} => บล็อกที่จะแสดงเมื่อเงื่อนไขของ if ไม่เป็นจริง",
        "{#else if} => บล็อกเงื่อนไขเพิ่มเติมเมื่อเงื่อนไขก่อนหน้าไม่เป็นจริง"
      ],
      "loops": [
        "{#each} => บล็อกสำหรับวนซ้ำผ่านรายการใน array",
        "{#await} => บล็อกสำหรับจัดการ Promise (loading, fulfilled, rejected state)"
      ],
      "operators": [
        "Same as JavaScript => เหมือนกับ JavaScript"
      ],
      "examples": [
        "{#if user} <p>Hello {user.name}!</p> {/if} => ถ้ามี user ให้แสดงข้อความทักทาย",
        "{#each items as item} <div>{item}</div> {/each} => วนซ้ำใน items และแสดงแต่ละ item",
        "<button on:click={handleClick}>Click me</button> => ผูก event listener สำหรับ click กับฟังก์ชัน handleClick",
        "<input bind:value={name} /> => Two-way data binding: ค่าของ input จะผูกกับตัวแปร name"
      ]
    },
    "frameworks": ["SvelteKit", "Sapper", "Svelte Native", "Elder.js"],
    "learning_resources": ["Svelte Tutorial", "Svelte School", "The Svelte Handbook", "Svelte Society"],
    "popularity_rank": 15,
    "salary_range": "45,000 - 130,000 บาท/เดือน"
  },
  {
    "id": 10,
    "name": "Go",
    "slug": "go",
    "desc": "ภาษาโปรแกรมมิ่งที่สร้างโดย Google เน้นความเรียบง่าย ประสิทธิภาพสูง และ Concurrency ที่ดี เหมาะสำหรับ Backend Services",
    "by": "Google",
    "yr": "2009",
    "level": "3",
    "par": ["Imperative", "Concurrent"],
    "cateid": [1, 4],
    "logo": "/img/go.png",
    "uses": ["Web Backend", "Microservices", "Cloud Services", "DevOps Tools", "Network Programming"],
    "pros": [
      "Fast compilation และ execution",
      "Built-in concurrency (Goroutines)",
      "Simple และ readable syntax",
      "Strong standard library",
      "Cross-platform compilation",
      "Garbage collection",
      "Excellent for microservices"
    ],
    "cons": [
      "Limited generics (จนกระทั่งเร็วๆ นี้)",
      "No traditional OOP features",
      "Verbose error handling",
      "Limited package management",
      "No function overloading",
      "Young ecosystem เทียบกับภาษาอื่น"
    ],
    "variables": {
      "declaration": [
        "var => ใช้ประกาศตัวแปรอย่างชัดเจนพร้อมระบุชนิดข้อมูล",
        "short declaration := => การประกาศตัวแปรแบบย่อและกำหนดค่าพร้อมกัน (Go จะอนุมานชนิดข้อมูลให้)"
      ],
      "types": [
        "int => เลขจำนวนเต็ม",
        "float64 => เลขทศนิยมความแม่นยำสูง",
        "string => ข้อความ",
        "bool => ค่าความจริง (true/false)",
        "slice => Dynamic array ที่สามารถปรับขนาดได้",
        "map => คอลเลกชันของคู่ key-value",
        "struct => โครงสร้างข้อมูลที่เก็บฟิลด์หลายประเภทเข้าด้วยกัน"
      ],
      "examples": [
        "var name string = \"Alice\" => ประกาศตัวแปร name เป็น string และกำหนดค่าเป็น \"Alice\"",
        "age := 25 => ประกาศตัวแปร age แบบย่อ Go จะอนุมานว่าเป็น int และกำหนดค่าเป็น 25",
        "var isActive bool = true => ประกาศตัวแปร isActive เป็น bool และกำหนดค่าเป็น true",
        "numbers := []int{1, 2, 3, 4, 5} => ประกาศ slice ของ int และกำหนดค่าเริ่มต้น",
        "person := map[string]int{\"age\": 30} => ประกาศ map ที่มี key เป็น string และ value เป็น int พร้อมกำหนดค่า"
      ]
    },
    "functions": {
      "declaration": [
        "func keyword => ใช้คำว่า func เพื่อประกาศฟังก์ชัน"
      ],
      "examples": [
        "func greet(name string) string { return \"Hello \" + name } => ฟังก์ชันชื่อ greet รับพารามิเตอร์ name ชนิด string และคืนค่า string",
        "func add(a, b int) int { return a + b } => ฟังก์ชันชื่อ add รับเลขจำนวนเต็มสองตัวแล้วคืนค่าผลรวม (สามารถละชนิดข้อมูลของพารามิเตอร์แรกได้ถ้าเหมือนกัน)",
        "func divide(a, b float64) (float64, error) { return a/b, nil } => ฟังก์ชันชื่อ divide ที่คืนค่าหลายค่า (ผลลัพธ์และ error)",
        "func main() { fmt.Println(\"Hello, World!\") } => ฟังก์ชันหลัก (entry point) ของโปรแกรม Go"
      ],
      "built_in": [
        "fmt.Println() => ใช้สำหรับแสดงผลข้อมูลออกทาง console",
        "len() => ใช้สำหรับหาความยาวของ string, array, slice, map หรือ channel",
        "make() => ใช้สำหรับสร้าง slice, map หรือ channel",
        "append() => ใช้สำหรับเพิ่ม element เข้าไปใน slice",
        "copy() => ใช้สำหรับคัดลอก element จาก slice หนึ่งไปยังอีก slice หนึ่ง"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "if => คำสั่งเงื่อนไข",
        "switch => คำสั่งเลือกทำตามค่าของตัวแปร"
      ],
      "loops": [
        "for (only loop construct) => ใน Go มีแค่ for loop สำหรับการวนซ้ำ (สามารถใช้เป็น while loop หรือ infinite loop ได้)"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ",
        "!= => ไม่เท่ากับ",
        "< => น้อยกว่า",
        "> => มากกว่า",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "! => ไม่ (NOT)"
      ],
      "examples": [
        "if age >= 18 { fmt.Println(\"Adult\") } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า \"Adult\"",
        "for i := 0; i < 10; i++ { fmt.Println(i) } => ลูปที่แสดงตัวเลข 0 ถึง 9",
        "for _, value := range slice { fmt.Println(value) } => ลูปที่วนแสดงแต่ละ value ใน slice (ละ index ด้วย _)",
        "switch grade { case 'A': fmt.Println(\"Excellent\") } => ตรวจสอบค่า grade ถ้าเป็น 'A' แสดง \"Excellent\""
      ]
    },
    "frameworks": ["Gin", "Echo", "Fiber", "Gorilla", "GORM", "Cobra"],
    "learning_resources": ["A Tour of Go", "Go by Example", "Effective Go", "The Go Programming Language"],
    "popularity_rank": 7,
    "salary_range": "60,000 - 180,000 บาท/เดือน"
  },
  {
    "id": 11,
    "name": "Rust",
    "slug": "rust",
    "desc": "ภาษาโปรแกรมมิ่งที่เน้นความปลอดภัยของหน่วยความจำและประสิทธิภาพสูง เหมาะสำหรับ System Programming",
    "by": "Mozilla",
    "yr": "2010",
    "level": "3",
    "par": ["Imperative", "Functional", "Concurrent"],
    "cateid": [4],
    "logo": "/img/rust.jfif",
    "uses": ["Operating Systems", "Web Browsers", "Game Engines", "Blockchain", "WebAssembly"],
    "pros": [
      "Memory safety without garbage collection",
      "Zero-cost abstractions",
      "Thread safety guaranteed by compiler",
      "Performance เทียบเท่า C/C++",
      "Pattern matching และ algebraic data types",
      "Great package manager (Cargo)",
      "Growing ecosystem และ community"
    ],
    "cons": [
      "Steep learning curve",
      "Borrow checker ทำให้เขียนยากในตอนแรก",
      "Compile times ช้าเทียบกับภาษาอื่น",
      "Limited job market",
      "Complex lifetime management",
      "Still evolving ecosystem"
    ],
    "variables": {
      "declaration": [
        "let (immutable) => ใช้ประกาศตัวแปรที่ไม่สามารถเปลี่ยนแปลงค่าได้ (ค่าคงที่)",
        "let mut (mutable) => ใช้ประกาศตัวแปรที่สามารถเปลี่ยนแปลงค่าได้"
      ],
      "types": [
        "i32 => เลขจำนวนเต็ม 32-bit",
        "f64 => เลขทศนิยม 64-bit",
        "String => ข้อความที่สามารถเปลี่ยนแปลงได้ (owned, heap-allocated)",
        "bool => ค่าความจริง (true/false)",
        "Vec<T> => dynamic array (vector) ของชนิด T",
        "HashMap => คอลเลกชันของคู่ key-value แบบ unordered",
        "Option<T> => enum ที่แสดงถึงค่าที่อาจมีหรือไม่มี (Some(T) หรือ None)"
      ],
      "examples": [
        "let name = \"Alice\"; => ประกาศค่าคงที่ name เป็นสตริงและกำหนดค่าเป็น \"Alice\"",
        "let mut age = 25; => ประกาศตัวแปร age ที่เปลี่ยนแปลงได้เป็นเลขจำนวนเต็มและกำหนดค่าเป็น 25",
        "let is_active: bool = true; => ประกาศค่าคงที่ is_active เป็น bool และกำหนดค่าเป็น true (ระบุ type ชัดเจน)",
        "let numbers = vec![1, 2, 3, 4, 5]; => ประกาศ vector ของเลขจำนวนเต็มและกำหนดค่าเริ่มต้น",
        "let mut scores = HashMap::new(); => ประกาศ HashMap ที่เปลี่ยนแปลงได้และสร้าง instance ใหม่",
        "let maybe_value: Option<i32> = Some(42); => ประกาศ optional value ที่มีค่าเป็น Some(42)"
      ]
    },
    "functions": {
      "declaration": [
        "fn keyword => ใช้คำว่า fn เพื่อประกาศฟังก์ชัน"
      ],
      "examples": [
        "fn greet(name: &str) -> String { format!(\"Hello {}\", name) } => ฟังก์ชันชื่อ greet รับ string slice (reference) และคืนค่า String",
        "fn add(a: i32, b: i32) -> i32 { a + b } => ฟังก์ชันชื่อ add รับเลขจำนวนเต็มสองตัวแล้วคืนค่าผลรวม",
        "fn main() { println!(\"Hello, world!\"); } => ฟังก์ชันหลัก (entry point) ของโปรแกรม Rust",
        "fn process_data<T>(data: Vec<T>) -> Result<T, Error> { } => ฟังก์ชัน generic ชื่อ process_data ที่คืนค่า Result (Success/Error)"
      ],
      "built_in": [
        "println!() => macro สำหรับแสดงผลข้อมูลออกทาง console",
        "format!() => macro สำหรับจัดรูปแบบ string",
        "vec![] => macro สำหรับสร้าง vector",
        "panic!() => macro สำหรับทำให้โปรแกรมหยุดทำงานและแสดงข้อความ error",
        "assert!() => macro สำหรับตรวจสอบเงื่อนไขว่าเป็นจริงหรือไม่"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "if...else => คำสั่งเงื่อนไข ถ้าจริงทำชุดคำสั่งหนึ่ง ถ้าไม่จริงทำอีกชุดคำสั่งหนึ่ง",
        "match => Powerful control flow operator สำหรับ pattern matching"
      ],
      "loops": [
        "loop => ลูปที่ไม่สิ้นสุด (infinite loop)",
        "while => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "for...in => ลูปสำหรับวนซ้ำผ่าน element ใน iterator"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร",
        "% => หาเศษจากการหาร",
        "== => เท่ากับ",
        "!= => ไม่เท่ากับ",
        "< => น้อยกว่า",
        "> => มากกว่า",
        "&& => และ (AND)",
        "|| => หรือ (OR)",
        "! => ไม่ (NOT)"
      ],
      "examples": [
        "if age >= 18 { println!(\"Adult\"); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า \"Adult\"",
        "for i in 0..10 { println!(\"{}\", i); } => ลูปที่แสดงตัวเลข 0 ถึง 9",
        "match grade { 'A' => println!(\"Excellent\"), _ => println!(\"Good\") } => ใช้ match เพื่อตรวจสอบค่า grade ถ้าเป็น 'A' แสดง \"Excellent\" ถ้าไม่ใช่แสดง \"Good\"",
        "loop { break; } => ลูปที่ไม่สิ้นสุดที่จะหยุดเมื่อเจอ break"
      ]
    },
    "frameworks": ["Actix-web", "Rocket", "Tokio", "Serde", "Diesel", "Tauri"],
    "learning_resources": ["The Rust Book", "Rust by Example", "Rustlings", "Programming Rust"],
    "popularity_rank": 14,
    "salary_range": "70,000 - 200,000 บาท/เดือน"
  },
  {
    "id": 12,
    "name": "TypeScript",
    "slug": "typescript",
    "desc": "Superset ของ JavaScript ที่เพิ่ม Static Type Checking ช่วยให้โค้ดมีความปลอดภัยและจัดการโปรเจคขนาดใหญ่ได้ดีขึ้น",
    "by": "Microsoft",
    "yr": "2012",
    "level": "4",
    "par": ["Object-oriented", "Functional", "Type-safe"],
    "cateid": [1, 5],
    "logo": "/img/typescript.png",
    "uses": ["Large Web Apps", "Enterprise Software", "Node.js Backend", "React/Angular Apps"],
    "pros": [
      "Static type checking prevents runtime errors",
      "Excellent IDE support และ IntelliSense",
      "Gradual adoption - ใช้ร่วมกับ JavaScript ได้",
      "Strong refactoring capabilities",
      "Better code documentation",
      "Large community support",
      "Compiles to clean JavaScript"
    ],
    "cons": [
      "Additional compilation step",
      "Learning curve สำหรับ type system",
      "Can be verbose ในบาง cases",
      "Configuration complexity",
      "Type definitions บางครั้งไม่ accurate",
      "Build time overhead"
    ],
    "variables": {
      "declaration": [
        "let => ใช้ประกาศตัวแปรแบบ block-scoped",
        "const => ใช้ประกาศตัวแปรแบบ block-scoped ที่ไม่สามารถเปลี่ยนแปลงค่าได้ (ค่าคงที่)",
        "var with type annotations => ใช้ประกาศตัวแปรแบบเก่า (function-scoped) พร้อมระบุชนิดข้อมูล"
      ],
      "types": [
        "number => ตัวเลข (ทั้งจำนวนเต็มและทศนิยม)",
        "string => ข้อความ",
        "boolean => ค่าความจริง (true/false)",
        "object => วัตถุ, คู่ของ key-value",
        "array => คอลเลกชันของรายการ",
        "union types => ชนิดข้อมูลที่สามารถเป็นได้หลายประเภท",
        "interfaces => โครงสร้างที่กำหนดรูปแบบของ object"
      ],
      "examples": [
        "let name: string = 'Alice'; => ประกาศตัวแปร name เป็น string และกำหนดค่าเป็น 'Alice'",
        "const age: number = 25; => ประกาศค่าคงที่ age เป็น number และกำหนดค่าเป็น 25",
        "let isActive: boolean = true; => ประกาศตัวแปร isActive เป็น boolean และกำหนดค่าเป็น true",
        "let numbers: number[] = [1, 2, 3, 4, 5]; => ประกาศตัวแปร numbers เป็น array ของ number",
        "interface User { name: string; age: number; } => กำหนด interface ชื่อ User ที่มี property name เป็น string และ age เป็น number",
        "let user: User = { name: 'Bob', age: 30 }; => ประกาศตัวแปร user เป็นชนิด User พร้อมกำหนดคุณสมบัติ"
      ]
    },
    "functions": {
      "declaration": [
        "function with type annotations => การประกาศฟังก์ชันพร้อมระบุชนิดข้อมูลสำหรับพารามิเตอร์และค่าที่คืน"
      ],
      "examples": [
        "function greet(name: string): string { return `Hello ${name}`; } => ฟังก์ชันชื่อ greet รับพารามิเตอร์ name ชนิด string และคืนค่า string",
        "const add = (a: number, b: number): number => a + b; => Arrow function ชื่อ add รับสองตัวเลขชนิด number และคืนค่า number",
        "function fetchUser(): Promise<User> { return api.getUser(); } => ฟังก์ชัน asynchronous ชื่อ fetchUser ที่คืนค่า Promise ของ User object",
        "type Handler = (event: Event) => void; => การประกาศ type alias ชื่อ Handler สำหรับฟังก์ชันที่รับ event และไม่คืนค่า"
      ],
      "built_in": [
        "Same as JavaScript + type checking => เหมือนกับ JavaScript แต่มีการตรวจสอบชนิดข้อมูลเพิ่มเติม"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => คอมเมนต์บรรทัดเดียว",
        "/* Multi line */ => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "Same as JavaScript => เหมือนกับ JavaScript"
      ],
      "loops": [
        "Same as JavaScript => เหมือนกับ JavaScript"
      ],
      "operators": [
        "Same as JavaScript + type operators => เหมือนกับ JavaScript พร้อมกับตัวดำเนินการสำหรับ type (เช่น type assertion, optional chaining)"
      ],
      "examples": [
        "if (user?.name) { console.log(user.name); } => ใช้ optional chaining (?.) เพื่อเข้าถึง property name ของ user อย่างปลอดภัย",
        "for (const item of items) { processItem(item); } => ลูปสำหรับวนซ้ำผ่านค่าของ iterable object (เช่น array)",
        "type Status = 'loading' | 'success' | 'error'; => การประกาศ union type ชื่อ Status ที่สามารถเป็นได้ 3 ค่า",
        "const result = value as string; => Type assertion: บอกคอมไพเลอร์ว่า value มีชนิดเป็น string"
      ]
    },
    "frameworks": ["Angular", "React", "Vue.js", "Node.js", "Express", "NestJS"],
    "learning_resources": ["TypeScript Handbook", "TypeScript Deep Dive", "Programming TypeScript", "Execute Program"],
    "popularity_rank": 5,
    "salary_range": "50,000 - 140,000 บาท/เดือน"
  },
  {
    "id": 13,
    "name": "Lua",
    "slug": "lua",
    "desc": "ภาษาโปรแกรมมิ่งแบบ lightweight ที่ออกแบบมาให้ฝังตัวในแอปพลิเคชัน ใช้งานง่ายและเร็ว เหมาะสำหรับเกมและ embedded systems",
    "by": "Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes",
    "yr": "1993",
    "level": "5",
    "par": ["Imperative", "Functional", "Procedural"],
    "cateid": [4, 6],
    "logo": "/img/lua.gif",
    "uses": ["Game Scripting", "Embedded Systems", "Roblox Development", "Configuration", "Scripting APIs"],
    "pros": [
      "Very lightweight และ fast",
      "1 to embed ในแอป C/C++",
      "Simple และ clean syntax",
      "Powerful table data structure",
      "First-class functions",
      "Coroutines สำหรับ async programming",
      "Small memory footprint"
    ],
    "cons": [
      "Limited standard library",
      "1-based array indexing (แปลก)",
      "No built-in OOP support",
      "Small community เทียบกับภาษาหลัก",
      "Limited debugging tools",
      "Not suitable for large applications"
    ],
    "variables": {
      "declaration": [
        "Dynamic typing - no explicit declaration => การประกาศตัวแปรไม่ต้องระบุชนิดข้อมูล Lua จะอนุมานเอง"
      ],
      "types": [
        "nil => ไม่มีค่า",
        "boolean => ค่าความจริง (true/false)",
        "number => ตัวเลข (เป็น double-precision floating-point โดย default)",
        "string => ข้อความ",
        "function => ฟังก์ชัน",
        "userdata => ข้อมูล C/C++ ที่ถูกนำมาใช้ใน Lua",
        "thread => coroutine (สำหรับ concurrency)",
        "table => โครงสร้างข้อมูลหลักที่ใช้สำหรับ array, hash map และ object"
      ],
      "examples": [
        "name = \"Alice\" => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น \"Alice\"",
        "age = 25 => ประกาศตัวแปร age เป็นตัวเลขและกำหนดค่าเป็น 25",
        "is_active = true => ประกาศตัวแปร is_active เป็น boolean และกำหนดค่าเป็น true",
        "numbers = {1, 2, 3, 4, 5} => ประกาศ table (คล้าย array) ของตัวเลข",
        "person = {name = \"Bob\", age = 30} => ประกาศ table (คล้าย object) พร้อมกำหนดคุณสมบัติ"
      ]
    },
    "functions": {
      "declaration": [
        "function keyword => ใช้คำว่า function เพื่อประกาศฟังก์ชัน"
      ],
      "examples": [
        "function greet(name) return \"Hello \" .. name end => ฟังก์ชันชื่อ greet รับชื่อแล้วคืนค่าข้อความทักทาย",
        "local add = function(a, b) return a + b end => การกำหนด anonymous function ให้กับตัวแปร local add",
        "function processData(callback) callback(\"Data processed!\") end => ฟังก์ชันที่รับ callback function เป็นพารามิเตอร์",
        "function factorial(n) if n == 0 then return 1 else return n * factorial(n - 1) end end => ฟังก์ชัน recursive สำหรับหา factorial"
      ],
      "built_in": [
        "print() => ใช้สำหรับแสดงผลข้อมูลออกทาง console",
        "type() => ใช้สำหรับหาชนิดข้อมูลของตัวแปร",
        "tonumber() => ใช้สำหรับแปลงค่าเป็นตัวเลข",
        "tostring() => ใช้สำหรับแปลงค่าเป็นสตริง",
        "table.insert() => ใช้สำหรับเพิ่ม element เข้าไปใน table",
        "table.remove() => ใช้สำหรับลบ element ออกจาก table"
      ]
    },
    "syntax": {
      "comments": [
        "-- Single line => คอมเมนต์บรรทัดเดียว",
        "--[[ Multi line --]] => คอมเมนต์หลายบรรทัด"
      ],
      "conditions": [
        "if...then...else...end => คำสั่งเงื่อนไข",
        "if...then...elseif...then...else...end => คำสั่งเงื่อนไขหลายชั้น"
      ],
      "loops": [
        "for (numeric) => ลูปสำหรับทำซ้ำตามช่วงตัวเลข",
        "for (generic) => ลูปสำหรับวนซ้ำผ่าน element ใน iterator",
        "while...do...end => ลูปสำหรับทำซ้ำตราบใดที่เงื่อนไขเป็นจริง",
        "repeat...until => ลูปสำหรับทำซ้ำอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข"
      ],
      "operators": [
        "+ => บวก",
        "- => ลบ",
        "* => คูณ",
        "/ => หาร (ผลลัพธ์เป็น float)",
        "% => หาเศษจากการหาร",
        "^ => ยกกำลัง",
        "== => เท่ากับ",
        "~= => ไม่เท่ากับ",
        "< => น้อยกว่า",
        "> => มากกว่า",
        "and => และ (AND)",
        "or => หรือ (OR)",
        "not => ไม่ (NOT)",
        ".. => Concatenation operator (ต่อสตริง)"
      ],
      "examples": [
        "if age >= 18 then print(\"Adult\") end => ถ้า age มากกว่าหรือเท่ากับ 18 ให้แสดงคำว่า \"Adult\"",
        "for i = 1, 10 do print(i) end => ลูปที่แสดงตัวเลข 1 ถึง 10",
        "for k, v in pairs(person) do print(k, v) end => วนซ้ำใน table person และแสดง key กับ value",
        "repeat count = count + 1 until count >= 10 => ทำซ้ำจนกระทั่ง count ถึง 10"
      ]
    },
    "frameworks": ["Löve2D", "OpenResty", "Redis (scripting)"],
    "learning_resources": ["Lua.org", "Programming in Lua (first edition available online)", "Lua-Users Wiki"],
    "popularity_rank": 17,
    "salary_range": "30,000 - 90,000 บาท/เดือน"
  },
    {
      "id": 14,
      "name": "Ruby",
      "slug": "ruby",
      "desc": "ภาษาที่ออกแบบมาเพื่อความเรียบง่ายและความสุขของผู้เขียนโค้ด ใช้ใน Web Framework ชื่อดังอย่าง Ruby on Rails",
      "by": "Yukihiro Matsumoto",
      "yr": "1995",
      "level": "4",
      "par": ["Object-oriented", "Reflective"],
      "cateid": [1],
      "logo": "/img/ruby.png",
      "uses": ["Web Development", "Scripting", "Automation", "DevOps Tools"],
      "pros": [
        "Very readable และ expressive syntax",
        "Strong convention over configuration",
        "Excellent for rapid prototyping",
        "Rich ecosystem (RubyGems)",
        "Strong metaprogramming capabilities",
        "Great for web development (Rails)",
        "Developer happiness focused"
      ],
      "cons": [
        "Performance ช้ากว่าภาษา compiled",
        "GIL (Global Interpreter Lock) issues",
        "Memory consumption สูง",
        "Declining popularity",
        "Not suitable for CPU-intensive tasks",
        "Learning curve สำหรับ metaprogramming"
      ],
      "variables": {
        "declaration": ["Dynamic typing - no declaration needed"],
        "types": ["Integer", "Float", "String", "Boolean", "Array", "Hash", "Symbol"],
        "examples": [
          "name = 'Alice' => ประกาศตัวแปร name เป็นสตริง (String) และกำหนดค่าเป็น 'Alice'",
          "age = 25 => ประกาศตัวแปร age เป็นตัวเลขจำนวนเต็ม (Integer) และกำหนดค่าเป็น 25",
          "is_active = true => ประกาศตัวแปร is_active เป็นค่าบูลีน (Boolean) และกำหนดค่าเป็น true",
          "numbers = [1, 2, 3, 4, 5] => ประกาศตัวแปร numbers เป็นอาร์เรย์ (Array) ของตัวเลข",
          "person = { name: 'Bob', age: 30 } => ประกาศตัวแปร person เป็นแฮช (Hash) หรือ Dictionary ที่เก็บข้อมูลแบบ Key-Value",
          "symbol = :status => ประกาศตัวแปร symbol เป็น Symbol และกำหนดค่าเป็น :status"
        ]
      },
      "functions": {
        "declaration": ["def keyword"],
        "examples": [
          "def greet(name) \"Hello #{name}\" end => ประกาศฟังก์ชันชื่อ greet ที่รับพารามิเตอร์ name และคืนค่าสตริง 'Hello ' ตามด้วยค่า name",
          "def add(a, b = 0) a + b end => ประกาศฟังก์ชันชื่อ add ที่รับพารามิเตอร์ a และ b (b มีค่าเริ่มต้นเป็น 0) และคืนค่าผลรวมของ a และ b",
          "def calculate(&block) yield(10, 20) end => ประกาศฟังก์ชัน calculate ที่รับ block เป็นพารามิเตอร์ และเรียกใช้ block พร้อมส่งค่า 10 และ 20 เข้าไป",
          "square = ->(x) { x * x } => กำหนดตัวแปร square เป็น Lambda (ฟังก์ชันแบบไม่ระบุชื่อ) ที่รับ x และคืนค่า x คูณ x"
        ],
        "built_in": ["puts", "print", "p", "gets", "rand", "Array()", "Hash()"]
      },
      "syntax": {
        "comments": ["# Single line => คอมเมนต์บรรทัดเดียว", "=begin Multi line =end => คอมเมนต์หลายบรรทัด"],
        "conditions": ["if...elsif...else...end => คำสั่งเงื่อนไข", "unless => คำสั่งเงื่อนไข (ตรงข้ามกับ if)"],
        "loops": ["for...in => ลูปสำหรับวนซ้ำตามช่วงหรือคอลเล็กชัน", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "until => ลูปที่ทำงานจนกว่าเงื่อนไขจะเป็นจริง", "times => เมธอดสำหรับทำซ้ำตามจำนวนครั้ง", "each => เมธอดสำหรับวนซ้ำสมาชิกในคอลเล็กชัน"],
        "operators": ["+", "-", "*", "/", "%", "==", "!=", "<", ">", "&&", "||", "!"],
        "examples": [
          "if age >= 18 then puts 'Adult' end => ถ้าตัวแปร age มีค่ามากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
          "10.times { |i| puts i } => ทำซ้ำ 10 ครั้ง แต่ละครั้งจะพิมพ์ค่า i (จาก 0 ถึง 9)",
          "[1,2,3].each { |n| puts n } => วนซ้ำในอาร์เรย์ [1,2,3] และพิมพ์ค่า n แต่ละตัว",
          "puts 'Adult' if age >= 18 => พิมพ์ 'Adult' ถ้าตัวแปร age มีค่ามากกว่าหรือเท่ากับ 18 (เงื่อนไขแบบสั้น)"
        ]
      },
      "frameworks": ["Ruby on Rails", "Sinatra", "Hanami", "Roda", "Grape", "Jekyll"],
      "learning_resources": ["Ruby Documentation", "The Well-Grounded Rubyist", "Programming Ruby", "Ruby Koans"],
      "popularity_rank": 16,
      "salary_range": "45,000 - 130,000 บาท/เดือน"
    },
    {
      "id": 15,
      "name": "Assembly",
      "slug": "assembly",
      "desc": "ภาษาโปรแกรมระดับต่ำที่ใช้ในการสื่อสารโดยตรงกับฮาร์ดแวร์ มีความเร็วและควบคุมได้สูงแต่เขียนยาก",
      "by": "Various (CPU-specific)",
      "yr": "1949",
      "level": "1",
      "par": ["Imperative"],
      "cateid": [4],
      "logo": "/img/asm.png",
      "uses": ["Embedded Systems", "OS Kernels", "Reverse Engineering", "Performance Optimization"],
      "pros": [
        "Maximum performance และ efficiency",
        "Complete hardware control",
        "Minimal memory usage",
        "Direct CPU instruction mapping",
        "No runtime overhead",
        "Essential for system programming",
        "Understanding computer architecture"
      ],
      "cons": [
        "Extremely difficult to learn และ write",
        "Platform-specific code",
        "Time-consuming development",
        "Difficult to debug และ maintain",
        "No portability",
        "Requires deep hardware knowledge",
        "Error-prone programming"
      ],
      "variables": {
        "declaration": ["Registers และ memory locations"],
        "types": ["byte", "word", "dword", "qword"],
        "examples": [
          "mov eax, 25          ; Load 25 into EAX register => โหลดค่า 25 เข้าไปใน Register EAX",
          "mov [variable], eax  ; Store EAX into memory => เก็บค่าจาก Register EAX ลงในตำแหน่งหน่วยความจำที่ชื่อ variable",
          "variable db 'Hello'  ; Define byte string => กำหนดตัวแปรชื่อ variable เป็นสตริงแบบไบต์ (byte string) โดยมีค่า 'Hello'",
          "number dw 1234       ; Define word (16-bit) => กำหนดตัวแปรชื่อ number เป็น Word (16-bit) โดยมีค่า 1234",
          "array dd 1,2,3,4     ; Define dword array => กำหนดตัวแปรชื่อ array เป็น Dword (32-bit) Array โดยมีค่า 1,2,3,4"
        ]
      },
      "functions": {
        "declaration": ["Labels และ procedures"],
        "examples": [
          "add_numbers: mov eax, ebx add eax, ecx ret => กำหนด Label (จุดเริ่มต้นฟังก์ชัน) ชื่อ add_numbers, ย้ายค่าจาก ebx ไป eax, เพิ่มค่า ecx เข้าไปใน eax, และกลับ (ret) จากฟังก์ชัน",
          "print_hello: mov eax, 4 mov ebx, 1 int 0x80 ret => กำหนด Label ชื่อ print_hello, กำหนดค่าใน Register ต่างๆ เพื่อเตรียมเรียก System Call สำหรับพิมพ์ข้อความ และกลับจากฟังก์ชัน",
          "main: call add_numbers call print_hello => กำหนด Label ชื่อ main, เรียกฟังก์ชัน add_numbers และเรียกฟังก์ชัน print_hello",
          "factorial: cmp eax, 1 jle base_case => กำหนด Label ชื่อ factorial, เปรียบเทียบค่าใน eax กับ 1, ถ้า eax น้อยกว่าหรือเท่ากับ 1 ให้กระโดดไปยัง Label base_case"
        ],
        "built_in": ["CPU instructions: mov, add, sub, mul, div, cmp, jmp, call, ret"]
      },
      "syntax": {
        "comments": ["; Single line comments => คอมเมนต์บรรทัดเดียว"],
        "conditions": ["Conditional jumps based on flags => การกระโดดแบบมีเงื่อนไขตามค่า Flag ของ CPU (เช่น Zero Flag, Carry Flag)"],
        "loops": ["Manual loop construction with jumps => การสร้างลูปด้วยการใช้คำสั่งกระโดด (jmp) ด้วยตัวเอง"],
        "operators": ["CPU arithmetic และ logic instructions => คำสั่งทางคณิตศาสตร์และตรรกะของ CPU"],
        "examples": [
          "cmp eax, 18  ; Compare EAX with 18 => เปรียบเทียบค่าใน Register EAX กับ 18",
          "jge adult    ; Jump if greater or equal => ถ้าค่าใน EAX มากกว่าหรือเท่ากับ 18 ให้กระโดดไปที่ Label ชื่อ adult",
          "loop_start: dec ecx jnz loop_start => ลดค่า ecx ลง 1, ถ้า ecx ไม่เป็นศูนย์ ให้กระโดดกลับไปที่ loop_start (สร้างลูปนับถอยหลัง)",
          "test eax, eax jz zero_case => ทำการ AND bitwise ระหว่าง EAX กับ EAX (เพื่อเซ็ต Flag), ถ้าผลลัพธ์เป็นศูนย์ (Zero Flag ถูกเซ็ต) ให้กระโดดไปที่ Label zero_case"
        ]
      },
      "frameworks": ["MASM", "NASM", "GAS", "TASM", "FASM"],
      "learning_resources": ["Assembly Language Step-by-Step", "Programming from the Ground Up", "The Art of Assembly", "x86 Assembly Guide"],
      "popularity_rank": 20,
      "salary_range": "60,000 - 200,000 บาท/เดือน"
    },
    {
      "id": 16,
      "name": "Prolog",
      "slug": "prolog",
      "desc": "ภาษาโปรแกรมเชิงตรรกะ เหมาะกับการเขียนระบบ Expert Systems, AI และ Natural Language Processing",
      "by": "Alain Colmerauer",
      "yr": "1972",
      "level": "5",
      "par": ["Logic"],
      "cateid": [3],
      "logo": "/img/prolang.png",
      "uses": ["AI", "Expert Systems", "NLP", "Symbolic Reasoning"],
      "pros": [
        "Excellent for logical reasoning",
        "Automatic backtracking",
        "Pattern matching capabilities",
        "Good for AI และ NLP applications",
        "Declarative programming style",
        "Built-in unification algorithm",
        "Suitable for complex rule systems"
      ],
      "cons": [
        "Very different programming paradigm",
        "Limited practical applications",
        "Performance issues",
        "Debugging complexity",
        "Small community",
        "Not suitable for general programming",
        "Steep learning curve"
      ],
      "variables": {
        "declaration": ["Variables start with uppercase or _"],
        "types": ["atoms", "numbers", "variables", "compound terms"],
        "examples": [
          "parent(tom, bob).     % Facts => ประกาศ Fact ว่า tom เป็น parent ของ bob (parent คือความสัมพันธ์)",
          "parent(bob, ann).     % tom is parent of bob => ประกาศ Fact ว่า bob เป็น parent ของ ann",
          "X = 25               % Variable binding => กำหนด (ผูก) ตัวแปร X ให้มีค่าเป็น 25",
          "Name = alice          % Atom assignment => กำหนด (ผูก) ตัวแปร Name ให้มีค่าเป็น atom 'alice'",
          "List = [1, 2, 3, 4]   % List structure => กำหนด (ผูก) ตัวแปร List ให้เป็นโครงสร้างแบบ List ที่มีสมาชิก 1, 2, 3, 4"
        ]
      },
      "functions": {
        "declaration": ["Rules และ facts"],
        "examples": [
          "grandparent(X, Z) :- parent(X, Y), parent(Y, Z). => กำหนด Rule ว่า X เป็น grandparent ของ Z ถ้า X เป็น parent ของ Y และ Y เป็น parent ของ Z",
          "factorial(0, 1). => กำหนด Fact ว่า factorial ของ 0 คือ 1 (Base case สำหรับฟังก์ชัน factorial)",
          "factorial(N, F) :- N > 0, N1 is N-1, factorial(N1, F1), F is N * F1. => กำหนด Rule สำหรับ factorial: factorial ของ N คือ F ถ้า N มากกว่า 0, N1 คือ N-1, factorial ของ N1 คือ F1, และ F คือ N คูณ F1",
          "member(X, [X|_]). => กำหนด Rule ว่า X เป็นสมาชิกของ List ถ้า X เป็น Head ของ List"
        ],
        "built_in": ["is/2", "=../2", "findall/3", "bagof/3", "setof/3", "assert/1", "retract/1"]
      },
      "syntax": {
        "comments": ["% Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
        "conditions": ["Built into logic structure => เงื่อนไขถูกฝังอยู่ในโครงสร้างตรรกะของ Rule และ Query"],
        "loops": ["Recursion และ backtracking => ใช้การเรียกซ้ำ (Recursion) และการย้อนกลับ (Backtracking) ในการวนซ้ำและการหาคำตอบ"],
        "operators": [":-", "=", "is", "=:=", "=\\=", "==", "\\=="],
        "examples": [
          "likes(mary, food). => Fact: Mary ชอบอาหาร",
          "likes(mary, wine) :- red(wine), dry(wine). => Rule: Mary ชอบไวน์ ถ้าไวน์นั้นเป็นสีแดงและแห้ง",
          "?- likes(mary, X).  % Query => Query: Mary ชอบอะไรบ้าง?",
          "append([], L, L). append([H|T], L, [H|R]) :- append(T, L, R). => Rule สำหรับการต่อ List: List ว่างต่อกับ L ได้ L. การต่อ [H|T] กับ L ได้ [H|R] ถ้า T ต่อกับ L ได้ R"
        ]
      },
      "frameworks": ["SWI-Prolog", "GNU Prolog", "YAP", "SICStus Prolog"],
      "learning_resources": ["Programming in Prolog", "The Art of Prolog", "Learn Prolog Now!", "Prolog Programming for AI"],
      "popularity_rank": 19,
      "salary_range": "50,000 - 150,000 บาท/เดือน"
    },
    {
      "id": 17,
      "name": "R",
      "slug": "r",
      "desc": "ภาษาโปรแกรมที่นิยมใช้ในงานสถิติ การวิเคราะห์ข้อมูล และงานด้าน Data Science",
      "by": "Ross Ihaka & Robert Gentleman",
      "yr": "1993",
      "level": "5",
      "par": ["Functional", "Vectorized"],
      "cateid": [3],
      "logo": "/img/r.png",
      "uses": ["Statistics", "Data Analysis", "Machine Learning", "Data Visualization"],
      "pros": [
        "Excellent สำหรับ statistical analysis",
        "Rich ecosystem สำหรับ data science",
        "Outstanding data visualization (ggplot2)",
        "Large statistical packages library",
        "Strong academic และ research support",
        "Vectorized operations",
        "Interactive data exploration"
      ],
      "cons": [
        "Steep learning curve สำหรับ non-statisticians",
        "Memory management issues กับ large datasets",
        "Performance limitations",
        "Inconsistent syntax",
        "Not suitable for production applications",
        "Package dependency complexity"
      ],
      "variables": {
        "declaration": ["Assignment with <- or ="],
        "types": ["numeric", "character", "logical", "factor", "vector", "list", "data.frame"],
        "examples": [
          "name <- 'Alice' => กำหนดตัวแปร name เป็นสตริง 'Alice'",
          "age <- 25 => กำหนดตัวแปร age เป็นตัวเลข 25",
          "is_active <- TRUE => กำหนดตัวแปร is_active เป็นค่าตรรกะ TRUE",
          "numbers <- c(1, 2, 3, 4, 5) => กำหนดตัวแปร numbers เป็นเวกเตอร์ (Vector) ที่มีค่า 1, 2, 3, 4, 5",
          "person <- list(name='Bob', age=30) => กำหนดตัวแปร person เป็น List ที่มีสองสมาชิกคือ name='Bob' และ age=30",
          "df <- data.frame(x=1:5, y=6:10) => กำหนดตัวแปร df เป็น Data Frame ที่มีคอลัมน์ x และ y"
        ]
      },
      "functions": {
        "declaration": ["function() keyword"],
        "examples": [
          "greet <- function(name) { paste('Hello', name) } => ประกาศฟังก์ชันชื่อ greet ที่รับ name และคืนค่าสตริง 'Hello ' ตามด้วย name",
          "add <- function(a, b = 0) { return(a + b) } => ประกาศฟังก์ชันชื่อ add ที่รับ a และ b (b มีค่าเริ่มต้นเป็น 0) และคืนค่าผลรวม",
          "calculate_mean <- function(x) { sum(x) / length(x) } => ประกาศฟังก์ชัน calculate_mean ที่รับเวกเตอร์ x และคืนค่าเฉลี่ยของ x",
          "factorial <- function(n) { if(n <= 1) 1 else n * factorial(n-1) } => ประกาศฟังก์ชัน factorial แบบเรียกซ้ำ (recursive)"
        ],
        "built_in": ["mean()", "sum()", "length()", "str()", "summary()", "head()", "tail()"]
      },
      "syntax": {
        "comments": ["# Single line => คอมเมนต์บรรทัดเดียว"],
        "conditions": ["if...else => คำสั่งเงื่อนไข", "ifelse() => ฟังก์ชันเงื่อนไขแบบเวกเตอร์"],
        "loops": ["for => ลูปสำหรับวนซ้ำตามลำดับ", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "repeat => ลูปที่ทำงานซ้ำไปเรื่อยๆ จนกว่าจะมีการหยุดด้วย break", "apply family => กลุ่มฟังก์ชันสำหรับวนซ้ำและประมวลผลข้อมูลในโครงสร้างต่างๆ เช่น `lapply`, `sapply`"],
        "operators": ["+", "-", "*", "/", "^", "==", "!=", "<", ">", "&", "|", "!"],
        "examples": [
          "if (age >= 18) { print('Adult') } => ถ้า age มีค่ามากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
          "for (i in 1:10) { print(i) } => วนลูปให้ i มีค่าตั้งแต่ 1 ถึง 10 และพิมพ์ i ในแต่ละรอบ",
          "while (condition) { # code } => วนลูปตราบเท่าที่ condition เป็นจริง",
          "result <- ifelse(age >= 18, 'Adult', 'Minor') => กำหนด result เป็น 'Adult' ถ้า age >= 18 ไม่อย่างนั้นเป็น 'Minor'"
        ]
      },
      "frameworks": ["ggplot2", "dplyr", "tidyr", "shiny", "caret", "randomForest", "plotly"],
      "learning_resources": ["R for Data Science", "The R Book", "Advanced R", "R Graphics Cookbook"],
      "popularity_rank": 11,
      "salary_range": "50,000 - 160,000 บาท/เดือน"
    },
    {
      "id": 18,
      "name": "Haskell",
      "slug": "haskell",
      "desc": "ภาษา Functional Programming ที่มีความบริสุทธิ์สูง นิยมใช้ในงานวิชาการและการพัฒนาระบบที่ต้องการความถูกต้องทางตรรกะ",
      "by": "Simon Peyton Jones et al.",
      "yr": "1990",
      "level": "5",
      "par": ["Pure Functional", "Lazy Evaluation"],
      "cateid": [3],
      "logo": "/img/haskell.png",
      "uses": ["Academic Research", "Compilers", "Formal Verification", "Blockchain"],
      "pros": [
        "Pure functional programming - no side effects",
        "Strong type system prevents many bugs",
        "Lazy evaluation",
        "Excellent for mathematical computations",
        "Pattern matching และ algebraic data types",
        "Highly composable code",
        "Great for concurrent programming"
      ],
      "cons": [
        "Very steep learning curve",
        "Different mindset จาก imperative languages",
        "Limited job market",
        "Performance can be unpredictable",
        "Debugging functional code is challenging",
        "Small community เทียบกับ mainstream languages"
      ],
      "variables": {
        "declaration": ["Immutable bindings"],
        "types": ["Int", "Float", "Char", "Bool", "String", "List", "Maybe", "Either"],
        "examples": [
          "name = \"Alice\" => กำหนดตัวแปร name (ซึ่งเป็น immutable) ให้มีค่าเป็นสตริง \"Alice\"",
          "age = 25 => กำหนดตัวแปร age ให้มีค่าเป็นตัวเลขจำนวนเต็ม 25",
          "isActive = True => กำหนดตัวแปร isActive ให้มีค่าเป็นบูลีน True",
          "numbers = [1, 2, 3, 4, 5] => กำหนดตัวแปร numbers ให้เป็น List ของตัวเลข",
          "person = (\"Bob\", 30) => กำหนดตัวแปร person ให้เป็น Tuple (คู่) ที่มีสตริง \"Bob\" และตัวเลข 30",
          "maybeValue = Just 42 => กำหนดตัวแปร maybeValue ให้เป็น Maybe Type ที่มีค่า 42 (ระบุว่ามีค่า)"
        ]
      },
      "functions": {
        "declaration": ["Function definitions"],
        "examples": [
          "greet name = \"Hello \" ++ name => ประกาศฟังก์ชัน greet ที่รับพารามิเตอร์ name และคืนค่าสตริง 'Hello ' ต่อด้วย name",
          "add a b = a + b => ประกาศฟังก์ชัน add ที่รับพารามิเตอร์ a และ b และคืนค่าผลรวมของ a และ b",
          "factorial 0 = 1 => ประกาศ base case ของฟังก์ชัน factorial: factorial ของ 0 คือ 1",
          "factorial n = n * factorial (n - 1) => ประกาศ recursive case ของฟังก์ชัน factorial: factorial ของ n คือ n คูณ factorial ของ (n-1)",
          "map' f [] = [] => Base case ของฟังก์ชัน map' (สร้างขึ้นเอง): ถ้า List ว่างเปล่า จะคืน List ว่างเปล่า",
          "map' f (x:xs) = f x : map' f xs => Recursive case ของ map': นำฟังก์ชัน f ไปใช้กับ x และนำผลลัพธ์ไปต่อกับผลลัพธ์ของการเรียก map' ซ้ำกับ xs"
        ],
        "built_in": ["map", "filter", "fold", "length", "head", "tail", "take", "drop"]
      },
      "syntax": {
        "comments": ["-- Single line => คอมเมนต์บรรทัดเดียว", "{- Multi line -} => คอมเมนต์หลายบรรทัด"],
        "conditions": ["if...then...else => คำสั่งเงื่อนไข", "guards => การกำหนดเงื่อนไขให้กับฟังก์ชันในรูปแบบ Pattern Matching", "case...of => คำสั่งสำหรับการจับคู่รูปแบบ (Pattern Matching)"],
        "loops": ["Recursion และ higher-order functions => ใช้การเรียกซ้ำ (Recursion) และฟังก์ชันลำดับสูง (Higher-order functions) แทนลูปทั่วไป"],
        "operators": ["+", "-", "*", "/", "==", "/=", "<", ">", "&&", "||", "++", ":", "!!"],
        "examples": [
          "if age >= 18 then \"Adult\" else \"Minor\" => ถ้า age มากกว่าหรือเท่ากับ 18 คืนค่า \"Adult\" ไม่อย่างนั้นคืนค่า \"Minor\"",
          "factorial n | n <= 1 = 1 | otherwise = n * factorial (n-1) => ฟังก์ชัน factorial ที่ใช้ guards: ถ้า n น้อยกว่าหรือเท่ากับ 1 คืน 1, ไม่อย่างนั้นคืน n คูณ factorial ของ (n-1)",
          "case maybe_value of Just x -> x; Nothing -> 0 => ใช้ case statement เพื่อจับคู่ Maybe Type: ถ้าเป็น Just x ให้คืนค่า x, ถ้าเป็น Nothing ให้คืน 0",
          "squares = [x^2 | x <- [1..10]] => สร้าง List ของกำลังสองของตัวเลขตั้งแต่ 1 ถึง 10 (List Comprehension)"
        ]
      },
      "frameworks": ["Yesod", "Snap", "Servant", "Persistent", "Conduit", "STM"],
      "learning_resources": ["Learn You a Haskell", "Real World Haskell", "Haskell Programming from First Principles", "What I Wish I Knew When Learning Haskell"],
      "popularity_rank": 17,
      "salary_range": "60,000 - 180,000 บาท/เดือน"
    },
    {
      "id": 19,
      "name": "SQL",
      "slug": "sql",
      "desc": "ภาษาสำหรับจัดการฐานข้อมูลเชิงสัมพันธ์ (Relational Database) ใช้ในการดึง แทรก ลบ และอัปเดตข้อมูล",
      "by": "Donald D. Chamberlin และ Raymond F. Boyce",
      "yr": "1974",
      "level": "3",
      "par": ["Declarative"],
      "cateid": [4],
      "logo": "/img/sql.png",
      "uses": ["จัดการฐานข้อมูล", "Business Intelligence", "Data Analysis", "Data Warehouse"],
      "pros": [
        "ใช้งานง่าย มีโครงสร้างชัดเจน",
        "เหมาะสำหรับการจัดการข้อมูลขนาดใหญ่",
        "สามารถใช้กับระบบฐานข้อมูลหลากหลาย",
        "คำสั่งมีความเป็นมาตรฐานสากล"
      ],
      "cons": [
        "ไม่ใช่ภาษาโปรแกรมทั่วไป ไม่รองรับ logic ซับซ้อน",
        "ประสิทธิภาพขึ้นอยู่กับ RDBMS ที่ใช้",
        "ไม่เหมาะกับงานที่ต้องการ Process มาก"
      ],
      "variables": {
        "declaration": ["ไม่มีแบบภาษาอื่น ใช้ alias หรือ column name แทน"],
        "types": ["INT", "VARCHAR", "TEXT", "DATE", "BOOLEAN", "DECIMAL"],
        "examples": [
          "SELECT name FROM users; => เลือกคอลัมน์ name จากตาราง users",
          "INSERT INTO users (name, age) VALUES ('John', 25); => แทรกข้อมูลใหม่ 'John' และ 25 เข้าไปในคอลัมน์ name และ age ของตาราง users",
          "UPDATE users SET age = 30 WHERE name = 'John'; => อัปเดตค่า age เป็น 30 ในตาราง users สำหรับแถวที่ name เป็น 'John'"
        ]
      },
      "functions": {
        "declaration": ["ฟังก์ชันในตัว (Built-in)"],
        "examples": [
          "SELECT COUNT(*) FROM users; => นับจำนวนแถวทั้งหมดในตาราง users",
          "SELECT UPPER(name) FROM users; => เลือกคอลัมน์ name จากตาราง users โดยเปลี่ยนตัวอักษรเป็นตัวพิมพ์ใหญ่ทั้งหมด",
          "SELECT AVG(score) FROM grades; => เลือกค่าเฉลี่ยของคอลัมน์ score จากตาราง grades"
        ],
        "built_in": ["COUNT()", "SUM()", "AVG()", "MAX()", "MIN()", "NOW()", "LEN()", "UPPER()", "LOWER()"]
      },
      "syntax": {
        "comments": ["-- Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
        "conditions": ["WHERE => เงื่อนไขในการกรองข้อมูล", "CASE WHEN => คำสั่งเงื่อนไขที่ใช้ในการกำหนดค่าตามเงื่อนไขที่กำหนด"],
        "loops": ["(ไม่มีโดยตรงใน SQL มาตรฐาน) => SQL มาตรฐานไม่มีคำสั่ง Loop โดยตรง แต่บาง RDBMS มี Extension"],
        "operators": ["=", "!=", "<", ">", "<=", ">=", "AND", "OR", "NOT", "LIKE", "IN", "BETWEEN"],
        "examples": [
          "SELECT * FROM orders WHERE price > 100; => เลือกทุกคอลัมน์จากตาราง orders โดยมีเงื่อนไขว่า price ต้องมากกว่า 100",
          "SELECT name FROM users WHERE age BETWEEN 18 AND 30; => เลือกคอลัมน์ name จากตาราง users โดยมีเงื่อนไขว่า age อยู่ระหว่าง 18 ถึง 30"
        ]
      },
      "frameworks": ["SQL Server", "MySQL", "PostgreSQL", "SQLite", "Oracle"],
      "learning_resources": ["W3Schools SQL", "SQLZoo", "Mode SQL Tutorial", "LeetCode SQL"],
      "popularity_rank": 3,
      "salary_range": "35,000 - 100,000 บาท/เดือน"
    },
    {
      "id": 20,
      "name": "PHP",
      "slug": "php",
      "desc": "ภาษาสคริปต์ฝั่งเซิร์ฟเวอร์ที่ได้รับความนิยมสูง ใช้สร้างเว็บไซต์ไดนามิก เช่น WordPress, Facebook รุ่นแรก",
      "by": "Rasmus Lerdorf",
      "yr": "1995",
      "level": "3",
      "par": ["Imperative", "Object-oriented", "Scripting"],
      "cateid": [1],
      "logo": "/img/php.png",
      "uses": ["เว็บไซต์", "ระบบจัดการเนื้อหา (CMS)", "Web API", "Backend"],
      "pros": [
        "เรียนรู้ได้ง่าย",
        "มี Framework และ CMS มากมาย (เช่น Laravel, WordPress)",
        "ทำงานร่วมกับ MySQL ได้ดี",
        "รันบนเซิร์ฟเวอร์ได้เกือบทุกที่"
      ],
      "cons": [
        "โครงสร้างไม่เป็นระเบียบในโปรเจกต์ขนาดใหญ่",
        "ประสิทธิภาพต่ำเมื่อเทียบกับภาษาใหม่",
        "มีช่องโหว่หากเขียนไม่ปลอดภัย"
      ],
      "variables": {
        "declaration": ["$variableName"],
        "types": ["int", "float", "string", "bool", "array", "object", "null"],
        "examples": [
          "$name = 'John'; => ประกาศตัวแปร $name เป็นสตริงและกำหนดค่าเป็น 'John'",
          "$age = 30; => ประกาศตัวแปร $age เป็นตัวเลขจำนวนเต็มและกำหนดค่าเป็น 30",
          "$isActive = true; => ประกาศตัวแปร $isActive เป็นบูลีนและกำหนดค่าเป็น true",
          "$items = [1, 2, 3]; => ประกาศตัวแปร $items เป็นอาร์เรย์ที่มีค่า 1, 2, 3"
        ]
      },
      "functions": {
        "declaration": ["function functionName($param)"],
        "examples": [
          "function greet($name) { return 'Hello ' . $name; } => ประกาศฟังก์ชันชื่อ greet ที่รับพารามิเตอร์ $name และคืนค่าสตริง 'Hello ' ต่อด้วยค่า $name",
          "$sum = fn($a, $b) => $a + $b; => กำหนดตัวแปร $sum เป็น Arrow Function ที่รับ $a และ $b และคืนค่าผลรวม"
        ],
        "built_in": ["echo", "isset()", "empty()", "strlen()", "array_merge()", "json_encode()"]
      },
      "syntax": {
        "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด", "# Single line (Unix-style) => คอมเมนต์บรรทัดเดียว (สไตล์ Unix)"],
        "conditions": ["if...else => คำสั่งเงื่อนไข", "switch => คำสั่งเลือกเงื่อนไขหลายกรณี"],
        "loops": ["for => ลูปสำหรับวนซ้ำตามจำนวนครั้ง", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "do...while => ลูปที่ทำงานอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข", "foreach => ลูปสำหรับวนซ้ำสมาชิกในอาร์เรย์หรือออบเจกต์"],
        "operators": ["+", "-", "*", "/", "==", "===", "!=", "&&", "||", "."],
        "examples": [
          "if ($age >= 18) { echo 'Adult'; } => ถ้า $age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
          "foreach ($items as $item) { echo $item; } => วนซ้ำในอาร์เรย์ $items และพิมพ์ค่า $item แต่ละตัว"
        ]
      },
      "frameworks": ["Laravel", "Symfony", "CodeIgniter", "WordPress"],
      "learning_resources": ["PHP Manual", "W3Schools PHP", "Laracasts", "GeeksforGeeks"],
      "popularity_rank": 9,
      "salary_range": "30,000 - 90,000 บาท/เดือน"
    },
    {
      "id": 21,
      "name": "Objective-C",
      "slug": "objective-c",
      "desc": "ภาษาที่ Apple ใช้พัฒนา macOS และ iOS ก่อน Swift จะเข้ามาแทนที่ แต่ยังคงใช้ในระบบเดิมจำนวนมาก",
      "by": "Brad Cox และ Tom Love",
      "yr": "1984",
      "level": "4",
      "par": ["Object-oriented", "Imperative"],
      "cateid": [3],
      "logo": "/img/obj-c.jpg",
      "uses": ["iOS/macOS Apps", "ระบบ Apple Legacy", "Cocoa / Cocoa Touch"],
      "pros": [
        "ทำงานร่วมกับ C ได้อย่างราบรื่น",
        "เป็นรากฐานของแอป iOS/macOS จำนวนมาก",
        "มี Framework สนับสนุนอย่าง Foundation และ UIKit"
      ],
      "cons": [
        "ซินแทกซ์ยุ่งยาก",
        "ยากต่อการเรียนรู้เมื่อเทียบกับ Swift",
        "คอมมูนิตี้ลดลงเรื่อย ๆ"
      ],
      "variables": {
        "declaration": ["NSString *", "int", "BOOL"],
        "types": ["NSString", "int", "float", "BOOL", "NSArray", "NSDictionary"],
        "examples": [
          "NSString *name = @\"Alice\"; => ประกาศตัวแปร name เป็นประเภท NSString (ออบเจกต์สตริง) และกำหนดค่าเป็น \"Alice\"",
          "int age = 25; => ประกาศตัวแปร age เป็นตัวเลขจำนวนเต็ม (int) และกำหนดค่าเป็น 25",
          "BOOL isActive = YES; => ประกาศตัวแปร isActive เป็นบูลีน (BOOL) และกำหนดค่าเป็น YES (จริง)"
        ]
      },
      "functions": {
        "declaration": ["- (returnType)methodName:(paramType)param"],
        "examples": [
          "- (void)sayHello { NSLog(@\"Hello\"); } => ประกาศเมธอดอินสแตนซ์ชื่อ sayHello ที่ไม่คืนค่า (void) และพิมพ์ 'Hello' ออกทางคอนโซล",
          "- (int)add:(int)a with:(int)b { return a + b; } => ประกาศเมธอดอินสแตนซ์ชื่อ add ที่รับพารามิเตอร์ int a และ int b และคืนค่าผลรวมเป็น int"
        ],
        "built_in": ["NSLog()", "NSArray", "NSDictionary", "NSString methods"]
      },
      "syntax": {
        "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
        "conditions": ["if...else => คำสั่งเงื่อนไข", "switch => คำสั่งเลือกเงื่อนไขหลายกรณี"],
        "loops": ["for => ลูปสำหรับวนซ้ำตามจำนวนครั้ง", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "do...while => ลูปที่ทำงานอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข", "for...in => ลูปสำหรับวนซ้ำสมาชิกในคอลเล็กชัน (ใช้กับ NSEnumerator)"],
        "operators": ["+", "-", "*", "/", "==", "!=", "&&", "||"],
        "examples": [
          "if (age >= 18) { NSLog(@\"Adult\"); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
          "for (int i = 0; i < 5; i++) { NSLog(@\"%d\", i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
        ]
      },
      "frameworks": ["Foundation", "UIKit", "Cocoa", "Cocoa Touch"],
      "learning_resources": ["Apple Developer Docs", "RayWenderlich.com", "Objc.io"],
      "popularity_rank": 25,
      "salary_range": "40,000 - 100,000 บาท/เดือน"
    },
    {
      "id": 22,
      "name": "Scala",
      "slug": "scala",
      "desc": "ภาษาแบบ Functional + OOP ที่ทำงานบน JVM ใช้กับ Big Data และระบบ Enterprise ระดับสูง",
      "by": "Martin Odersky",
      "yr": "2004",
      "level": "5",
      "par": ["Functional", "Object-oriented"],
      "cateid": [2, 4],
      "logo": "/img/scala.png",
      "uses": ["Big Data (Apache Spark)", "Web Backend", "Distributed Systems", "JVM-based Apps"],
      "pros": [
        "สนับสนุน Functional และ OOP พร้อมกัน",
        "ทำงานร่วมกับ Java ได้",
        "เหมาะกับ Big Data (Spark)",
        "มี Type Inference ที่ทรงพลัง"
      ],
      "cons": [
        "มี learning curve ที่สูง",
        "คอมไพล์ช้า",
        "โค้ดอ่านยากสำหรับมือใหม่"
      ],
      "variables": {
        "declaration": ["val", "var"],
        "types": ["Int", "String", "Boolean", "List", "Map", "Option"],
        "examples": [
          "val name = \"Alice\" => ประกาศตัวแปร name เป็น immutable (เปลี่ยนค่าไม่ได้) และกำหนดค่าเป็นสตริง \"Alice\"",
          "var age = 30 => ประกาศตัวแปร age เป็น mutable (เปลี่ยนค่าได้) และกำหนดค่าเป็นตัวเลข 30",
          "val list = List(1, 2, 3) => ประกาศตัวแปร list เป็น immutable List ที่มีค่า 1, 2, 3"
        ]
      },
      "functions": {
        "declaration": ["def functionName(params): ReturnType"],
        "examples": [
          "def add(a: Int, b: Int): Int = a + b => ประกาศฟังก์ชัน add ที่รับพารามิเตอร์ a และ b ชนิด Int และคืนค่าเป็น Int โดยคืนค่าผลรวม",
          "val greet = (name: String) => s\"Hello $name\" => กำหนดตัวแปร greet เป็นฟังก์ชัน (Lambda/Anonymous function) ที่รับ name ชนิด String และคืนค่าสตริง 'Hello ' ตามด้วย name"
        ],
        "built_in": ["map()", "filter()", "reduce()", "println()", "Option", "match"]
      },
      "syntax": {
        "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
        "conditions": ["if...else => คำสั่งเงื่อนไข", "match => คำสั่งสำหรับจับคู่รูปแบบ (Pattern Matching)"],
        "loops": ["for => ลูปสำหรับวนซ้ำ", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "foreach => เมธอดสำหรับวนซ้ำสมาชิกในคอลเล็กชัน"],
        "operators": ["+", "-", "*", "/", "==", "!=", "&&", "||"],
        "examples": [
          "if (age > 18) println(\"Adult\") => ถ้า age มากกว่า 18 ให้พิมพ์ \"Adult\"",
          "list.foreach(println) => วนซ้ำใน list และพิมพ์สมาชิกแต่ละตัวออกไป"
        ]
      },
      "frameworks": ["Play", "Akka", "Spark", "Scalatra"],
      "learning_resources": ["Scala-lang.org", "Rock the JVM", "Coursera Functional Programming in Scala"],
      "popularity_rank": 23,
      "salary_range": "50,000 - 150,000 บาท/เดือน"
    },
    {
      "id": 23,
      "name": "Shell",
      "slug": "shell",
      "desc": "ภาษาสคริปต์ที่ใช้ในการควบคุมระบบ Unix/Linux มักเขียนด้วย Bash หรือ sh ใช้ในการอัตโนมัติงาน DevOps และ System Admin",
      "by": "Brian Fox (GNU Bash)",
      "yr": "1989",
      "level": "2",
      "par": ["Scripting", "Procedural"],
      "cateid": [5],
      "logo": "/img/bash.jfif",
      "uses": ["ระบบอัตโนมัติ", "DevOps", "System Administration", "CI/CD"],
      "pros": [
        "เหมาะกับการเขียนสคริปต์อัตโนมัติ",
        "ใช้ร่วมกับ Linux command ได้",
        "มีอยู่ใน Unix/Linux เกือบทุกระบบ"
      ],
      "cons": [
        "ไม่มีระบบ type ที่ชัดเจน",
        "ไม่เหมาะกับโปรแกรมซับซ้อน",
        "Debug ยาก และ error message ไม่ชัด"
      ],
      "variables": {
        "declaration": ["var=value"],
        "types": ["string (ทั้งหมดเป็น string โดยปริยาย)"],
        "examples": [
          "name=\"Alice\" => กำหนดตัวแปร name เป็นสตริง 'Alice'",
          "age=25 => กำหนดตัวแปร age เป็นสตริง '25' (ใน Shell ทุกอย่างเป็นสตริงโดยปริยาย)"
        ]
      },
      "functions": {
        "declaration": ["function name { commands }"],
        "examples": [
          "greet() { echo \"Hello $1\"; } => ประกาศฟังก์ชันชื่อ greet ที่พิมพ์ 'Hello' ตามด้วยพารามิเตอร์ตัวแรก ($1)",
          "add() { echo $(($1 + $2)); } => ประกาศฟังก์ชันชื่อ add ที่พิมพ์ผลรวมของพารามิเตอร์ตัวแรก ($1) และตัวที่สอง ($2) โดยใช้การคำนวณทางคณิตศาสตร์"
        ],
        "built_in": ["echo", "read", "if", "for", "while", "test", "grep", "awk"]
      },
      "syntax": {
        "comments": ["# Single line => คอมเมนต์บรรทัดเดียว"],
        "conditions": ["if...then...else => คำสั่งเงื่อนไข", "case...esac => คำสั่งเลือกเงื่อนไขหลายกรณี"],
        "loops": ["for => ลูปสำหรับวนซ้ำตามรายการหรือช่วงตัวเลข", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "until => ลูปที่ทำงานจนกว่าเงื่อนไขจะเป็นจริง"],
        "operators": ["=", "==", "!=", "-lt", "-gt", "&&", "||"],
        "examples": [
          "if [ $age -gt 18 ]; then echo \"Adult\"; fi => ถ้าตัวแปร $age มีค่ามากกว่า 18 ให้พิมพ์ \"Adult\"",
          "for i in 1 2 3; do echo $i; done => วนลูปให้ i มีค่าเป็น 1, 2, 3 และพิมพ์ค่า $i ในแต่ละรอบ"
        ]
      },
      "frameworks": ["Bash-it", "Oh My Zsh"],
      "learning_resources": ["tldp.org", "ShellCheck", "Bash Scripting Guide", "DevOps Handbook"],
      "popularity_rank": 16,
      "salary_range": "35,000 - 100,000 บาท/เดือน"
    },
    {
      "id": 24,
      "name": "Dart",
      "slug": "dart",
      "desc": "ภาษาโปรแกรมจาก Google ที่ถูกออกแบบมาเพื่อพัฒนาแอปพลิเคชัน Cross-platform โดยเฉพาะใช้ร่วมกับ Flutter สำหรับสร้างแอปมือถือและเว็บ",
      "by": "Google",
      "yr": "2011",
      "level": "3",
      "par": ["Object-oriented", "Class-based"],
      "cateid": [1, 4],
      "logo": "/img/dart.png",
      "uses": ["แอปมือถือ (Flutter)", "Web", "Backend", "Cross-platform apps"],
      "pros": [
        "เขียนแอปได้ทั้ง iOS และ Android ด้วยโค้ดชุดเดียว",
        "ประสิทธิภาพสูงเมื่อ compile เป็น native code",
        "มี tooling ที่ดี (VS Code, Android Studio)",
        "Syntax คล้ายภาษา C ทำให้เรียนง่าย",
        "มี Null Safety ป้องกัน bug"
      ],
      "cons": [
        "ไม่ใช่มาตรฐานของ Web โดยตรง",
        "Community ยังไม่ใหญ่เท่า JS หรือ Python",
        "ใช้ได้ดีสุดเมื่อจับคู่กับ Flutter เท่านั้น"
      ],
      "variables": {
        "declaration": ["var", "final", "const", "late"],
        "types": ["int", "double", "String", "bool", "List", "Map", "dynamic", "void"],
        "examples": [
          "var name = 'John'; => ประกาศตัวแปร name (ชนิดที่อนุมานได้) เป็นสตริงและกำหนดค่าเป็น 'John'",
          "final age = 25; => ประกาศตัวแปร age เป็น immutable (ไม่สามารถเปลี่ยนค่าได้หลังจากกำหนดครั้งแรก) และกำหนดค่าเป็น 25",
          "const pi = 3.14; => ประกาศตัวแปร pi เป็นค่าคงที่ (compile-time constant)",
          "late String message; => ประกาศตัวแปร message เป็น String ที่จะถูกกำหนดค่าในภายหลัง (lazy initialization)"
        ]
      },
      "functions": {
        "declaration": ["Function", "Arrow function", "Anonymous function"],
        "examples": [
          "int add(int a, int b) => a + b; => ประกาศฟังก์ชัน add ที่รับ int a, int b และคืนค่า int โดยใช้ Arrow Function ในการคืนค่าผลรวม",
          "void greet(String name) { print('Hello $name'); } => ประกาศฟังก์ชัน greet ที่รับ String name และไม่คืนค่า (void) โดยพิมพ์ 'Hello ' ตามด้วย name",
          "var multiply = (x, y) => x * y; => กำหนดตัวแปร multiply เป็น Anonymous Function (Arrow Function) ที่รับ x, y และคืนค่าผลคูณ"
        ],
        "built_in": ["print()", "List.generate()", "Map()", "toString()", "int.parse()"]
      },
      "syntax": {
        "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
        "conditions": ["if...else => คำสั่งเงื่อนไข", "switch...case => คำสั่งเลือกเงื่อนไขหลายกรณี"],
        "loops": ["for => ลูปสำหรับวนซ้ำตามจำนวนครั้ง", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "do...while => ลูปที่ทำงานอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข", "forEach() => เมธอดสำหรับวนซ้ำสมาชิกใน List"],
        "operators": ["+", "-", "*", "/", "%", "==", "&&", "||", "!=", "!"],
        "examples": [
          "if (score >= 50) { print('Pass'); } => ถ้า score มากกว่าหรือเท่ากับ 50 ให้พิมพ์ 'Pass'",
          "for (var i = 0; i < 5; i++) { print(i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
        ]
      },
      "frameworks": ["Flutter", "AngularDart", "Aqueduct"],
      "learning_resources": ["Dart.dev", "Flutter.dev", "Udemy Dart courses"],
      "popularity_rank": 15,
      "salary_range": "30,000 - 90,000 บาท/เดือน"
    },
    {
      "id": 25,
      "name": "Zig",
      "slug": "zig",
      "desc": "ภาษาโปรแกรมยุคใหม่ที่ถูกออกแบบมาเพื่อแทนที่ C โดยเน้นความปลอดภัย ความเร็ว และการควบคุมหน่วยความจำอย่างชัดเจน",
      "by": "Andrew Kelley",
      "yr": "2016",
      "level": "4",
      "par": ["Procedural", "Low-level", "Manual memory management"],
      "cateid": [2],
      "logo": "/img/zig.svg",
      "uses": ["System programming", "Game development", "Embedded systems", "Build tools"],
      "pros": [
        "เร็วระดับ C แต่ปลอดภัยกว่า",
        "ไม่มี undefined behavior",
        "ไม่ต้องใช้ garbage collector",
        "Cross-compilation ได้ง่าย",
        "สามารถใช้ร่วมกับ C ได้"
      ],
      "cons": [
        "Community ยังเล็ก",
        "ยังอยู่ในสถานะพัฒนา (บาง lib ยังไม่เสถียร)",
        "Syntax ต้องทำความเข้าใจลึกถ้ามาจากภาษาระดับสูง"
      ],
      "variables": {
        "declaration": ["var", "const"],
        "types": ["i32", "u8", "bool", "f64", "[]const u8", "struct", "enum"],
        "examples": [
          "const pi: f64 = 3.14; => ประกาศค่าคงที่ pi ชนิด float 64-bit และกำหนดค่าเป็น 3.14",
          "var x: i32 = 10; => ประกาศตัวแปร x ชนิด integer 32-bit และกำหนดค่าเป็น 10",
          "const msg = \"Hello Zig!\"; => ประกาศค่าคงที่ msg เป็นสตริง \"Hello Zig!\""
        ]
      },
      "functions": {
        "declaration": ["fn"],
        "examples": [
          "fn add(a: i32, b: i32) i32 { return a + b; } => ประกาศฟังก์ชัน add ที่รับพารามิเตอร์ a และ b ชนิด i32 และคืนค่า i32 โดยคืนค่าผลรวม",
          "fn main() void { std.debug.print(\"Hi!\\n\", .{}); } => ประกาศฟังก์ชัน main ที่ไม่คืนค่า (void) ซึ่งเป็นจุดเริ่มต้นของโปรแกรม และพิมพ์ \"Hi!\" ออกทางคอนโซล"
        ],
        "built_in": ["std.debug.print()", "std.mem", "std.fs", "std.math"]
      },
      "syntax": {
        "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
        "conditions": ["if", "else if", "else => คำสั่งเงื่อนไข"],
        "loops": ["while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "for => ลูปสำหรับวนซ้ำ", "loop => ลูปที่ไม่สิ้นสุด (ต้องมี break ออก)"],
        "operators": ["+", "-", "*", "/", "%", "==", "!=", "&&", "||", "!"],
        "examples": [
          "if (x > 0) { ... } => ถ้า x มากกว่า 0 ให้ทำโค้ดในบล็อก",
          "while (true) { break; } => วนลูปไปเรื่อยๆ และหยุดเมื่อเจอคำสั่ง break"
        ]
      },
      "frameworks": ["None (ใช้ stdlib)", "รองรับ C Libs"],
      "learning_resources": ["Ziglang.org", "Zig Learn", "Zig GitHub"],
      "popularity_rank": 30,
      "salary_range": "40,000 - 100,000 บาท/เดือน"
    },
    {
      "id": 26,
      "name": "HTML",
      "slug": "html",
      "desc": "ภาษา Markup ที่ใช้สำหรับสร้างโครงสร้างของเว็บไซต์ เป็นพื้นฐานในการพัฒนาเว็บทุกประเภท",
      "by": "Tim Berners-Lee",
      "yr": "1993",
      "level": "1",
      "par": ["Markup Language"],
      "cateid": [3],
      "logo": "/img/html.jfif",
      "uses": ["เว็บไซต์", "เว็บแอป", "Mobile Web", "เอกสารอิเล็กทรอนิกส์"],
      "pros": [
        "เป็นพื้นฐานของเว็บไซต์ทั้งหมด",
        "เรียนรู้ได้ง่าย",
        "สามารถใช้ร่วมกับ CSS และ JavaScript ได้ดี",
        "รองรับโดย Browser ทุกตัว",
        "ไม่ต้องติดตั้งอะไรเพิ่มเติม"
      ],
      "cons": [
        "ไม่สามารถเขียน logic ได้",
        "โครงสร้างใหญ่จะซับซ้อนได้ง่าย",
        "ต้องใช้ร่วมกับภาษาอื่นในการทำเว็บที่ interactive"
      ],
      "variables": {
        "declaration": [],
        "types": [],
        "examples": [
          "<!DOCTYPE html> => ประกาศประเภทเอกสารว่าเป็น HTML5",
          "<html><head><title>My Page</title></head><body></body></html> => โครงสร้างพื้นฐานของเอกสาร HTML",
          "<h1>Hello World</h1> => สร้างหัวข้อระดับ 1 ที่มีข้อความ 'Hello World'",
          "<img src='image.jpg' alt='Image'> => แทรกรูปภาพจากไฟล์ 'image.jpg' พร้อมข้อความกำกับ 'Image'",
          "<a href='https://example.com'>Go</a> => สร้างลิงก์ไปยัง 'https://example.com' โดยมีข้อความที่แสดงคือ 'Go'"
        ]
      },
      "functions": {
        "declaration": [],
        "examples": [],
        "built_in": []
      },
      "syntax": {
        "comments": ["=> คอมเมนต์ใน HTML"],
        "conditions": [],
        "loops": [],
        "operators": [],
        "examples": [
          "<div class='container'>Content</div> => สร้างองค์ประกอบ div ที่มี class ชื่อ 'container' และมีข้อความ 'Content' อยู่ภายใน",
          "<ul><li>Item</li></ul> => สร้างรายการแบบไม่มีลำดับ (unordered list) ที่มีหนึ่งรายการคือ 'Item'"
        ]
      },
      "frameworks": ["Bootstrap (ใช้ร่วมกับ HTML)", "Tailwind CSS", "Foundation"],
      "learning_resources": ["W3Schools", "MDN HTML", "freeCodeCamp"],
      "popularity_rank": 2,
      "salary_range": "20,000 - 60,000 บาท/เดือน"
    },
    {
      "id": 27,
      "name": "CSS",
      "slug": "css",
      "desc": "ภาษาสำหรับจัดรูปแบบการแสดงผลของ HTML เช่น สี ตัวอักษร ระยะห่าง และการจัดวางเลย์เอาต์",
      "by": "Håkon Wium Lie",
      "yr": "1996",
      "level": "1",
      "par": ["Style Sheet Language"],
      "cateid": [3],
      "logo": "/img/css.svg",
      "uses": ["เว็บไซต์", "เว็บแอป", "Mobile Web"],
      "pros": [
        "แยกการจัดรูปแบบออกจากโครงสร้าง HTML",
        "ปรับเปลี่ยน UI ได้อย่างยืดหยุ่น",
        "รองรับ responsive design",
        "เรียนรู้ได้ง่าย",
        "มี library และ framework ช่วยจัดการเยอะ"
      ],
      "cons": [
        "จัด layout ซับซ้อนได้ยาก (ถ้าไม่ใช้ Flex/Grid)",
        "Cross-browser rendering บางครั้งไม่ตรงกัน",
        "ต้องทดสอบหลายขนาดหน้าจอ"
      ],
      "variables": {
        "declaration": ["--custom-var"],
        "types": ["color", "length", "percentage", "keyword"],
        "examples": [
          "body { background-color: #f0f0f0; } => เลือกองค์ประกอบ <body> และกำหนดสีพื้นหลังเป็นรหัสสี #f0f0f0 (สีเทาอ่อน)",
          "h1 { font-size: 24px; color: red; } => เลือกองค์ประกอบ <h1> และกำหนดขนาดตัวอักษรเป็น 24px และสีตัวอักษรเป็นสีแดง",
          ".btn { padding: 10px 20px; border-radius: 5px; } => เลือกองค์ประกอบที่มี class ชื่อ .btn และกำหนดระยะห่างด้านใน (padding) 10px บน-ล่าง และ 20px ซ้าย-ขวา รวมถึงกำหนดรัศมีของมุม (border-radius) ให้โค้งมน 5px",
          ":root { --main-color: blue; } => ประกาศ Custom Property (ตัวแปร CSS) ชื่อ --main-color และกำหนดค่าเป็นสีน้ำเงินในระดับ root (สามารถใช้ได้ทั่วทั้งเอกสาร)"
        ]
      },
      "functions": {
        "declaration": [],
        "examples": [],
        "built_in": ["calc()", "var()", "url()", "rgb()", "hsl()", "min()", "max()"]
      },
      "syntax": {
        "comments": ["/* This is a comment */ => คอมเมนต์ใน CSS"],
        "conditions": [],
        "loops": [],
        "operators": [],
        "examples": [
          "div:hover { color: blue; } => เมื่อนำเมาส์ไปชี้ที่องค์ประกอบ <div> ให้เปลี่ยนสีตัวอักษรเป็นสีน้ำเงิน (Pseudo-class)",
          "@media (max-width: 768px) { .container { flex-direction: column; } } => เมื่อความกว้างหน้าจอสูงสุด (max-width) คือ 768px ให้องค์ประกอบที่มี class ชื่อ .container มีทิศทางการจัดเรียง Flex Item เป็นแนวตั้ง (column) (Media Query สำหรับ Responsive Design)"
        ]
      },
      "frameworks": ["Bootstrap", "Tailwind CSS", "Bulma", "Materialize"],
      "learning_resources": ["MDN CSS", "W3Schools", "CSS-Tricks"],
      "popularity_rank": 3,
      "salary_range": "20,000 - 60,000 บาท/เดือน"
    },
    {
      "id": 28,
      "name": "PL/SQL",
      "slug": "plsql",
      "desc": "ภาษาขยายของ SQL ที่เพิ่มความสามารถแบบ procedural เช่น if, loop, function ใช้กับ Oracle Database",
      "by": "Oracle Corporation",
      "yr": "1995",
      "level": "3",
      "par": ["Procedural", "Declarative"],
      "cateid": [3],
      "logo": "/img/pl-sql.webp",
      "uses": ["Database Programming", "Stored Procedure", "Trigger", "Function"],
      "pros": [
        "สามารถเขียน logic ซับซ้อนได้ใน SQL",
        "เหมาะกับงานที่ต้องรันใกล้กับ DB",
        "มีประสิทธิภาพสำหรับ Oracle"
      ],
      "cons": [
        "ผูกกับ Oracle เท่านั้น",
        "Syntax ซับซ้อนกว่าการใช้ SQL ธรรมดา",
        "ไม่ใช่ภาษาทั่วไป ใช้เฉพาะงาน DB"
      ],
      "variables": {
        "declaration": ["DECLARE variable_name DATATYPE;"],
        "types": ["VARCHAR2", "NUMBER", "DATE", "BOOLEAN", "PL/SQL Table", "RECORD"],
        "examples": [
          "DECLARE v_name VARCHAR2(100); BEGIN v_name := 'John Doe'; END; => ประกาศตัวแปร v_name ชนิด VARCHAR2 ขนาด 100 และกำหนดค่าเป็น 'John Doe'",
          "DECLARE v_age NUMBER := 30; BEGIN ... END; => ประกาศตัวแปร v_age ชนิด NUMBER พร้อมกำหนดค่าเริ่มต้นเป็น 30"
        ]
      },
      "functions": {
        "declaration": ["CREATE [OR REPLACE] FUNCTION function_name (...) RETURN DATATYPE AS ... END;"],
        "examples": [
          "CREATE FUNCTION get_employee_name (p_emp_id NUMBER) RETURN VARCHAR2 IS v_name VARCHAR2(100); BEGIN SELECT name INTO v_name FROM employees WHERE emp_id = p_emp_id; RETURN v_name; END; => สร้างฟังก์ชันชื่อ get_employee_name ที่รับรหัสพนักงาน (p_emp_id) และคืนชื่อพนักงาน"
        ],
        "built_in": ["DBMS_OUTPUT.PUT_LINE", "TO_CHAR", "TO_DATE", "NVL", "ROWCOUNT"]
      },
      "syntax": {
        "comments": ["-- Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
        "conditions": ["IF...THEN...ELSIF...ELSE...END IF; => คำสั่งเงื่อนไข", "CASE WHEN...THEN...ELSE...END; => คำสั่งเลือกเงื่อนไขหลายกรณี"],
        "loops": ["LOOP...END LOOP; => ลูปพื้นฐาน", "FOR...LOOP...END LOOP; => ลูปสำหรับวนซ้ำตามช่วงหรือ Cursor", "WHILE...LOOP...END LOOP; => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง"],
        "operators": ["+", "-", "*", "/", "=", "!=", ">", "<", ">=", "<=", "AND", "OR", "NOT"],
        "examples": [
          "IF v_age >= 18 THEN DBMS_OUTPUT.PUT_LINE('Adult'); ELSE DBMS_OUTPUT.PUT_LINE('Minor'); END IF; => ถ้า v_age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
          "FOR i IN 1..10 LOOP DBMS_OUTPUT.PUT_LINE(i); END LOOP; => วนลูปให้ i มีค่าตั้งแต่ 1 ถึง 10 และพิมพ์ค่า i ในแต่ละรอบ"
        ]
      },
      "frameworks": ["ไม่มี Framework เฉพาะ (เป็นส่วนหนึ่งของ Oracle DB)"],
      "learning_resources": ["Oracle PL/SQL Documentation", "W3Schools SQL (ส่วนที่เกี่ยวข้องกับ PL/SQL)", "Oracle Learning Library"],
      "popularity_rank": 26,
      "salary_range": "40,000 - 120,000 บาท/เดือน"
    },
    {
      "id": 29,
      "name": "T-SQL",
      "slug": "tsql",
      "desc": "ภาษาขยายของ SQL สำหรับ Microsoft SQL Server ที่เพิ่ม control flow และฟังก์ชันต่าง ๆ",
      "by": "Microsoft",
      "yr": "1990",
      "level": "3",
      "par": ["Procedural", "Declarative"],
      "cateid": [3],
      "logo": "/img/tsql.png",
      "uses": ["Query Database", "Stored Procedures", "Trigger", "Report"],
      "pros": [
        "มีฟีเจอร์ครบสำหรับ SQL Server",
        "ผสม logic และ SQL ได้ดี",
        "ใช้ในองค์กร Microsoft เยอะ"
      ],
      "cons": [
        "ผูกกับ SQL Server เท่านั้น",
        "ไม่ใช่มาตรฐานกลาง",
        "ไม่ใช้ได้ทั่วไปกับทุก DB"
      ],
      "variables": {
        "declaration": ["DECLARE @variable_name DATATYPE;"],
        "types": ["INT", "VARCHAR", "NVARCHAR", "DATE", "BIT", "DECIMAL"],
        "examples": [
          "DECLARE @name VARCHAR(100); SET @name = 'Jane Doe'; => ประกาศตัวแปร @name ชนิด VARCHAR ขนาด 100 และกำหนดค่าเป็น 'Jane Doe'",
          "DECLARE @age INT = 25; => ประกาศตัวแปร @age ชนิด INT พร้อมกำหนดค่าเริ่มต้นเป็น 25"
        ]
      },
      "functions": {
        "declaration": ["CREATE FUNCTION function_name(...) RETURNS DATATYPE AS BEGIN ... END;"],
        "examples": [
          "CREATE FUNCTION dbo.CalculateTax (@amount DECIMAL(10, 2)) RETURNS DECIMAL(10, 2) AS BEGIN RETURN @amount * 0.07; END; => สร้างฟังก์ชันชื่อ CalculateTax ที่รับ @amount ชนิด DECIMAL และคืนค่า DECIMAL โดยคำนวณภาษี 7%"
        ],
        "built_in": ["PRINT", "GETDATE()", "DATEDIFF()", "LEN()", "UPPER()", "LOWER()", "COUNT()", "SUM()"]
      },
      "syntax": {
        "comments": ["-- Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
        "conditions": ["IF...ELSE => คำสั่งเงื่อนไข", "CASE WHEN...THEN...ELSE...END => คำสั่งเลือกเงื่อนไขหลายกรณี"],
        "loops": ["WHILE...BEGIN...END; => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "CURSOR => การวนซ้ำในชุดผลลัพธ์ของ Query"],
        "operators": ["+", "-", "*", "/", "%", "=", "<>", ">", "<", ">=", "<=", "AND", "OR", "NOT"],
        "examples": [
          "IF @age >= 18 BEGIN PRINT 'Adult'; END ELSE BEGIN PRINT 'Minor'; END; => ถ้า @age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
          "WHILE @counter <= 5 BEGIN PRINT @counter; SET @counter = @counter + 1; END; => วนลูปตราบเท่าที่ @counter น้อยกว่าหรือเท่ากับ 5 และเพิ่มค่า @counter ทีละ 1 ในแต่ละรอบ"
        ]
      },
      "frameworks": ["ไม่มี Framework เฉพาะ (เป็นส่วนหนึ่งของ SQL Server)"],
      "learning_resources": ["Microsoft Docs: T-SQL", "SQLShack", "Brent Ozar Unlimited"],
      "popularity_rank": 27,
      "salary_range": "40,000 - 120,000 บาท/เดือน"
    },
    {
      "id": 30,
      "name": "PowerShell",
      "slug": "powershell",
      "desc": "ภาษาสคริปต์สำหรับระบบปฏิบัติการ Windows ที่สามารถควบคุมระบบและจัดการไฟล์, Registry และบริการต่าง ๆ",
      "by": "Microsoft",
      "yr": "2006",
      "level": "3",
      "par": ["Scripting", "Object-oriented"],
      "cateid": [4],
      "logo": "/img/powershell.png",
      "uses": ["Automation", "System Admin", "DevOps", "Script Task", "CI/CD"],
      "pros": [
        "จัดการ Windows ได้ลึก",
        "สามารถใช้กับ object ได้โดยตรง",
        "รองรับ cross-platform (PowerShell Core)"
      ],
      "cons": [
        "Syntax แปลกและมี learning curve",
        "มี dependency กับ Windows ecosystem",
        "ช้าเมื่อเทียบกับ shell อื่น ๆ"
      ],
      "variables": {
        "declaration": ["$variableName"],
        "types": ["String", "Int32", "Boolean", "Array", "HashTable", "Object"],
        "examples": [
          "$name = 'Alice' => กำหนดตัวแปร $name เป็นสตริง 'Alice'",
          "$age = 25 => กำหนดตัวแปร $age เป็นตัวเลข 25 (ชนิดจะถูกอนุมาน)",
          "$isActive = $True => กำหนดตัวแปร $isActive เป็นบูลีน $True (ค่าจริง)",
          "$files = Get-ChildItem => กำหนดตัวแปร $files เป็นลิสต์ของ Object ไฟล์/โฟลเดอร์ในไดเรกทอรีปัจจุบัน"
        ]
      },
      "functions": {
        "declaration": ["function Function-Name { ... }"],
        "examples": [
          "function Say-Hello { param($Name) \"Hello $Name\" } => ประกาศฟังก์ชันชื่อ Say-Hello ที่รับพารามิเตอร์ $Name และคืนค่าสตริง 'Hello ' ตามด้วย $Name",
          "function Add-Numbers { param($a, $b) return ($a + $b) } => ประกาศฟังก์ชันชื่อ Add-Numbers ที่รับ $a และ $b และคืนค่าผลรวม"
        ],
        "built_in": ["Write-Host", "Get-ChildItem", "Set-Item", "Remove-Item", "Invoke-Command", "Select-Object"]
      },
      "syntax": {
        "comments": ["# Single line => คอมเมนต์บรรทัดเดียว", "<# Multi line #> => คอมเมนต์หลายบรรทัด"],
        "conditions": ["if...else => คำสั่งเงื่อนไข", "switch => คำสั่งเลือกเงื่อนไขหลายกรณี"],
        "loops": ["for => ลูปสำหรับวนซ้ำตามจำนวนครั้ง (คล้าย C#)", "foreach => ลูปสำหรับวนซ้ำสมาชิกในคอลเล็กชัน", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "do...while => ลูปที่ทำงานอย่างน้อยหนึ่งครั้งแล้วจึงตรวจสอบเงื่อนไข"],
        "operators": ["-eq", "-ne", "-gt", "-lt", "-ge", "-le", "-and", "-or", "-not", "+", "-", "*", "/"],
        "examples": [
          "if ($age -ge 18) { Write-Host 'Adult' } else { Write-Host 'Minor' } => ถ้า $age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
          "foreach ($file in $files) { Write-Host $file.Name } => วนซ้ำในลิสต์ $files และพิมพ์ชื่อของแต่ละไฟล์"
        ]
      },
      "frameworks": ["PowerShell Desired State Configuration (DSC)"],
      "learning_resources": ["Microsoft Docs: PowerShell", "PowerShell Gallery", "Learn PowerShell in a Month of Lunches"],
      "popularity_rank": 21,
      "salary_range": "35,000 - 100,000 บาท/เดือน"
    },
    {
      "id": 31,
      "name": "Zsh",
      "slug": "zsh",
      "desc": "Shell ที่พัฒนาจาก Bash เพิ่มความสามารถเช่น autocomplete, plugin, และ theme ใช้งานบน Unix/Linux/macOS",
      "by": "Paul Falstad",
      "yr": "1990",
      "level": "2",
      "par": ["Scripting"],
      "cateid": [4],
      "logo": "/img/zsh.jfif",
      "uses": ["Terminal Automation", "Command Line", "Script Jobs"],
      "pros": [
        "สั่งงานง่ายและ customizable",
        "มี Oh-My-Zsh plugin ecosystem",
        "ใช้แทน Bash ได้ทันที"
      ],
      "cons": [
        "บางอย่างไม่ compatible กับ Bash 100%",
        "ต้อง setup เพิ่มเพื่อให้สวย/เร็ว",
        "ไม่เป็นทางการใน Linux distribution หลัก"
      ],
      "variables": {
        "declaration": ["var=value"],
        "types": ["string (ทั้งหมดเป็น string โดยปริยาย)"],
        "examples": [
          "name=\"Bob\" => กำหนดตัวแปร name เป็นสตริง 'Bob'",
          "age=30 => กำหนดตัวแปร age เป็นสตริง '30' (ใน Shell ทุกอย่างเป็นสตริงโดยปริยาย)",
          "files=(*.txt) => กำหนดตัวแปร files เป็นอาร์เรย์ของชื่อไฟล์ .txt ทั้งหมดในไดเรกทอรีปัจจุบัน"
        ]
      },
      "functions": {
        "declaration": ["function_name() { commands }"],
        "examples": [
          "greet() { echo \"Hello $1\"; } => ประกาศฟังก์ชันชื่อ greet ที่พิมพ์ 'Hello' ตามด้วยพารามิเตอร์ตัวแรก ($1)",
          "add() { echo $(( $1 + $2 )); } => ประกาศฟังก์ชันชื่อ add ที่พิมพ์ผลรวมของพารามิเตอร์ตัวแรก ($1) และตัวที่สอง ($2) โดยใช้การคำนวณทางคณิตศาสตร์"
        ],
        "built_in": ["echo", "read", "if", "for", "while", "test", "grep", "awk", "setopt", "unsetopt"]
      },
      "syntax": {
        "comments": ["# Single line => คอมเมนต์บรรทัดเดียว"],
        "conditions": ["if...then...else => คำสั่งเงื่อนไข", "case...esac => คำสั่งเลือกเงื่อนไขหลายกรณี"],
        "loops": ["for => ลูปสำหรับวนซ้ำตามรายการหรือช่วงตัวเลข", "while => ลูปที่ทำงานตราบเท่าที่เงื่อนไขเป็นจริง", "until => ลูปที่ทำงานจนกว่าเงื่อนไขจะเป็นจริง"],
        "operators": ["=", "==", "!=", "-lt", "-gt", "&&", "||"],
        "examples": [
          "if [[ $age -gt 18 ]]; then echo \"Adult\"; fi => ถ้าตัวแปร $age มีค่ามากกว่า 18 ให้พิมพ์ \"Adult\" (ใช้ [[ ]] สำหรับการเปรียบเทียบขั้นสูง)",
          "for i in {1..5}; do echo $i; done => วนลูปให้ i มีค่าตั้งแต่ 1 ถึง 5 และพิมพ์ค่า $i ในแต่ละรอบ"
        ]
      },
      "frameworks": ["Oh My Zsh", "Prezto"],
      "learning_resources": ["Zsh Manual", "Oh My Zsh GitHub", "ArchWiki Zsh"],
      "popularity_rank": 24,
      "salary_range": "35,000 - 100,000 บาท/เดือน"
    },
    {
      "id": 32,
      "name": "NPM Scripts",
      "slug": "npm-scripts",
      "desc": "ระบบรันคำสั่งแบบ script ใน Node.js ผ่าน package.json โดยไม่ต้องใช้ task runner ภายนอก",
      "by": "Node.js Foundation",
      "yr": "2014",
      "level": "2",
      "par": ["Scripting"],
      "cateid": [5],
      "logo": "/img/npm.jfif",
      "uses": ["Build Tools", "Frontend Dev", "Automation", "Dev Task"],
      "pros": [
        "ใช้ง่าย ไม่ต้องติดตั้งเพิ่ม",
        "ใช้รันคำสั่งซ้ำ ๆ ใน dev workflow",
        "ทำงานร่วมกับทุก package Node.js ได้ดี"
      ],
      "cons": [
        "Script ซับซ้อนอ่านยาก",
        "Debug ยากกว่าการใช้ tool จริง",
        "ไม่มี feature เพิ่มเติมแบบ task runner จริงจัง (เช่น Gulp)"
      ],
      "variables": {
        "declaration": ["(Environment variables)"],
        "types": ["(ขึ้นอยู่กับ Shell ที่รัน)"],
        "examples": [
          "\"start\": \"node server.js\" => กำหนดสคริปต์ชื่อ start ให้รันคำสั่ง node server.js",
          "\"build\": \"npm run clean && webpack --mode production\" => กำหนดสคริปต์ชื่อ build ให้รันสคริปต์ clean ก่อน แล้วจึงรัน webpack ในโหมด production",
          "\"test\": \"jest --watchAll\" => กำหนดสคริปต์ชื่อ test ให้รัน Jest ในโหมด watchAll"
        ]
      },
      "functions": {
        "declaration": [],
        "examples": [],
        "built_in": ["npm run", "npm install", "npm start", "npm test"]
      },
      "syntax": {
        "comments": ["(ใช้คอมเมนต์ของ Shell ที่รัน)"],
        "conditions": ["&& (AND)", "|| (OR) => ใช้ Operator ของ Shell เพื่อเชื่อมคำสั่งแบบมีเงื่อนไข"],
        "loops": ["(ใช้ loop ของ Shell ที่รัน)"],
        "operators": ["&&", "||", ">", ">>", "<"],
        "examples": [
          "\"dev\": \"npm run serve-frontend & npm run serve-backend\" => รันสคริปต์ serve-frontend และ serve-backend พร้อมกัน (ในพื้นหลัง)",
          "\"lint\": \"eslint . --ext .js,.jsx --fix || true\" => รัน ESLint และถ้ามีข้อผิดพลาด (exit code ไม่ใช่ 0) ให้ละเว้นและถือว่าสำเร็จ (true)"
        ]
      },
      "frameworks": ["(ใช้กับ Node.js Project)"],
      "learning_resources": ["NPM Docs: scripts", "Node.js documentation", "Frontend Masters"],
      "popularity_rank": 8,
      "salary_range": "25,000 - 80,000 บาท/เดือน"
    }
]