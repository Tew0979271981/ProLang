[
  {
    "id": 1,
    "name": "JavaScript",
    "slug": "javascript",
    "desc": "ภาษายอดนิยมสำหรับการพัฒนาเว็บ ทั้งส่วนหน้า (Frontend) และส่วนหลัง (Backend) รวมถึงแอปพลิเคชันมือถือและเดสก์ท็อป",
    "by": "Brendan Eich",
    "yr": "1995",
    "level": "4",
    "par": ["Multi-paradigm", "Event-driven", "Functional"],
    "cateid": [1, 3],
    "logo": "img/js.gif",
    "fields": ["Web Frontend", "Web Backend", "Mobile Apps", "Desktop Applications", "Game Development", "AI / Machine Learning", "DevOps / Automation"],
    "pros": [
      "ใช้งานได้หลากหลายแพลตฟอร์ม (Web, Mobile, Desktop)",
      "มี Community ขนาดใหญ่และ Library/Framework จำนวนมาก",
      "เรียนรู้ได้ค่อนข้างง่าย (สำหรับพื้นฐาน)",
      "รองรับ Asynchronous Programming ได้ดี",
      "มีความยืดหยุ่นสูง"
    ],
    "cons": [
      "มีอิสระในการเขียนสูง อาจทำให้โค้ดไม่มีระเบียบ",
      "ประสิทธิภาพการประมวลผลสำหรับงานหนักยังเป็นรองภาษา Native",
      "ปัญหาเรื่อง Callback Hell/Asynchronous Complexity (ก่อน ES6 Async/Await)",
      "Browser Compatibility ที่แตกต่างกัน"
    ],
    "variables": {
      "declaration": ["var", "let", "const"],
      "types": ["String", "Number", "Boolean", "Null", "Undefined", "Symbol", "BigInt", "Object", "Array"],
      "examples": [
        "var name = 'John'; => กำหนดตัวแปร name เป็นสตริง 'John'",
        "let age = 30; => กำหนดตัวแปร age เป็นตัวเลข 30 (สามารถเปลี่ยนค่าได้ในภายหลัง)",
        "const PI = 3.14; => กำหนดค่าคงที่ PI เป็น 3.14 (ไม่สามารถเปลี่ยนค่าได้)",
        "let numbers = [1, 2, 3]; => กำหนดตัวแปร numbers เป็นอาร์เรย์ที่มีค่า 1, 2, 3"
      ]
    },
    "functions": {
      "declaration": ["function name(params) { ... }", "() => { ... } (Arrow Function)"],
      "examples": [
        "function greet(name) { return 'Hello ' + name; } => ประกาศฟังก์ชัน greet ที่รับ name และคืนค่าสตริง 'Hello ' ตามด้วย name",
        "const add = (a, b) => a + b; => กำหนดฟังก์ชัน add โดยใช้ Arrow Function ที่รับ a และ b และคืนค่าผลรวม"
      ],
      "built_in": ["console.log()", "setTimeout()", "fetch()", "JSON.parse()", "Array.map()"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else", "switch"],
      "loops": ["for", "while", "do...while", "forEach", "for...of", "for...in"],
      "operators": ["+", "-", "*", "/", "%", "==", "===", "!=", "!==", "&&", "||", "!"],
      "examples": [
        "if (age >= 18) { console.log('Adult'); } else { console.log('Minor'); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "for (let i = 0; i < 5; i++) { console.log(i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
      ]
    },
    "frameworks": ["React", "Angular", "Vue.js", "Node.js (Runtime)", "Express.js", "Next.js"],
    "learning_resources": ["MDN Web Docs", "freeCodeCamp", "The Modern JavaScript Tutorial", "JavaScript.info"],
    "popularity_rank": 1,
    "salary_range": "35,000 - 100,000 บาท/เดือน",
    "salary": "20K–40K"
  },
  {
    "id": 2,
    "name": "Python",
    "slug": "python",
    "desc": "ภาษาโปรแกรมอเนกประสงค์ที่นิยมใช้ในงาน Data Science, AI/Machine Learning, Web Development และ Automation",
    "by": "Guido van Rossum",
    "yr": "1991",
    "level": "4",
    "par": ["Multi-paradigm", "Object-oriented", "Functional", "Imperative"],
    "cateid": [1, 3],
    "logo": "img/python.png",
    "fields": ["AI / Machine Learning", "Data Science / Analytics", "Web Backend", "Scripting / Automation", "Cloud Infrastructure", "Desktop Applications", "Cybersecurity", "Robotics / IoT"],
    "pros": [
      "Syntax อ่านง่าย เรียนรู้เร็ว",
      "มี Library และ Framework ขนาดใหญ่สำหรับหลากหลายงาน",
      "เหมาะสำหรับ Data Science และ AI/ML",
      "Community ขนาดใหญ่",
      "รองรับ Cross-platform"
    ],
    "cons": [
      "ช้ากว่าภาษาคอมไพล์ (Interpreted Language)",
      "การจัดการ Memory ยังไม่ดีเท่าภาษา Low-level",
      "Global Interpreter Lock (GIL) จำกัดการทำงาน Multithreading",
      "ปัญหาเรื่อง Package Management ในบางครั้ง"
    ],
    "variables": {
      "declaration": ["No explicit declaration"],
      "types": ["int", "float", "str", "bool", "list", "tuple", "dict", "set"],
      "examples": [
        "name = 'Alice' => กำหนดตัวแปร name เป็นสตริง 'Alice'",
        "age = 25 => กำหนดตัวแปร age เป็นตัวเลข 25",
        "is_active = True => กำหนดตัวแปร is_active เป็นค่าบูลีน True",
        "numbers = [1, 2, 3] => กำหนดตัวแปร numbers เป็นลิสต์ที่มีค่า 1, 2, 3"
      ]
    },
    "functions": {
      "declaration": ["def function_name(params):"],
      "examples": [
        "def greet(name): return f'Hello {name}' => ประกาศฟังก์ชัน greet ที่รับ name และคืนค่าสตริง 'Hello ' ตามด้วย name โดยใช้ f-string",
        "add = lambda a, b: a + b => กำหนดฟังก์ชัน add โดยใช้ Lambda Function ที่รับ a และ b และคืนค่าผลรวม"
      ],
      "built_in": ["print()", "len()", "type()", "input()", "range()", "map()", "filter()"]
    },
    "syntax": {
      "comments": ["# Single line => คอมเมนต์บรรทัดเดียว", "\"\"\" Multi line \"\"\" => คอมเมนต์หลายบรรทัด (Docstring)"],
      "conditions": ["if...elif...else"],
      "loops": ["for", "while"],
      "operators": ["+", "-", "*", "/", "%", "**", "//", "==", "!=", "<", ">", "<=", ">=", "and", "or", "not", "in", "is"],
      "examples": [
        "if age >= 18: print('Adult') else: print('Minor') => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "for i in range(5): print(i) => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
      ]
    },
    "frameworks": ["Django", "Flask", "FastAPI", "TensorFlow", "PyTorch", "Pandas", "NumPy"],
    "learning_resources": ["Python.org Docs", "Real Python", "Automate the Boring Stuff", "Codecademy"],
    "popularity_rank": 2,
    "salary_range": "30,000 - 90,000 บาท/เดือน"
  },
  {
    "id": 3,
    "name": "Java",
    "slug": "java",
    "desc": "ภาษา Object-Oriented ที่เป็นที่นิยมสำหรับ Enterprise Applications, Android Development และ Big Data",
    "by": "James Gosling (Sun Microsystems)",
    "yr": "1995",
    "level": "3",
    "par": ["Object-oriented", "Concurrent", "Imperative"],
    "cateid": [2, 4],
    "logo": "img/java.png",
    "fields": ["Desktop Applications", "Mobile Apps", "Web Backend", "Cloud Infrastructure", "Big Data (Apache Spark)", "Enterprise Systems"],
    "pros": [
      "Platform Independent (Write Once, Run Anywhere)",
      "Strongly Typed ทำให้ลดข้อผิดพลาด",
      "มี Ecosystem และ Community ขนาดใหญ่",
      "มี Garbage Collection ช่วยจัดการ Memory",
      "ประสิทธิภาพสูงและ Scalable"
    ],
    "cons": [
      "Syntax ค่อนข้าง Verbose (เขียนเยอะ)",
      "ใช้ Memory ค่อนข้างมาก",
      "Startup Time นานในบางกรณี",
      "Learning Curve ปานกลางถึงสูง"
    ],
    "variables": {
      "declaration": ["dataType variableName;"],
      "types": ["int", "double", "boolean", "char", "String", "Array", "Class (Object)"],
      "examples": [
        "String name = \"Bob\"; => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น \"Bob\"",
        "int age = 40; => ประกาศตัวแปร age เป็นตัวเลขจำนวนเต็มและกำหนดค่าเป็น 40",
        "boolean isActive = true; => ประกาศตัวแปร isActive เป็นบูลีนและกำหนดค่าเป็น true",
        "int[] numbers = {1, 2, 3}; => ประกาศตัวแปร numbers เป็นอาร์เรย์ของตัวเลข"
      ]
    },
    "functions": {
      "declaration": ["accessModifier returnType methodName(params) { ... }"],
      "examples": [
        "public String greet(String name) { return \"Hello \" + name; } => ประกาศเมธอด greet ที่รับ String name และคืนค่า String โดยคืนค่าสตริง 'Hello ' ตามด้วย name",
        "public static int add(int a, int b) { return a + b; } => ประกาศเมธอด static ชื่อ add ที่รับ int a, int b และคืนค่า int โดยคืนค่าผลรวม"
      ],
      "built_in": ["System.out.println()", "Math.random()", "Scanner", "ArrayList", "HashMap"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด", "/** Javadoc */ => คอมเมนต์สำหรับสร้างเอกสาร"],
      "conditions": ["if...else", "switch"],
      "loops": ["for", "while", "do...while", "for-each"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!"],
      "examples": [
        "if (age >= 18) { System.out.println(\"Adult\"); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
        "for (int i = 0; i < 5; i++) { System.out.println(i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
      ]
    },
    "frameworks": ["Spring Boot", "Hibernate", "Android SDK", "Apache Kafka", "Apache Spark"],
    "learning_resources": ["Oracle Java Docs", "GeeksforGeeks Java", "Baeldung", "Codecademy"],
    "popularity_rank": 3,
    "salary_range": "35,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 4,
    "name": "C#",
    "slug": "csharp",
    "desc": "ภาษา Object-Oriented ของ Microsoft ใช้สำหรับพัฒนา Desktop Apps, Web Apps ด้วย .NET, Game Development (Unity)",
    "by": "Microsoft (Anders Hejlsberg)",
    "yr": "2000",
    "level": "3",
    "par": ["Object-oriented", "Component-oriented", "Imperative", "Functional"],
    "cateid": [2, 4],
    "logo": "img/csharp.png",
    "fields": ["Desktop Applications", "Game Development", "Web Backend", "Cloud Infrastructure", "AR / VR Development", "Enterprise Systems"],
    "pros": [
      "เป็นส่วนหนึ่งของ .NET Ecosystem ที่สมบูรณ์",
      "Strongly Typed ทำให้ Debug ง่าย",
      "มี Garbage Collection",
      "ประสิทธิภาพดีสำหรับงาน Enterprise และ Game Dev",
      "Community และ Tooling (Visual Studio) ที่ยอดเยี่ยม"
    ],
    "cons": [
      "ผูกติดกับ .NET Framework (แต่ .NET Core/5+ ลดข้อจำกัดนี้)",
      "Learning Curve ปานกลาง",
      "ใช้ Memory ค่อนข้างมาก"
    ],
    "variables": {
      "declaration": ["dataType variableName;"],
      "types": ["int", "double", "bool", "char", "string", "array", "class (object)", "enum", "struct"],
      "examples": [
        "string name = \"Charlie\"; => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น \"Charlie\"",
        "int age = 35; => ประกาศตัวแปร age เป็นตัวเลขจำนวนเต็มและกำหนดค่าเป็น 35",
        "bool isActive = false; => ประกาศตัวแปร isActive เป็นบูลีนและกำหนดค่าเป็น false",
        "int[] numbers = {4, 5, 6}; => ประกาศตัวแปร numbers เป็นอาร์เรย์ของตัวเลข"
      ]
    },
    "functions": {
      "declaration": ["accessModifier returnType MethodName(params) { ... }"],
      "examples": [
        "public string Greet(string name) { return $\"Hello {name}\"; } => ประกาศเมธอด Greet ที่รับ string name และคืนค่า string โดยคืนค่าสตริง 'Hello ' ตามด้วย name",
        "public static int Add(int a, int b) { return a + b; } => ประกาศเมธอด static ชื่อ Add ที่รับ int a, int b และคืนค่า int โดยคืนค่าผลรวม"
      ],
      "built_in": ["Console.WriteLine()", "Math.Sqrt()", "List<T>", "Dictionary<TKey, TValue>"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด", "/// XML Doc Comment => คอมเมนต์สำหรับสร้างเอกสาร XML"],
      "conditions": ["if...else", "switch", "ternary operator"],
      "loops": ["for", "while", "do...while", "foreach"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!"],
      "examples": [
        "if (age >= 18) { Console.WriteLine(\"Adult\"); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
        "for (int i = 0; i < 5; i++) { Console.WriteLine(i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
      ]
    },
    "frameworks": [".NET (ASP.NET Core, WPF, Xamarin)", "Unity (Game Engine)"],
    "learning_resources": ["Microsoft Docs: C#", "Pluralsight", "freeCodeCamp", "Unity Learn"],
    "popularity_rank": 4,
    "salary_range": "35,000 - 95,000 บาท/เดือน"
  },
  {
    "id": 5,
    "name": "C++",
    "slug": "cpp",
    "desc": "ภาษาประสิทธิภาพสูงที่ใช้สำหรับ System Programming, Game Development, Embedded Systems และ High-Performance Computing",
    "by": "Bjarne Stroustrup",
    "yr": "1979",
    "level": "2",
    "par": ["Multi-paradigm", "Object-oriented", "Procedural", "Generic"],
    "cateid": [2, 4],
    "logo": "img/cpp.png",
    "fields": ["Game Development", "Embedded Systems", "Operating Systems", "System Programming", "High-Performance Computing", "Robotics / IoT", "Cybersecurity", "Network Programming", "Compiler / Language Design"],
    "pros": [
      "ประสิทธิภาพและความเร็วสูงสุด",
      "ควบคุม Memory ได้อย่างละเอียด (Manual Memory Management)",
      "เข้าถึง Hardware ได้โดยตรง",
      "ใช้ได้ในอุตสาหกรรมเกมและระบบฝังตัว",
      "Library และ Tooling มีครบครัน"
    ],
    "cons": [
      "Learning Curve สูงมากและซับซ้อน",
      "Manual Memory Management อาจทำให้เกิด Bug ได้ง่าย (Memory Leaks, Pointers)",
      "ใช้เวลาในการ Compile นาน",
      "Debugging ยาก",
      "ไม่มี Garbage Collection"
    ],
    "variables": {
      "declaration": ["dataType variableName;"],
      "types": ["int", "float", "double", "char", "bool", "string", "array", "struct", "class", "pointer"],
      "examples": [
        "std::string name = \"David\"; => ประกาศตัวแปร name เป็นสตริงและกำหนดค่าเป็น \"David\"",
        "int age = 22; => ประกาศตัวแปร age เป็นตัวเลขจำนวนเต็มและกำหนดค่าเป็น 22",
        "bool isStudent = true; => ประกาศตัวแปร isStudent เป็นบูลีนและกำหนดค่าเป็น true",
        "int* ptr = &age; => ประกาศตัวแปร ptr เป็น Pointer ที่ชี้ไปยังที่อยู่ของตัวแปร age"
      ]
    },
    "functions": {
      "declaration": ["returnType functionName(params) { ... }"],
      "examples": [
        "std::string greet(std::string name) { return \"Hello \" + name; } => ประกาศฟังก์ชัน greet ที่รับ std::string name และคืนค่า std::string โดยคืนค่าสตริง 'Hello ' ตามด้วย name",
        "int add(int a, int b) { return a + b; } => ประกาศฟังก์ชัน add ที่รับ int a, int b และคืนค่า int โดยคืนค่าผลรวม"
      ],
      "built_in": ["std::cout", "std::cin", "std::endl", "std::vector", "std::map", "new", "delete"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else", "switch"],
      "loops": ["for", "while", "do...while", "range-based for loop"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!", "&", "*"],
      "examples": [
        "if (age >= 18) { std::cout << \"Adult\" << std::endl; } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
        "for (int i = 0; i < 5; i++) { std::cout << i << std::endl; } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
      ]
    },
    "frameworks": ["Qt", "Boost", "Unreal Engine (Game Engine)", "Cinder", "OpenCV"],
    "learning_resources": ["cppreference.com", "Learn C++", "GeeksforGeeks C++", "The Cherno (YouTube)"],
    "popularity_rank": 6,
    "salary_range": "40,000 - 120,000 บาท/เดือน"
  },
  {
    "id": 6,
    "name": "Ruby",
    "slug": "ruby",
    "desc": "ภาษาโปรแกรมที่เน้นความเรียบง่ายและ Productive มีชื่อเสียงจาก Framework Ruby on Rails สำหรับ Web Development",
    "by": "Yukihiro \"Matz\" Matsumoto",
    "yr": "1995",
    "level": "4",
    "par": ["Object-oriented", "Imperative", "Functional"],
    "cateid": [1, 3],
    "logo": "img/ruby.png",
    "fields": ["Web Backend", "Scripting / Automation", "DevOps / Automation", "Web Frontend (via Rails)"],
    "pros": [
      "Syntax สวยงาม อ่านง่าย คล้ายภาษาอังกฤษ",
      "เน้นความ Productive ของ Developer",
      "Ruby on Rails เป็น Framework ที่มีประสิทธิภาพสูง",
      "มี Community ที่แข็งแกร่งและเป็นมิตร",
      "รองรับการเขียนแบบ Object-Oriented ได้ดี"
    ],
    "cons": [
      "ความเร็วในการประมวลผลช้า (Interpreted Language)",
      "ใช้ Memory ค่อนข้างมาก",
      "Debugging ในบางครั้งอาจท้าทาย",
      "Market Share ลดลงเมื่อเทียบกับ Python/Node.js"
    ],
    "variables": {
      "declaration": ["Local, Instance (@), Class (@@), Global ($)"],
      "types": ["String", "Integer", "Float", "Boolean", "Array", "Hash", "Symbol"],
      "examples": [
        "name = 'Eve' => กำหนดตัวแปร name เป็นสตริง 'Eve'",
        "age = 28 => กำหนดตัวแปร age เป็นตัวเลข 28",
        "@user_count = 100 => กำหนดตัวแปร Instance Variable @user_count เป็น 100",
        "numbers = [7, 8, 9] => กำหนดตัวแปร numbers เป็นอาร์เรย์ที่มีค่า 7, 8, 9"
      ]
    },
    "functions": {
      "declaration": ["def method_name(params) ... end"],
      "examples": [
        "def greet(name) \"Hello #{name}\" end => ประกาศเมธอด greet ที่รับ name และคืนค่าสตริง 'Hello ' ตามด้วย name",
        "add = lambda { |a, b| a + b } => กำหนด Lambda (Anonymous Function) ชื่อ add ที่รับ a และ b และคืนค่าผลรวม"
      ],
      "built_in": ["puts", "gets", "length", "each", "map", "gsub"]
    },
    "syntax": {
      "comments": ["# Single line => คอมเมนต์บรรทัดเดียว", "=begin ... =end => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else...end", "unless", "case...when"],
      "loops": ["for...in...do...end", "while...do...end", "until...do...end", "each", "loop"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!"],
      "examples": [
        "if age >= 18 puts 'Adult' else puts 'Minor' end => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "5.times { |i| puts i } => วนลูป 5 ครั้ง และพิมพ์ค่า i (0 ถึง 4) ในแต่ละรอบ"
      ]
    },
    "frameworks": ["Ruby on Rails", "Sinatra", "Hanami"],
    "learning_resources": ["Ruby-lang.org", "Rails Guides", "Codecademy", "Learn Ruby the Hard Way"],
    "popularity_rank": 10,
    "salary_range": "30,000 - 90,000 บาท/เดือน"
  },
  {
    "id": 7,
    "name": "Go",
    "slug": "go",
    "desc": "ภาษาที่ Google พัฒนาขึ้นมาเพื่อความเร็ว, ประสิทธิภาพ และ Concurrency เหมาะสำหรับ System Programming, Cloud และ Backend Services",
    "by": "Robert Griesemer, Rob Pike, Ken Thompson (Google)",
    "yr": "2009",
    "level": "2",
    "par": ["Concurrent", "Compiled", "Procedural"],
    "cateid": [2, 4],
    "logo": "img/go.png",
    "fields": ["Cloud Infrastructure", "Web Backend", "System Programming", "Network Programming", "DevOps / Automation", "Distributed Systems", "Containerization (Docker, Kubernetes)"],
    "pros": [
      "ประสิทธิภาพและความเร็วสูง (Compiled Language)",
      "จัดการ Concurrency ได้ง่ายด้วย Goroutines และ Channels",
      "Compile Time สั้น",
      "มี Garbage Collection ในตัว",
      "Syntax เรียบง่าย เรียนรู้ไม่ยาก",
      "Cross-platform Compilation ที่ง่าย"
    ],
    "cons": [
      "ไม่มี Generics (ก่อน Go 1.18)",
      "Error Handling ที่ซ้ำซ้อน (if err != nil)",
      "Community เล็กกว่าภาษาหลักบางภาษา",
      "ไม่มีฟีเจอร์ OOP เต็มรูปแบบ"
    ],
    "variables": {
      "declaration": ["var name string", "name := \"value\""],
      "types": ["int", "float64", "bool", "string", "array", "slice", "map", "struct"],
      "examples": [
        "var name string = \"Frank\" => ประกาศตัวแปร name ชนิด string และกำหนดค่าเป็น \"Frank\"",
        "age := 20 => กำหนดตัวแปร age เป็นตัวเลข 20 (ใช้ Short Declaration Operator :=)",
        "var isActive bool = true => ประกาศตัวแปร isActive เป็นบูลีนและกำหนดค่าเป็น true",
        "numbers := []int{1, 2, 3} => กำหนดตัวแปร numbers เป็น Slice ของ integer ที่มีค่า 1, 2, 3"
      ]
    },
    "functions": {
      "declaration": ["func functionName(params) returnType { ... }"],
      "examples": [
        "func greet(name string) string { return \"Hello \" + name } => ประกาศฟังก์ชัน greet ที่รับ string name และคืนค่า string โดยคืนค่าสตริง 'Hello ' ตามด้วย name",
        "func add(a, b int) int { return a + b } => ประกาศฟังก์ชัน add ที่รับ int a, int b และคืนค่า int โดยคืนค่าผลรวม"
      ],
      "built_in": ["fmt.Println()", "len()", "make()", "new()", "append()", "copy()"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else if...else", "switch"],
      "loops": ["for (only for loop)"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!"],
      "examples": [
        "if age >= 18 { fmt.Println(\"Adult\") } else { fmt.Println(\"Minor\") } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "for i := 0; i < 5; i++ { fmt.Println(i) } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
      ]
    },
    "frameworks": ["Gin", "Echo", "Revel", "Gorilla Mux"],
    "learning_resources": ["Go Tour", "Go by Example", "Effective Go", "Golang.org Docs"],
    "popularity_rank": 7,
    "salary_range": "40,000 - 110,000 บาท/เดือน"
  },
  {
    "id": 8,
    "name": "Swift",
    "slug": "swift",
    "desc": "ภาษาโปรแกรมที่ Apple พัฒนาขึ้นมาเพื่อสร้างแอปพลิเคชันสำหรับ iOS, macOS, watchOS และ tvOS เน้นความปลอดภัยและประสิทธิภาพ",
    "by": "Apple Inc.",
    "yr": "2014",
    "level": "4",
    "par": ["Multi-paradigm", "Object-oriented", "Functional", "Protocol-oriented"],
    "cateid": [1, 3],
    "logo": "img/swift.png",
    "fields": ["Mobile Apps", "Desktop Applications", "Game Development", "AR / VR Development"],
    "pros": [
      "ทำงานร่วมกับ Cocoa/Cocoa Touch Framework ได้ดีเยี่ยม",
      "ปลอดภัยสูงด้วย Optional Types และ Automatic Reference Counting (ARC)",
      "ประสิทธิภาพรวดเร็ว",
      "Syntax กระชับและอ่านง่าย",
      "รองรับ Concurrency Asynchronous",
      "มี Playgrounds ช่วยในการทดลองโค้ด"
    ],
    "cons": [
      "ผูกติดกับ Apple Ecosystem เป็นหลัก",
      "Community เล็กกว่าภาษา Cross-platform",
      "การ Migration ข้าม Version (บ่อยครั้งที่ต้องปรับโค้ดตาม Version ใหม่)"
    ],
    "variables": {
      "declaration": ["var", "let"],
      "types": ["Int", "Double", "String", "Bool", "Array", "Dictionary", "Optional"],
      "examples": [
        "var name = \"Grace\" => กำหนดตัวแปร name (สามารถเปลี่ยนค่าได้) เป็นสตริง \"Grace\"",
        "let age = 27 => กำหนดค่าคงที่ age (ไม่สามารถเปลี่ยนค่าได้) เป็นตัวเลข 27",
        "var greeting: String = \"Hello\" => ประกาศตัวแปร greeting ชนิด String และกำหนดค่าเป็น \"Hello\" (Explicit Type Annotation)",
        "var scores: [Int] = [80, 90, 75] => กำหนดตัวแปร scores เป็นอาร์เรย์ของ Int ที่มีค่า 80, 90, 75"
      ]
    },
    "functions": {
      "declaration": ["func functionName(params) -> ReturnType { ... }"],
      "examples": [
        "func greet(name: String) -> String { return \"Hello \\(name)\" } => ประกาศฟังก์ชัน greet ที่รับ name ชนิด String และคืนค่า String โดยคืนค่าสตริง 'Hello ' ตามด้วย name",
        "func add(a: Int, b: Int) -> Int { a + b } => ประกาศฟังก์ชัน add ที่รับ Int a, Int b และคืนค่า Int โดยคืนค่าผลรวม (Implied Return สำหรับ Single-expression functions)"
      ],
      "built_in": ["print()", "Optional Chaining (?. )", "Guard Let", "nil coalescing (??)"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else", "guard let / guard var", "switch"],
      "loops": ["for...in", "while", "repeat-while"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!"],
      "examples": [
        "if age >= 18 { print(\"Adult\") } else { print(\"Minor\") } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "for i in 0..<5 { print(i) } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ (Half-open range operator)"
      ]
    },
    "frameworks": ["Cocoa Touch (UIKit, SwiftUI)", "Combine", "Core Data"],
    "learning_resources": ["Apple Developer Docs", "RayWenderlich.com", "Hacking with Swift", "Swift.org"],
    "popularity_rank": 8,
    "salary_range": "40,000 - 110,000 บาท/เดือน"
  },
  {
    "id": 9,
    "name": "Kotlin",
    "slug": "kotlin",
    "desc": "ภาษาที่ Google แนะนำสำหรับ Android Development ทำงานบน JVM และเข้ากันได้กับ Java 100%",
    "by": "JetBrains",
    "yr": "2011",
    "level": "4",
    "par": ["Object-oriented", "Functional", "Procedural"],
    "cateid": [1, 3],
    "logo": "img/kotlin.png",
    "fields": ["Mobile Apps", "Web Backend", "Desktop Applications", "Android Development", "Full-stack Development (Ktor)"],
    "pros": [
      "Interoperable กับ Java ได้ 100%",
      "Syntax กระชับและปลอดภัยกว่า Java (Null Safety)",
      "มี Coroutines สำหรับ Asynchronous Programming",
      "มี Community เติบโตอย่างรวดเร็ว (โดยเฉพาะ Android)",
      "สนับสนุน Multiplatform (Kotlin Multiplatform Mobile)"
    ],
    "cons": [
      "Compile Time อาจช้ากว่า Java (ในบางกรณี)",
      "ขนาด Community ยังเล็กกว่า Java",
      "ทรัพยากรการเรียนรู้น้อยกว่า Java"
    ],
    "variables": {
      "declaration": ["val", "var"],
      "types": ["Int", "Double", "String", "Boolean", "Array", "List", "Map", "Set", "Any (equivalent to Java's Object)"],
      "examples": [
        "val name = \"Helen\" => ประกาศตัวแปร name (immutable) เป็นสตริง \"Helen\"",
        "var age = 29 => ประกาศตัวแปร age (mutable) เป็นตัวเลข 29",
        "val isActive: Boolean = true => ประกาศตัวแปร isActive ชนิด Boolean และกำหนดค่าเป็น true (Explicit Type Annotation)",
        "val numbers = listOf(1, 2, 3) => กำหนดตัวแปร numbers เป็น List ที่มีค่า 1, 2, 3"
      ]
    },
    "functions": {
      "declaration": ["fun functionName(params): ReturnType { ... }"],
      "examples": [
        "fun greet(name: String): String { return \"Hello $name\" } => ประกาศฟังก์ชัน greet ที่รับ String name และคืนค่า String โดยคืนค่าสตริง 'Hello ' ตามด้วย name",
        "fun add(a: Int, b: Int): Int = a + b => ประกาศฟังก์ชัน add ที่รับ Int a, Int b และคืนค่า Int โดยคืนค่าผลรวม (Single-expression function)"
      ],
      "built_in": ["println()", "apply()", "let()", "also()", "with()", "run()"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else (เป็น Expression)", "when (คล้าย switch)"],
      "loops": ["for", "while", "do...while"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!"],
      "examples": [
        "if (age >= 18) { println(\"Adult\") } else { println(\"Minor\") } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "for (i in 0 until 5) { println(i) } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ (Range expression)"
      ]
    },
    "frameworks": ["Android SDK", "Spring Boot (with Kotlin)", "Ktor", "Vert.x"],
    "learning_resources": ["Kotlinlang.org", "Android Developers Docs", "Kodeco (Ray Wenderlich)", "Coursera Kotlin"],
    "popularity_rank": 12,
    "salary_range": "35,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 10,
    "name": "PHP",
    "slug": "php",
    "desc": "ภาษาสคริปต์ฝั่งเซิร์ฟเวอร์ที่ได้รับความนิยมสูง ใช้สร้างเว็บไซต์ไดนามิก เช่น WordPress, Facebook รุ่นแรก",
    "by": "Rasmus Lerdorf",
    "yr": "1995",
    "level": "4",
    "par": ["Imperative", "Object-oriented", "Procedural", "Functional"],
    "cateid": [1],
    "logo": "img/php.png",
    "fields": ["Web Backend", "Web Frontend (via frameworks)", "CMS Development (WordPress)", "e-commerce (Magento)"],
    "pros": [
      "เรียนรู้ได้ง่าย",
      "มี Framework และ CMS มากมาย (เช่น Laravel, WordPress)",
      "ทำงานร่วมกับ MySQL ได้ดี",
      "รันบนเซิร์ฟเวอร์ได้เกือบทุกที่",
      "Community ขนาดใหญ่"
    ],
    "cons": [
      "โครงสร้างไม่เป็นระเบียบในโปรเจกต์ขนาดใหญ่ (หากเขียนไม่ดี)",
      "ประสิทธิภาพอาจเป็นรองภาษาอื่นในบางกรณี",
      "มีช่องโหว่หากเขียนไม่ปลอดภัย"
    ],
    "variables": {
      "declaration": ["$variableName"],
      "types": ["int", "float", "string", "bool", "array", "object", "null", "resource"],
      "examples": [
        "$name = 'John'; => ประกาศตัวแปร $name เป็นสตริงและกำหนดค่าเป็น 'John'",
        "$age = 30; => ประกาศตัวแปร $age เป็นตัวเลขจำนวนเต็มและกำหนดค่าเป็น 30",
        "$isActive = true; => ประกาศตัวแปร $isActive เป็นบูลีนและกำหนดค่าเป็น true",
        "$items = [1, 2, 3]; => ประกาศตัวแตร $items เป็นอาร์เรย์ที่มีค่า 1, 2, 3"
      ]
    },
    "functions": {
      "declaration": ["function functionName($param) { ... }"],
      "examples": [
        "function greet($name) { return 'Hello ' . $name; } => ประกาศฟังก์ชันชื่อ greet ที่รับพารามิเตอร์ $name และคืนค่าสตริง 'Hello ' ต่อด้วยค่า $name",
        "$sum = fn($a, $b) => $a + $b; => กำหนดตัวแปร $sum เป็น Arrow Function ที่รับ $a และ $b และคืนค่าผลรวม"
      ],
      "built_in": ["echo", "print_r()", "isset()", "empty()", "strlen()", "array_merge()", "json_encode()"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด", "# Single line (Unix-style) => คอมเมนต์บรรทัดเดียว (สไตล์ Unix)"],
      "conditions": ["if...else", "switch"],
      "loops": ["for", "while", "do...while", "foreach"],
      "operators": ["+", "-", "*", "/", "==", "===", "!=", "&&", "||", "."],
      "examples": [
        "if ($age >= 18) { echo 'Adult'; } => ถ้า $age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
        "foreach ($items as $item) { echo $item; } => วนซ้ำในอาร์เรย์ $items และพิมพ์ค่า $item แต่ละตัว"
      ]
    },
    "frameworks": ["Laravel", "Symfony", "CodeIgniter", "WordPress", "Drupal", "Joomla"],
    "learning_resources": ["PHP Manual", "W3Schools PHP", "Laracasts", "GeeksforGeeks"],
    "popularity_rank": 9,
    "salary_range": "30,000 - 90,000 บาท/เดือน"
  },
  {
    "id": 11,
    "name": "TypeScript",
    "slug": "typescript",
    "desc": "Superset ของ JavaScript ที่เพิ่ม Static Typing ช่วยให้โค้ดมีโครงสร้างและลดข้อผิดพลาด เหมาะสำหรับโปรเจกต์ขนาดใหญ่",
    "by": "Microsoft",
    "yr": "2012",
    "level": "4",
    "par": ["Multi-paradigm", "Object-oriented", "Functional"],
    "cateid": [1, 3],
    "logo": "img/ts.png",
    "fields": ["Web Frontend", "Web Backend", "Mobile Apps", "Desktop Applications", "Game Development", "Tooling / Automation"],
    "pros": [
      "เพิ่ม Type Safety ให้ JavaScript",
      "ช่วยลด Bug ในตอน Compile Time",
      "ปรับปรุง Tooling และ Autocomplete ใน IDE",
      "ทำให้โค้ดอ่านและดูแลรักษาง่ายขึ้น",
      "รองรับคุณสมบัติใหม่ๆ ของ JavaScript ก่อนที่ Browser จะรองรับ"
    ],
    "cons": [
      "มี Learning Curve เพิ่มเติมจาก JavaScript",
      "ต้องมีการ Compile (Transpilation) ก่อนรัน",
      "อาจเพิ่มความซับซ้อนให้กับโปรเจกต์ขนาดเล็ก",
      "Community เล็กกว่า JavaScript"
    ],
    "variables": {
      "declaration": ["let", "const", "var"],
      "types": ["string", "number", "boolean", "any", "unknown", "void", "null", "undefined", "Array", "Tuple", "Enum", "Interface", "Class"],
      "examples": [
        "let username: string = 'Alice'; => ประกาศตัวแปร username ชนิด string และกำหนดค่าเป็น 'Alice'",
        "const age: number = 25; => กำหนดค่าคงที่ age ชนิด number และกำหนดค่าเป็น 25",
        "let isActive: boolean = true; => ประกาศตัวแปร isActive ชนิด boolean และกำหนดค่าเป็น true",
        "let items: number[] = [1, 2, 3]; => ประกาศตัวแปร items เป็นอาร์เรย์ของ number"
      ]
    },
    "functions": {
      "declaration": ["function name(params: type): returnType { ... }"],
      "examples": [
        "function greet(name: string): string { return `Hello ${name}`; } => ประกาศฟังก์ชัน greet ที่รับ name ชนิด string และคืนค่า string โดยคืนค่าสตริง 'Hello ' ตามด้วย name",
        "const add = (a: number, b: number): number => a + b; => กำหนดฟังก์ชัน add โดยใช้ Arrow Function ที่รับ number a, number b และคืนค่า number โดยคืนค่าผลรวม"
      ],
      "built_in": ["console.log()", "Array.map()", "JSON.parse()"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else", "switch"],
      "loops": ["for", "while", "do...while", "forEach", "for...of", "for...in"],
      "operators": ["+", "-", "*", "/", "%", "==", "===", "!=", "!==", "&&", "||", "!"],
      "examples": [
        "if (age >= 18) { console.log('Adult'); } else { console.log('Minor'); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "for (let i = 0; i < 5; i++) { console.log(i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
      ]
    },
    "frameworks": ["Angular", "NestJS", "TypeORM", "React (with TypeScript)", "Vue (with TypeScript)"],
    "learning_resources": ["TypeScriptLang.org", "Microsoft TypeScript Docs", "Ultimate TypeScript"],
    "popularity_rank": 5,
    "salary_range": "40,000 - 110,000 บาท/เดือน"
  },
  {
    "id": 12,
    "name": "C",
    "slug": "c",
    "desc": "ภาษาโปรแกรมพื้นฐานที่ใช้ในการพัฒนา Operating Systems, Embedded Systems และ Game Engines",
    "by": "Dennis Ritchie",
    "yr": "1972",
    "level": "1",
    "par": ["Procedural", "Imperative", "Low-level"],
    "cateid": [2, 4],
    "logo": "img/c.png",
    "fields": ["Operating Systems", "Embedded Systems", "System Programming", "Game Development", "Cybersecurity", "High-Performance Computing", "Compiler / Language Design", "Network Programming"],
    "pros": [
      "ประสิทธิภาพและความเร็วสูง",
      "ควบคุม Hardware ได้โดยตรง (Memory Management Manual)",
      "เป็นพื้นฐานของภาษาอื่นๆ มากมาย",
      "มีขนาดเล็กและใช้ทรัพยากรน้อย",
      "เหมาะสำหรับ System-level Programming"
    ],
    "cons": [
      "Learning Curve สูง",
      "ไม่มี Garbage Collection (ต้องจัดการ Memory เอง)",
      "เสี่ยงต่อ Memory Leaks และ Pointer Errors",
      "โค้ดไม่ Portable ระหว่าง Platforms (ในบางกรณี)",
      "พัฒนาได้ช้ากว่าภาษาระดับสูง"
    ],
    "variables": {
      "declaration": ["dataType variableName;"],
      "types": ["int", "float", "double", "char", "void", "pointer", "struct", "union", "enum"],
      "examples": [
        "char name[] = \"Bob\"; => ประกาศตัวแปร name เป็นอาร์เรย์ของ char (สตริง) และกำหนดค่าเป็น \"Bob\"",
        "int age = 20; => ประกาศตัวแปร age เป็นตัวเลขจำนวนเต็มและกำหนดค่าเป็น 20",
        "float temperature = 25.5f; => ประกาศตัวแปร temperature เป็นตัวเลขทศนิยมและกำหนดค่าเป็น 25.5",
        "int* ptr = &age; => ประกาศตัวแปร ptr เป็น Pointer ที่ชี้ไปยังที่อยู่ของตัวแปร age"
      ]
    },
    "functions": {
      "declaration": ["returnType functionName(params) { ... }"],
      "examples": [
        "char* greet(char* name) { /* ... */ return result; } => ประกาศฟังก์ชัน greet ที่รับ char* name และคืนค่า char* (สตริง) โดยคืนค่าสตริงที่สร้างขึ้น",
        "int add(int a, int b) { return a + b; } => ประกาศฟังก์ชัน add ที่รับ int a, int b และคืนค่า int โดยคืนค่าผลรวม"
      ],
      "built_in": ["printf()", "scanf()", "malloc()", "free()", "strlen()", "strcpy()"]
    },
    "syntax": {
      "comments": ["// Single line (C99) => คอมเมนต์บรรทัดเดียว (ตั้งแต่ C99)", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else", "switch"],
      "loops": ["for", "while", "do...while"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!", "&", "*"],
      "examples": [
        "if (age >= 18) { printf(\"Adult\\n\"); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
        "for (int i = 0; i < 5; i++) { printf(\"%d\\n\", i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ"
      ]
    },
    "frameworks": ["ไม่มี Framework ในระดับเดียวกับภาษาอื่น (ใช้ Libraries เป็นหลัก เช่น POSIX, OpenGL)"],
    "learning_resources": ["The C Programming Language (K&R)", "GeeksforGeeks C", "Learn-C.org"],
    "popularity_rank": 7,
    "salary_range": "35,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 13,
    "name": "R",
    "slug": "r",
    "desc": "ภาษาโปรแกรมที่นิยมใช้ในงานสถิติ การวิเคราะห์ข้อมูล และงานด้าน Data Science",
    "by": "Ross Ihaka & Robert Gentleman",
    "yr": "1993",
    "level": "4",
    "par": ["Functional", "Imperative", "Object-oriented"],
    "cateid": [3],
    "logo": "img/r.png",
    "fields": ["Data Science / Analytics", "AI / Machine Learning", "Scientific Computing", "Data Visualization", "Statistical Modeling"],
    "pros": [
      "ยอดเยี่ยมสำหรับ Statistical Analysis",
      "มี Ecosystem ที่หลากหลายสำหรับ Data Science",
      "มี Library สำหรับ Data Visualization ที่โดดเด่น (ggplot2)",
      "มี Packages ทางสถิติจำนวนมาก",
      "รองรับ Vectorized Operations"
    ],
    "cons": [
      "Learning Curve สูงสำหรับผู้ที่ไม่มีพื้นฐานสถิติ",
      "ปัญหา Memory Management กับ Dataset ขนาดใหญ่",
      "ประสิทธิภาพการประมวลผล (สำหรับงานที่ไม่ใช่ Vectorized) ยังไม่ดีเท่าภาษาอื่น",
      "Syntax บางส่วนไม่สอดคล้องกัน"
    ],
    "variables": {
      "declaration": ["Assignment with <- or ="],
      "types": ["numeric", "character", "logical", "factor", "vector", "list", "data.frame", "matrix"],
      "examples": [
        "name <- 'Alice' => กำหนดตัวแปร name เป็นสตริง 'Alice'",
        "age <- 25 => กำหนดตัวแปร age เป็นตัวเลข 25",
        "is_active <- TRUE => กำหนดตัวแปร is_active เป็นค่าตรรกะ TRUE",
        "numbers <- c(1, 2, 3, 4, 5) => กำหนดตัวแปร numbers เป็นเวกเตอร์ (Vector) ที่มีค่า 1, 2, 3, 4, 5",
        "person <- list(name='Bob', age=30) => กำหนดตัวแตร person เป็น List ที่มีสองสมาชิกคือ name='Bob' และ age=30"
      ]
    },
    "functions": {
      "declaration": ["function() keyword"],
      "examples": [
        "greet <- function(name) { paste('Hello', name) } => ประกาศฟังก์ชันชื่อ greet ที่รับ name และคืนค่าสตริง 'Hello ' ตามด้วย name",
        "add <- function(a, b = 0) { return(a + b) } => ประกาศฟังก์ชันชื่อ add ที่รับ a และ b (b มีค่าเริ่มต้นเป็น 0) และคืนค่าผลรวม"
      ],
      "built_in": ["mean()", "sum()", "length()", "str()", "summary()", "head()", "tail()", "apply()"]
    },
    "syntax": {
      "comments": ["# Single line => คอมเมนต์บรรทัดเดียว"],
      "conditions": ["if...else", "ifelse() (vectorized)"],
      "loops": ["for", "while", "repeat", "apply family"],
      "operators": ["+", "-", "*", "/", "^", "==", "!=", "<", ">", "&", "|", "!"],
      "examples": [
        "if (age >= 18) { print('Adult') } => ถ้า age มีค่ามากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
        "for (i in 1:10) { print(i) } => วนลูปให้ i มีค่าตั้งแต่ 1 ถึง 10 และพิมพ์ i ในแต่ละรอบ",
        "result <- ifelse(age >= 18, 'Adult', 'Minor') => กำหนด result เป็น 'Adult' ถ้า age >= 18 ไม่อย่างนั้นเป็น 'Minor'"
      ]
    },
    "frameworks": ["ggplot2", "dplyr", "tidyr", "shiny", "caret", "randomForest", "data.table"],
    "learning_resources": ["R for Data Science", "The R Book", "Advanced R", "R Graphics Cookbook"],
    "popularity_rank": 11,
    "salary_range": "50,000 - 160,000 บาท/เดือน"
  },
  {
    "id": 14,
    "name": "SwiftUI",
    "slug": "swiftui",
    "desc": "Framework ของ Apple สำหรับการสร้าง User Interface ในแอปพลิเคชัน iOS, macOS และแพลตฟอร์ม Apple อื่นๆ ด้วยวิธี Declarative UI",
    "by": "Apple Inc.",
    "yr": "2019",
    "level": "4",
    "par": ["Declarative UI", "Functional Reactive Programming"],
    "cateid": [1],
    "logo": "img/swift.png",
    "fields": ["Mobile Apps", "Desktop Applications", "AR / VR Development"],
    "pros": [
      "โค้ดกระชับและอ่านง่ายด้วย Declarative Syntax",
      "Live Previews ช่วยให้พัฒนา UI ได้รวดเร็ว",
      "สร้าง UI ได้ในทุกแพลตฟอร์มของ Apple ด้วยโค้ดเดียว",
      "มี State Management ในตัว (State, Binding, ObservedObject)",
      "รองรับ Dark Mode, Localization, Accessibility ได้ง่าย"
    ],
    "cons": [
      "ยังใหม่กว่า UIKit Community/Resources ยังน้อยกว่า",
      "รองรับเฉพาะ Apple Platforms",
      "ประสิทธิภาพอาจเป็นรอง UIKit สำหรับ UI ที่ซับซ้อนมาก",
      "Learning Curve สูงหากไม่มีพื้นฐาน Declarative UI"
    ],
    "variables": {
      "declaration": ["@State", "@Binding", "@ObservedObject", "@EnvironmentObject", "var", "let"],
      "types": ["View", "Text", "Image", "Button", "List", "ForEach", "State", "Binding"],
      "examples": [
        "@State private var counter = 0 => ประกาศตัวแปร State ชื่อ counter ชนิด Int เริ่มต้นที่ 0 สำหรับจัดการสถานะ UI",
        "var body: some View { Text(\"Hello\") } => ส่วน Body ของ View ที่คืนค่า Text \"Hello\"",
        "struct ContentView: View { ... } => การประกาศโครงสร้าง ContentView ที่เป็นไปตาม Protocol View"
      ]
    },
    "functions": {
      "declaration": ["func functionName(params) -> ReturnType { ... }"],
      "examples": [
        "Button(\"Tap Me\") { self.counter += 1 } => สร้าง Button ที่มีข้อความ \"Tap Me\" และเมื่อกดจะเพิ่มค่า counter",
        "List { ForEach(items) { item in Text(item.name) } } => สร้าง List โดยวนซ้ำ items และแสดงชื่อของแต่ละ item ใน Text"
      ],
      "built_in": [".padding()", ".font()", ".foregroundColor()", ".frame()", ".navigationTitle()"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if", "else", "switch (ใช้ใน View builders)"],
      "loops": ["ForEach (สำหรับวนซ้ำใน View)"],
      "operators": ["(ใช้ Swift operators)", "View Modifiers (.modifierName())"],
      "examples": [
        "VStack { if showText { Text(\"Visible\") } else { Text(\"Hidden\") } } => สร้าง VStack โดยแสดง Text \"Visible\" ถ้า showText เป็นจริง ไม่อย่างนั้นแสดง \"Hidden\"",
        "Button(\"Toggle\") { showText.toggle() } => สร้าง Button ที่เมื่อกดจะสลับค่า showText"
      ]
    },
    "frameworks": ["Combine (for reactive programming)", "Core Data (for persistence)"],
    "learning_resources": ["Apple SwiftUI Tutorials", "Hacking with Swift", "RayWenderlich.com (Kodeco)", "SwiftUI by Example"],
    "popularity_rank": 15,
    "salary_range": "40,000 - 120,000 บาท/เดือน"
  },
  {
    "id": 15,
    "name": "Assembly",
    "slug": "assembly",
    "desc": "ภาษาโปรแกรมระดับต่ำที่ใช้ในการสื่อสารโดยตรงกับฮาร์ดแวร์ มีความเร็วและควบคุมได้สูงแต่เขียนยาก",
    "by": "Various (CPU-specific)",
    "yr": "1949",
    "level": "1",
    "par": ["Low-level", "Imperative", "Procedural"],
    "cateid": [4],
    "logo": "img/asm.png",
    "fields": ["Embedded Systems", "Operating Systems", "System Programming", "Cybersecurity", "Game Development (optimization)", "Compiler / Language Design"],
    "pros": [
      "Maximum performance และ efficiency",
      "Complete hardware control",
      "Minimal memory usage",
      "Direct CPU instruction mapping",
      "No runtime overhead",
      "Essential for system programming",
      "Understanding computer architecture"
    ],
    "cons": [
      "Extremely difficult to learn และ write",
      "Platform-specific code",
      "Time-consuming development",
      "Difficult to debug และ maintain",
      "No portability",
      "Requires deep hardware knowledge",
      "Error-prone programming"
    ],
    "variables": {
      "declaration": ["Registers และ memory locations"],
      "types": ["byte", "word", "dword", "qword"],
      "examples": [
        "mov eax, 25         ; Load 25 into EAX register => โหลดค่า 25 เข้าไปใน Register EAX",
        "mov [variable], eax ; Store EAX into memory => เก็บค่าจาก Register EAX ลงในตำแหน่งหน่วยความจำที่ชื่อ variable",
        "variable db 'Hello' ; Define byte string => กำหนดตัวแปรชื่อ variable เป็นสตริงแบบไบต์ (byte string) โดยมีค่า 'Hello'",
        "number dw 1234      ; Define word (16-bit) => กำหนดตัวแปรชื่อ number เป็น Word (16-bit) โดยมีค่า 1234",
        "array dd 1,2,3,4    ; Define dword array => กำหนดตัวแปรชื่อ array เป็น Dword (32-bit) Array โดยมีค่า 1,2,3,4"
      ]
    },
    "functions": {
      "declaration": ["Labels และ procedures"],
      "examples": [
        "add_numbers: mov eax, ebx add eax, ecx ret => กำหนด Label (จุดเริ่มต้นฟังก์ชัน) ชื่อ add_numbers, ย้ายค่าจาก ebx ไป eax, เพิ่มค่า ecx เข้าไปใน eax, และกลับ (ret) จากฟังก์ชัน",
        "print_hello: mov eax, 4 mov ebx, 1 int 0x80 ret => กำหนด Label ชื่อ print_hello, กำหนดค่าใน Register ต่างๆ เพื่อเตรียมเรียก System Call สำหรับพิมพ์ข้อความ และกลับจากฟังก์ชัน",
        "main: call add_numbers call print_hello => กำหนด Label ชื่อ main, เรียกฟังก์ชัน add_numbers และเรียกฟังก์ชัน print_hello",
        "factorial: cmp eax, 1 jle base_case => กำหนด Label ชื่อ factorial, เปรียบเทียบค่าใน eax กับ 1, ถ้า eax น้อยกว่าหรือเท่ากับ 1 ให้กระโดดไปยัง Label base_case"
      ],
      "built_in": ["CPU instructions: mov, add, sub, mul, div, cmp, jmp, call, ret"]
    },
    "syntax": {
      "comments": ["; Single line comments => คอมเมนต์บรรทัดเดียว"],
      "conditions": ["Conditional jumps based on flags => การกระโดดแบบมีเงื่อนไขตามค่า Flag ของ CPU (เช่น Zero Flag, Carry Flag)"],
      "loops": ["Manual loop construction with jumps => การสร้างลูปด้วยการใช้คำสั่งกระโดด (jmp) ด้วยตัวเอง"],
      "operators": ["CPU arithmetic และ logic instructions => คำสั่งทางคณิตศาสตร์และตรรกะของ CPU"],
      "examples": [
        "cmp eax, 18   ; Compare EAX with 18 => เปรียบเทียบค่าใน EAX กับ 18",
        "jge adult     ; Jump if greater or equal => ถ้าค่าใน EAX มากกว่าหรือเท่ากับ 18 ให้กระโดดไปที่ Label ชื่อ adult"
      ]
    },
    "frameworks": ["MASM", "NASM", "GAS", "TASM", "FASM"],
    "learning_resources": ["Assembly Language Step-by-Step", "Programming from the Ground Up", "The Art of Assembly", "x86 Assembly Guide"],
    "popularity_rank": 20,
    "salary_range": "60,000 - 200,000 บาท/เดือน"
  },
  {
    "id": 16,
    "name": "Prolog",
    "slug": "prolog",
    "desc": "ภาษาโปรแกรมเชิงตรรกะ เหมาะกับการเขียนระบบ Expert Systems, AI และ Natural Language Processing",
    "by": "Alain Colmerauer",
    "yr": "1972",
    "level": "2",
    "par": ["Logic Programming", "Declarative"],
    "cateid": [3],
    "logo": "img/prolang.png",
    "fields": ["AI / Machine Learning", "Compiler / Language Design", "Natural Language Processing (NLP)", "Expert Systems"],
    "pros": [
      "Excellent for logical reasoning",
      "Automatic backtracking",
      "Pattern matching capabilities",
      "Good for AI และ NLP applications",
      "Declarative programming style",
      "Built-in unification algorithm",
      "Suitable for complex rule systems"
    ],
    "cons": [
      "Very different programming paradigm",
      "Limited practical applications",
      "Performance issues",
      "Debugging complexity",
      "Small community",
      "Not suitable for general programming",
      "Steep learning curve"
    ],
    "variables": {
      "declaration": ["Variables start with uppercase or _"],
      "types": ["atoms", "numbers", "variables", "compound terms"],
      "examples": [
        "parent(tom, bob).    % Facts => ประกาศ Fact ว่า tom เป็น parent ของ bob (parent คือความสัมพันธ์)",
        "parent(bob, ann).    % tom is parent of bob => ประกาศ Fact ว่า bob เป็น parent ของ ann",
        "X = 25              % Variable binding => กำหนด (ผูก) ตัวแปร X ให้มีค่าเป็น 25",
        "Name = alice        % Atom assignment => กำหนด (ผูก) ตัวแปร Name ให้มีค่าเป็น atom 'alice'",
        "List = [1, 2, 3, 4]   % List structure => กำหนด (ผูก) ตัวแปร List ให้เป็นโครงสร้างแบบ List ที่มีสมาชิก 1, 2, 3, 4"
      ]
    },
    "functions": {
      "declaration": ["Rules และ facts"],
      "examples": [
        "grandparent(X, Z) :- parent(X, Y), parent(Y, Z). => กำหนด Rule ว่า X เป็น grandparent ของ Z ถ้า X เป็น parent ของ Y และ Y เป็น parent ของ Z",
        "factorial(0, 1). => กำหนด Fact ว่า factorial ของ 0 คือ 1 (Base case สำหรับฟังก์ชัน factorial)",
        "factorial(N, F) :- N > 0, N1 is N-1, factorial(N1, F1), F is N * F1. => กำหนด Rule สำหรับ factorial: factorial ของ N คือ F ถ้า N มากกว่า 0, N1 คือ N-1, factorial ของ N1 คือ F1, และ F คือ N คูณ F1",
        "member(X, [X|_]). => กำหนด Rule ว่า X เป็นสมาชิกของ List ถ้า X เป็น Head ของ List"
      ],
      "built_in": ["is/2", "=../2", "findall/3", "bagof/3", "setof/3", "assert/1", "retract/1"]
    },
    "syntax": {
      "comments": ["% Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["Built into logic structure => เงื่อนไขถูกฝังอยู่ในโครงสร้างตรรกะของ Rule และ Query"],
      "loops": ["Recursion และ backtracking => ใช้การเรียกซ้ำ (Recursion) และการย้อนกลับ (Backtracking) ในการวนซ้ำและการหาคำตอบ"],
      "operators": [":-", "=", "is", "=:=", "=\\=", "==", "\\=="],
      "examples": [
        "likes(mary, food). => Fact: Mary ชอบอาหาร",
        "likes(mary, wine) :- red(wine), dry(wine). => Rule: Mary ชอบไวน์ ถ้าไวน์นั้นเป็นสีแดงและแห้ง",
        "?- likes(mary, X).  % Query => Query: Mary ชอบอะไรบ้าง?",
        "append([], L, L). append([H|T], L, [H|R]) :- append(T, L, R). => Rule สำหรับการต่อ List: List ว่างต่อกับ L ได้ L. การต่อ [H|T] กับ L ได้ [H|R] ถ้า T ต่อกับ L ได้ R"
      ]
    },
    "frameworks": ["SWI-Prolog", "GNU Prolog", "YAP", "SICStus Prolog"],
    "learning_resources": ["Programming in Prolog", "The Art of Prolog", "Learn Prolog Now!", "Prolog Programming for AI"],
    "popularity_rank": 19,
    "salary_range": "50,000 - 150,000 บาท/เดือน"
  },
  {
    "id": 17,
    "name": "Haskell",
    "slug": "haskell",
    "desc": "ภาษา Functional Programming ที่มีความบริสุทธิ์สูง นิยมใช้ในงานวิชาการและการพัฒนาระบบที่ต้องการความถูกต้องทางตรรกะ",
    "by": "Simon Peyton Jones et al.",
    "yr": "1990",
    "level": "4",
    "par": ["Functional", "Pure Functional", "Lazy Evaluation"],
    "cateid": [3],
    "logo": "img/haskell.png",
    "fields": ["Compiler / Language Design", "Scientific Computing", "Academic Research", "Formal Verification", "Blockchain"],
    "pros": [
      "Pure functional programming - no side effects",
      "Strong type system prevents many bugs",
      "Lazy evaluation",
      "Excellent for mathematical computations",
      "Pattern matching และ algebraic data types",
      "Highly composable code",
      "Great for concurrent programming"
    ],
    "cons": [
      "Very steep learning curve",
      "Different mindset จาก imperative languages",
      "Limited job market",
      "Performance can be unpredictable",
      "Debugging functional code is challenging",
      "Small community เทียบกับ mainstream languages"
    ],
    "variables": {
      "declaration": ["Immutable bindings"],
      "types": ["Int", "Float", "Char", "Bool", "String", "List", "Maybe", "Either"],
      "examples": [
        "name = \"Alice\" => กำหนดตัวแปร name (ซึ่งเป็น immutable) ให้มีค่าเป็นสตริง \"Alice\"",
        "age = 25 => กำหนดตัวแปร age ให้มีค่าเป็นตัวเลขจำนวนเต็ม 25",
        "isActive = True => กำหนดตัวแปร isActive ให้มีค่าเป็นบูลีน True",
        "numbers = [1, 2, 3, 4, 5] => กำหนดตัวแตร numbers ให้เป็น List ของตัวเลข",
        "person = (\"Bob\", 30) => กำหนดตัวแปร person ให้เป็น Tuple (คู่) ที่มีสตริง \"Bob\" และตัวเลข 30",
        "maybeValue = Just 42 => กำหนดตัวแปร maybeValue ให้เป็น Maybe Type ที่มีค่า 42 (ระบุว่ามีค่า)"
      ]
    },
    "functions": {
      "declaration": ["Function definitions"],
      "examples": [
        "greet name = \"Hello \" ++ name => ประกาศฟังก์ชัน greet ที่รับพารามิเตอร์ name และคืนค่าสตริง 'Hello ' ต่อด้วย name",
        "add a b = a + b => ประกาศฟังก์ชัน add ที่รับพารามิเตอร์ a และ b และคืนค่าผลรวมของ a และ b",
        "factorial 0 = 1 => ประกาศ base case ของฟังก์ชัน factorial: factorial ของ 0 คือ 1",
        "factorial n = n * factorial (n - 1) => ประกาศ recursive case ของฟังก์ชัน factorial: factorial ของ n คือ n คูณ factorial ของ (n-1)",
        "map' f [] = [] => Base case ของฟังก์ชัน map' (สร้างขึ้นเอง): ถ้า List ว่างเปล่า จะคืน List ว่างเปล่า",
        "map' f (x:xs) = f x : map' f xs => Recursive case ของ map': นำฟังก์ชัน f ไปใช้กับ x และนำผลลัพธ์ไปต่อกับผลลัพธ์ของการเรียก map' ซ้ำกับ xs"
      ],
      "built_in": ["map", "filter", "fold"]
    },
    "syntax": {
      "comments": ["-- Single line => คอมเมนต์บรรทัดเดียว", "{- Multi line -} => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...then...else", "guards", "case...of"],
      "loops": ["Recursion และ higher-order functions"],
      "operators": ["+", "-", "*", "/", "==", "/=", "<", ">", "&&", "||", "++", ":", "!!"],
      "examples": [
        "if age >= 18 then \"Adult\" else \"Minor\" => ถ้า age มากกว่าหรือเท่ากับ 18 คืนค่า \"Adult\" ไม่อย่างนั้นคืนค่า \"Minor\"",
        "factorial n | n <= 1 = 1 | otherwise = n * factorial (n-1) => ฟังก์ชัน factorial ที่ใช้ guards: ถ้า n น้อยกว่าหรือเท่ากับ 1 คืน 1, ไม่อย่างนั้นคืน n คูณ factorial ของ (n-1)",
        "case maybe_value of Just x -> x; Nothing -> 0 => ใช้ case statement เพื่อจับคู่ Maybe Type: ถ้าเป็น Just x ให้คืนค่า x, ถ้าเป็น Nothing ให้คืน 0",
        "squares = [x^2 | x <- [1..10]] => สร้าง List ของกำลังสองของตัวเลขตั้งแต่ 1 ถึง 10 (List Comprehension)"
      ]
    },
    "frameworks": ["Yesod", "Snap", "Servant", "Persistent", "Conduit", "STM"],
    "learning_resources": ["Learn You a Haskell", "Real World Haskell", "Haskell Programming from First Principles", "What I Wish I Knew When Learning Haskell"],
    "popularity_rank": 17,
    "salary_range": "60,000 - 180,000 บาท/เดือน"
  },
  {
    "id": 18,
    "name": "SQL",
    "slug": "sql",
    "desc": "ภาษาสำหรับจัดการฐานข้อมูลเชิงสัมพันธ์ (Relational Database) ใช้ในการดึง แทรก ลบ และอัปเดตข้อมูล",
    "by": "Donald D. Chamberlin และ Raymond F. Boyce",
    "yr": "1974",
    "level": "5",
    "par": ["Declarative"],
    "cateid": [4],
    "logo": "img/sql.png",
    "fields": ["Database / SQL", "Data Science / Analytics", "Business Intelligence", "Data Warehousing"],
    "pros": [
      "ใช้งานง่าย มีโครงสร้างชัดเจน",
      "เหมาะสำหรับการจัดการข้อมูลขนาดใหญ่",
      "สามารถใช้กับระบบฐานข้อมูลหลากหลาย",
      "คำสั่งมีความเป็นมาตรฐานสากล"
    ],
    "cons": [
      "ไม่ใช่ภาษาโปรแกรมทั่วไป ไม่รองรับ logic ซับซ้อน",
      "ประสิทธิภาพขึ้นอยู่กับ RDBMS ที่ใช้",
      "ไม่เหมาะกับงานที่ต้องการ Process มาก"
    ],
    "variables": {
      "declaration": ["ไม่มีแบบภาษาอื่น ใช้ alias หรือ column name แทน"],
      "types": ["INT", "VARCHAR", "TEXT", "DATE", "BOOLEAN", "DECIMAL", "BLOB", "TIMESTAMP"],
      "examples": [
        "SELECT name FROM users; => เลือกคอลัมน์ name จากตาราง users",
        "INSERT INTO users (name, age) VALUES ('John', 25); => แทรกข้อมูลใหม่ 'John' และ 25 เข้าไปในคอลัมน์ name และ age ของตาราง users",
        "UPDATE users SET age = 30 WHERE name = 'John'; => อัปเดตค่า age เป็น 30 ในตาราง users สำหรับแถวที่ name เป็น 'John'"
      ]
    },
    "functions": {
      "declaration": ["ฟังก์ชันในตัว (Built-in)"],
      "examples": [
        "SELECT COUNT(*) FROM users; => นับจำนวนแถวทั้งหมดในตาราง users",
        "SELECT UPPER(name) FROM users; => เลือกคอลัมน์ name จากตาราง users โดยเปลี่ยนตัวอักษรเป็นตัวพิมพ์ใหญ่ทั้งหมด",
        "SELECT AVG(score) FROM grades; => เลือกค่าเฉลี่ยของคอลัมน์ score จากตาราง grades"
      ],
      "built_in": ["COUNT()", "SUM()", "AVG()", "MAX()", "MIN()", "NOW()", "LENGTH()", "UPPER()", "LOWER()", "DATE_FORMAT()"]
    },
    "syntax": {
      "comments": ["-- Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["WHERE", "HAVING", "CASE WHEN"],
      "loops": ["(ไม่มีโดยตรงใน SQL มาตรฐาน)"],
      "operators": ["=", "!=", "<", ">", "<=", ">=", "AND", "OR", "NOT", "LIKE", "IN", "BETWEEN", "IS NULL", "IS NOT NULL"],
      "examples": [
        "SELECT * FROM orders WHERE price > 100; => เลือกทุกคอลัมน์จากตาราง orders โดยมีเงื่อนไขว่า price ต้องมากกว่า 100",
        "SELECT name FROM users WHERE age BETWEEN 18 AND 30; => เลือกคอลัมน์ name จากตาราง users โดยมีเงื่อนไขว่า age อยู่ระหว่าง 18 ถึง 30",
        "SELECT product, CASE WHEN stock > 0 THEN 'In Stock' ELSE 'Out of Stock' END AS status FROM products; => เลือก product และสร้างคอลัมน์ status โดยใช้เงื่อนไข CASE WHEN"
      ]
    },
    "frameworks": ["SQL Server", "MySQL", "PostgreSQL", "SQLite", "Oracle", "MariaDB"],
    "learning_resources": ["W3Schools SQL", "SQLZoo", "Mode SQL Tutorial", "LeetCode SQL"],
    "popularity_rank": 3,
    "salary_range": "35,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 19,
    "name": "Objective-C",
    "slug": "objective-c",
    "desc": "ภาษาที่ Apple ใช้พัฒนา macOS และ iOS ก่อน Swift จะเข้ามาแทนที่ แต่ยังคงใช้ในระบบเดิมจำนวนมาก",
    "by": "Brad Cox และ Tom Love",
    "yr": "1984",
    "level": "2",
    "par": ["Object-oriented", "Reflective", "Imperative"],
    "cateid": [3],
    "logo": "img/obj-c.jpg",
    "fields": ["Mobile Apps", "Desktop Applications", "Legacy System Maintenance (Apple Ecosystem)"],
    "pros": [
      "ทำงานร่วมกับ C ได้อย่างราบรื่น",
      "เป็นรากฐานของแอป iOS/macOS จำนวนมาก",
      "มี Framework สนับสนุนอย่าง Foundation และ UIKit"
    ],
    "cons": [
      "ซินแทกซ์ยุ่งยาก (สำหรับผู้เริ่มต้น)",
      "ยากต่อการเรียนรู้เมื่อเทียบกับ Swift",
      "คอมมูนิตี้ลดลงเรื่อย ๆ (นิยม Swift มากกว่า)",
      "ไม่มี Null Safety เหมือน Swift"
    ],
    "variables": {
      "declaration": ["NSString *", "int", "BOOL"],
      "types": ["NSString", "int", "float", "BOOL", "NSArray", "NSDictionary", "NSNumber"],
      "examples": [
        "NSString *name = @\"Alice\"; => ประกาศตัวแปร name เป็นประเภท NSString (ออบเจกต์สตริง) และกำหนดค่าเป็น \"Alice\"",
        "int age = 25; => ประกาศตัวแปร age เป็นตัวเลขจำนวนเต็ม (int) และกำหนดค่าเป็น 25",
        "BOOL isActive = YES; => ประกาศตัวแปร isActive เป็นบูลีน (BOOL) และกำหนดค่าเป็น YES (จริง)"
      ]
    },
    "functions": {
      "declaration": ["- (returnType)methodName:(paramType)param; // Instance method", "+ (returnType)methodName:(paramType)param; // Class method"],
      "examples": [
        "- (void)sayHello { NSLog(@\"Hello\"); } => ประกาศเมธอดอินสแตนซ์ชื่อ sayHello ที่ไม่คืนค่า (void) และพิมพ์ 'Hello' ออกทางคอนโซล",
        "- (int)add:(int)a with:(int)b { return a + b; } => ประกาศเมธอดอินสแตนซ์ชื่อ add ที่รับพารามิเตอร์ int a และ int b และคืนค่าผลรวมเป็น int"
      ],
      "built_in": ["NSLog()", "NSArray", "NSDictionary", "NSString methods", "NSNumber methods"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else", "switch"],
      "loops": ["for", "while", "do...while", "for...in (Fast Enumeration)"],
      "operators": ["+", "-", "*", "/", "==", "!=", "&&", "||", ".", "->"],
      "examples": [
        "if (age >= 18) { NSLog(@\"Adult\"); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult'",
        "for (int i = 0; i < 5; i++) { NSLog(@\"%d\", i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ",
        "for (NSString *item in myArray) { NSLog(@\"%@\", item); } => วนซ้ำใน myArray และพิมพ์ item แต่ละตัว (Fast Enumeration)"
      ]
    },
    "frameworks": ["Foundation", "UIKit", "Cocoa", "Cocoa Touch", "Core Graphics"],
    "learning_resources": ["Apple Developer Docs (Legacy)", "RayWenderlich.com (Legacy)", "Objc.io (Archives)"],
    "popularity_rank": 25,
    "salary_range": "40,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 20,
    "name": "Scala",
    "slug": "scala",
    "desc": "ภาษาแบบ Functional + OOP ที่ทำงานบน JVM ใช้กับ Big Data และระบบ Enterprise ระดับสูง",
    "by": "Martin Odersky",
    "yr": "2004",
    "level": "3",
    "par": ["Multi-paradigm", "Object-oriented", "Functional"],
    "cateid": [2, 4],
    "logo": "img/scala.png",
    "fields": ["Big Data (Apache Spark)", "Web Backend", "Distributed Systems", "Cloud Infrastructure", "Enterprise Systems", "Compiler / Language Design"],
    "pros": [
      "สนับสนุน Functional และ OOP พร้อมกัน",
      "ทำงานร่วมกับ Java ได้ (บน JVM)",
      "เหมาะกับ Big Data (Apache Spark)",
      "มี Type Inference ที่ทรงพลัง",
      "Scalable สำหรับระบบขนาดใหญ่"
    ],
    "cons": [
      "มี Learning Curve ที่สูงมาก",
      "Compile Time ค่อนข้างช้า",
      "โค้ดอาจอ่านยากสำหรับมือใหม่",
      "Community ขนาดเล็กกว่า Java",
      "Tooling อาจไม่สมบูรณ์เท่า Java"
    ],
    "variables": {
      "declaration": ["val", "var"],
      "types": ["Int", "String", "Boolean", "List", "Map", "Option", "Tuple"],
      "examples": [
        "val name = \"Alice\" => ประกาศตัวแปร name เป็น immutable (เปลี่ยนค่าไม่ได้) และกำหนดค่าเป็นสตริง \"Alice\"",
        "var age = 30 => ประกาศตัวแปร age เป็น mutable (เปลี่ยนค่าได้) และกำหนดค่าเป็นตัวเลข 30",
        "val list = List(1, 2, 3) => ประกาศตัวแปร list เป็น immutable List ที่มีค่า 1, 2, 3",
        "val person = (\"Bob\", 30) => ประกาศตัวแปร person เป็น Tuple ที่มีสตริง \"Bob\" และตัวเลข 30"
      ]
    },
    "functions": {
      "declaration": ["def functionName(params): ReturnType = { ... }"],
      "examples": [
        "def add(a: Int, b: Int): Int = a + b => ประกาศฟังก์ชัน add ที่รับพารามิเตอร์ a และ b ชนิด Int และคืนค่าเป็น Int โดยคืนค่าผลรวม",
        "val greet = (name: String) => s\"Hello $name\" => กำหนดตัวแปร greet เป็นฟังก์ชัน (Lambda/Anonymous function) ที่รับ name ชนิด String และคืนค่าสตริง 'Hello ' ตามด้วย name"
      ],
      "built_in": ["map()", "filter()", "reduce()", "println()", "Option", "match"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else", "match (Pattern Matching)"],
      "loops": ["for", "while", "foreach"],
      "operators": ["+", "-", "*", "/", "==", "!=", "&&", "||"],
      "examples": [
        "if (age > 18) println(\"Adult\") => ถ้า age มากกว่า 18 ให้พิมพ์ \"Adult\"",
        "list.foreach(println) => วนซ้ำใน list และพิมพ์สมาชิกแต่ละตัวออกไป",
        "val result = age match { case x if x >= 18 => \"Adult\" case _ => \"Minor\" } => ใช้ match expression เพื่อกำหนดค่า result ตามเงื่อนไขของ age"
      ]
    },
    "frameworks": ["Play Framework", "Akka", "Apache Spark (written in Scala)", "Scalatra", "Cats", "Zio"],
    "learning_resources": ["Scala-lang.org", "Rock the JVM", "Coursera Functional Programming in Scala", "Scala Book"],
    "popularity_rank": 23,
    "salary_range": "50,000 - 150,000 บาท/เดือน"
  },
  {
    "id": 21,
    "name": "Shell",
    "slug": "shell",
    "desc": "ภาษาสคริปต์ที่ใช้ในการควบคุมระบบ Unix/Linux มักเขียนด้วย Bash หรือ sh ใช้ในการอัตโนมัติงาน DevOps และ System Admin",
    "by": "Brian Fox (GNU Bash)",
    "yr": "1989",
    "level": "2",
    "par": ["Scripting", "Imperative", "Procedural"],
    "cateid": [5],
    "logo": "img/bash.jfif",
    "fields": ["Scripting / Automation", "DevOps / Automation", "System Programming", "Cloud Infrastructure", "Cybersecurity", "Testing / QA Automation"],
    "pros": [
      "เหมาะกับการเขียนสคริปต์อัตโนมัติ",
      "ใช้ร่วมกับ Linux command ได้อย่างราบรื่น",
      "มีอยู่ใน Unix/Linux เกือบทุกระบบโดยไม่ต้องติดตั้งเพิ่ม",
      "จัดการไฟล์และ Process ได้ดี"
    ],
    "cons": [
      "ไม่มีระบบ Type ที่ชัดเจน",
      "ไม่เหมาะกับโปรแกรมซับซ้อนขนาดใหญ่",
      "Debug ยาก และ Error Message ไม่ชัดเจน",
      "Syntax ค่อนข้างไม่เป็นมิตรกับผู้เริ่มต้น"
    ],
    "variables": {
      "declaration": ["var=value"],
      "types": ["string (ทั้งหมดเป็น string โดยปริยาย)"],
      "examples": [
        "name=\"Alice\" => กำหนดตัวแปร name เป็นสตริง 'Alice'",
        "age=25 => กำหนดตัวแปร age เป็นสตริง '25' (ใน Shell ทุกอย่างเป็นสตริงโดยปริยาย)",
        "FILES=$(ls *.txt) => กำหนดตัวแปร FILES เป็นผลลัพธ์ของคำสั่ง ls *.txt (รายการไฟล์ .txt)"
      ]
    },
    "functions": {
      "declaration": ["function name { commands }", "name() { commands }"],
      "examples": [
        "greet() { echo \"Hello $1\"; } => ประกาศฟังก์ชันชื่อ greet ที่พิมพ์ 'Hello' ตามด้วยพารามิเตอร์ตัวแรก ($1)",
        "add() { echo $(($1 + $2)); } => ประกาศฟังก์ชันชื่อ add ที่พิมพ์ผลรวมของพารามิเตอร์ตัวแรก ($1) และตัวที่สอง ($2) โดยใช้การคำนวณทางคณิตศาสตร์"
      ],
      "built_in": ["echo", "read", "if", "for", "while", "test", "[ ]", "[[ ]]", "grep", "awk", "sed", "find", "xargs"]
    },
    "syntax": {
      "comments": ["# Single line => คอมเมนต์บรรทัดเดียว"],
      "conditions": ["if...then...else...fi", "case...in...esac"],
      "loops": ["for...in...do...done", "while...do...done", "until...do...done"],
      "operators": ["-eq", "-ne", "-gt", "-lt", "-ge", "-le", "==", "!=", "&&", "||", "-f", "-d"],
      "examples": [
        "if [ $age -gt 18 ]; then echo \"Adult\"; fi => ถ้าตัวแปร $age มีค่ามากกว่า 18 ให้พิมพ์ \"Adult\"",
        "for i in 1 2 3; do echo $i; done => วนลูปให้ i มีค่าตั้งแต่ 1 ถึง 3 และพิมพ์ค่า $i ในแต่ละรอบ",
        "case $choice in \"yes\") echo \"Agreed\";; \"no\") echo \"Declined\";; *) echo \"Invalid\";; esac => ใช้ case statement เพื่อจัดการเงื่อนไขหลายกรณี"
      ]
    },
    "frameworks": ["Bash-it", "Oh My Zsh (สำหรับ Zsh)", "Prezto (สำหรับ Zsh)"],
    "learning_resources": ["tldp.org (Bash Guide)", "ShellCheck", "Bash Scripting Guide", "DevOps Handbook"],
    "popularity_rank": 16,
    "salary_range": "35,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 22,
    "name": "Dart",
    "slug": "dart",
    "desc": "ภาษาโปรแกรมจาก Google ที่ถูกออกแบบมาเพื่อพัฒนาแอปพลิเคชัน Cross-platform โดยเฉพาะใช้ร่วมกับ Flutter สำหรับสร้างแอปมือถือและเว็บ",
    "by": "Google",
    "yr": "2011",
    "level": "3",
    "par": ["Object-oriented", "Class-based", "Imperative"],
    "cateid": [1, 4],
    "logo": "img/dart.png",
    "fields": ["Mobile Apps", "Web Frontend", "Web Backend", "Desktop Applications", "Cross-platform Development"],
    "pros": [
      "เขียนแอปได้ทั้ง iOS และ Android ด้วยโค้ดชุดเดียว (Flutter)",
      "ประสิทธิภาพสูงเมื่อ Compile เป็น Native Code",
      "มี Tooling ที่ดี (VS Code, Android Studio, DevTools)",
      "Syntax คล้ายภาษา C ทำให้เรียนง่าย",
      "มี Null Safety ป้องกัน Bug",
      "Hot Reload/Restart ใน Flutter ช่วยเร่งการพัฒนา"
    ],
    "cons": [
      "ไม่ใช่มาตรฐานของ Web โดยตรง (ต้อง Compile เป็น JS)",
      "Community ยังไม่ใหญ่เท่า JS หรือ Python",
      "ใช้ได้ดีสุดเมื่อจับคู่กับ Flutter เท่านั้น"
    ],
    "variables": {
      "declaration": ["var", "final", "const", "late"],
      "types": ["int", "double", "String", "bool", "List", "Map", "Set", "dynamic", "Object", "void"],
      "examples": [
        "var name = 'John'; => ประกาศตัวแปร name (ชนิดที่อนุมานได้) เป็นสตริงและกำหนดค่าเป็น 'John'",
        "final age = 25; => ประกาศตัวแปร age เป็น immutable (ไม่สามารถเปลี่ยนค่าได้หลังจากกำหนดครั้งแรก) และกำหนดค่าเป็น 25",
        "const pi = 3.14; => ประกาศตัวแปร pi เป็นค่าคงที่ (compile-time constant)",
        "late String message; => ประกาศตัวแปร message เป็น String ที่จะถูกกำหนดค่าในภายหลัง (lazy initialization)",
        "List<int> numbers = [1, 2, 3]; => ประกาศ List ของ Integer ที่มีค่า 1, 2, 3"
      ]
    },
    "functions": {
      "declaration": ["returnType functionName(params) { ... }", "returnType functionName(params) => expression; (Arrow Function)"],
      "examples": [
        "int add(int a, int b) => a + b; => ประกาศฟังก์ชัน add ที่รับ int a, int b และคืนค่า int โดยใช้ Arrow Function ในการคืนค่าผลรวม",
        "void greet(String name) { print('Hello $name'); } => ประกาศฟังก์ชัน greet ที่รับ String name และไม่คืนค่า (void) โดยพิมพ์ 'Hello ' ตามด้วย name",
        "var multiply = (x, y) => x * y; => กำหนดตัวแปร multiply เป็น Anonymous Function (Arrow Function) ที่รับ x, y และคืนค่าผลคูณ"
      ],
      "built_in": ["print()", "List.generate()", "Map.from()", "toString()", "int.parse()", "double.parse()"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else", "switch"],
      "loops": ["for", "while", "do...while", "for...in (for-each style)"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!", "?. ", "??", ".."],
      "examples": [
        "if (age >= 18) { print('Adult'); } else { print('Minor'); } => ถ้า age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "for (int i = 0; i < 5; i++) { print(i); } => วนลูปให้ i มีค่าตั้งแต่ 0 ถึง 4 และพิมพ์ค่า i ในแต่ละรอบ",
        "for (var item in my_list) { print(item); } => วนซ้ำใน my_list และพิมพ์ item แต่ละตัว"
      ]
    },
    "frameworks": ["Flutter"],
    "learning_resources": ["Dart.dev", "Flutter.dev", "Effective Dart", "DartPad"],
    "popularity_rank": 14,
    "salary_range": "40,000 - 120,000 บาท/เดือน"
  },
  {
    "id": 23,
    "name": "Zig",
    "slug": "zig",
    "desc": "ภาษาโปรแกรมยุคใหม่ที่ถูกออกแบบมาเพื่อแทนที่ C โดยเน้นความปลอดภัย ความเร็ว และการควบคุมหน่วยความจำอย่างชัดเจน",
    "by": "Andrew Kelley",
    "yr": "2016",
    "level": "2",
    "par": ["Procedural", "Low-level", "Manual memory management", "Systems Programming"],
    "cateid": [2],
    "logo": "img/zig.svg",
    "fields": ["System Programming", "Game Development", "Embedded Systems", "Compiler / Language Design", "Operating Systems", "Cybersecurity"],
    "pros": [
      "เร็วระดับ C แต่ปลอดภัยกว่า (Explicit Error Handling)",
      "ไม่มี undefined behavior (Undefined Behavior Sanitization)",
      "ไม่ต้องใช้ garbage collector (Manual Memory Management)",
      "Cross-compilation ได้ง่ายและเป็นจุดเด่น",
      "สามารถใช้ร่วมกับ C ได้อย่างราบรื่น",
      "Small Standard Library"
    ],
    "cons": [
      "Community ยังเล็กและกำลังเติบโต",
      "ยังอยู่ในสถานะพัฒนา (บาง Library ยังไม่เสถียร)",
      "Syntax ต้องทำความเข้าใจลึกถ้ามาจากภาษาระดับสูง (เน้นความชัดเจน)",
      "Learning Curve ค่อนข้างสูง"
    ],
    "variables": {
      "declaration": ["var", "const"],
      "types": ["i32", "u8", "bool", "f64", "[]const u8 (slice of bytes)", "struct", "enum", "pointer (*)", "optional (?)" ],
      "examples": [
        "const pi: f64 = 3.14; => ประกาศค่าคงที่ pi ชนิด float 64-bit และกำหนดค่าเป็น 3.14",
        "var x: i32 = 10; => ประกาศตัวแปร x ชนิด integer 32-bit และกำหนดค่าเป็น 10",
        "const msg = \"Hello Zig!\"; => ประกาศค่าคงที่ msg เป็นสตริง \"Hello Zig!\"",
        "var ptr: *i32 = &x; => ประกาศตัวแปร ptr เป็น Pointer ชนิด *i32 ที่ชี้ไปยังที่อยู่ของ x"
      ]
    },
    "functions": {
      "declaration": ["fn functionName(params: Type) ReturnType { ... }"],
      "examples": [
        "fn add(a: i32, b: i32) i32 { return a + b; } => ประกาศฟังก์ชัน add ที่รับพารามิเตอร์ a และ b ชนิด i32 และคืนค่า i32 โดยคืนค่าผลรวม",
        "fn main() !void { std.debug.print(\"Hi!\\n\", .{}); } => ประกาศฟังก์ชัน main ที่ไม่คืนค่า (void) แต่สามารถส่ง Error ได้ (!) ซึ่งเป็นจุดเริ่มต้นของโปรแกรม และพิมพ์ \"Hi!\" ออกทางคอนโซล"
      ],
      "built_in": ["std.debug.print()", "std.mem", "std.fs", "std.math", "std.io"]
    },
    "syntax": {
      "comments": ["// Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if", "else if", "else", "switch (รูปแบบ 'switch' ใน Zig จะแตกต่างออกไปเล็กน้อย และครอบคลุม case statement)"],
      "loops": ["while", "for (loop over arrays/slices)", "inline for (compile-time loop)", "loop (infinite loop with break)"],
      "operators": ["+", "-", "*", "/", "%", "==", "!=", "&&", "||", "!", "<<", ">>", "&", "|", "^"],
      "examples": [
        "if (x > 0) { ... } => ถ้า x มากกว่า 0 ให้ทำโค้ดในบล็อก",
        "while (true) { break; } => วนลูปไปเรื่อยๆ และหยุดเมื่อเจอคำสั่ง break",
        "for (array) |item, index| { std.debug.print(\"{}: {}\\n\", .{index, item}); } => วนลูปใน array และพิมพ์ index กับ item"
      ]
    },
    "frameworks": ["None (เน้นการใช้ Standard Library และรองรับ C Libraries ได้ดี)"],
    "learning_resources": ["Ziglang.org (Official Docs)", "Zig Learn", "Zig GitHub Repository", "Ziglings (exercises)"],
    "popularity_rank": 30,
    "salary_range": "40,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 24,
    "name": "HTML",
    "slug": "html",
    "desc": "ภาษา Markup ที่ใช้สำหรับสร้างโครงสร้างของเว็บไซต์ เป็นพื้นฐานในการพัฒนาเว็บทุกประเภท",
    "by": "Tim Berners-Lee",
    "yr": "1993",
    "level": "5",
    "par": ["Markup Language"],
    "cateid": [3],
    "logo": "img/html.jfif",
    "fields": ["Web Frontend", "Mobile Apps (Web Views)", "Desktop Applications (Electron)"],
    "pros": [
      "เป็นพื้นฐานของเว็บไซต์ทั้งหมด",
      "เรียนรู้ได้ง่ายและเริ่มต้นได้รวดเร็ว",
      "สามารถใช้ร่วมกับ CSS และ JavaScript ได้ดีเยี่ยม",
      "รองรับโดย Browser ทุกตัวและเป็นมาตรฐานเปิด",
      "ไม่ต้องติดตั้งโปรแกรมเสริมเพื่อเริ่มต้นใช้งาน"
    ],
    "cons": [
      "ไม่สามารถเขียน Logic การทำงานได้ด้วยตัวเอง (ต้องใช้ JS)",
      "โครงสร้างที่ซับซ้อนมากอาจดูแลรักษายาก",
      "ไม่เหมาะกับการทำ Dynamic Content โดยตรง (ต้องพึ่ง Server-side หรือ JS)"
    ],
    "variables": {
      "declaration": [],
      "types": [],
      "examples": [
        "<!DOCTYPE html> => ประกาศประเภทเอกสารว่าเป็น HTML5 เพื่อให้ Browser แสดงผลได้อย่างถูกต้อง",
        "<html><head><title>My Page</title></head><body></body></html> => โครงสร้างพื้นฐานของเอกสาร HTML ประกอบด้วย Head (ข้อมูล meta) และ Body (เนื้อหา)",
        "<h1>Hello World</h1> => สร้างหัวข้อระดับ 1 ที่มีข้อความ 'Hello World' (ใช้สำหรับหัวข้อหลักของหน้า)",
        "<img src='image.jpg' alt='Image'> => แทรกรูปภาพจากไฟล์ 'image.jpg' พร้อมข้อความกำกับ 'Image' สำหรับกรณีที่รูปภาพไม่แสดงหรือเพื่อวัตถุประสงค์ด้าน Accessibility",
        "<a href='https://example.com'>Go to Example</a> => สร้างลิงก์ไปยัง 'https://example.com' โดยมีข้อความที่แสดงคือ 'Go to Example'"
      ]
    },
    "functions": {
      "declaration": [],
      "examples": [],
      "built_in": []
    },
    "syntax": {
      "comments": ["=> คอมเมนต์ใน HTML ที่จะไม่แสดงผลบนหน้าเว็บ"],
      "conditions": ["(ไม่มีโดยตรงใน HTML, ใช้ JavaScript หรือ CSS Media Queries)"],
      "loops": ["(ไม่มีโดยตรงใน HTML, ใช้ JavaScript หรือ Server-side Scripting)"],
      "operators": ["(ไม่มีโดยตรงใน HTML, เป็นภาษา Markup)"],
      "examples": [
        "<div class='container'>Content</div> => สร้างองค์ประกอบ div ซึ่งเป็น Generic Container ที่มี class ชื่อ 'container' สำหรับการจัดรูปแบบด้วย CSS และมีข้อความ 'Content' อยู่ภายใน",
        "<ul><li>Item 1</li><li>Item 2</li></ul> => สร้างรายการแบบไม่มีลำดับ (unordered list) ที่มีสองรายการคือ 'Item 1' และ 'Item 2' (ใช้สำหรับรายการต่างๆ เช่น เมนู)",
        "<input type='text' placeholder='Enter your name'> => สร้างช่องรับข้อมูลข้อความ (Text Input) พร้อมข้อความแนะนำ 'Enter your name'"
      ]
    },
    "frameworks": ["Bootstrap (CSS Framework ที่ใช้ร่วมกับ HTML)", "Tailwind CSS", "Foundation (CSS Framework)"],
    "learning_resources": ["W3Schools HTML", "MDN Web Docs: HTML", "freeCodeCamp HTML & CSS", "HTML Living Standard"],
    "popularity_rank": 2,
    "salary_range": "20,000 - 60,000 บาท/เดือน"
  },
  {
    "id": 25,
    "name": "CSS",
    "slug": "css",
    "desc": "ภาษาสำหรับจัดรูปแบบการแสดงผลของ HTML เช่น สี ตัวอักษร ระยะห่าง และการจัดวางเลย์เอาต์",
    "by": "Håkon Wium Lie",
    "yr": "1996",
    "level": "5",
    "par": ["Style Sheet Language", "Declarative"],
    "cateid": [3],
    "logo": "img/css.svg",
    "fields": ["Web Frontend", "UI / UX Design", "Responsive Web Design"],
    "pros": [
      "แยกการจัดรูปแบบออกจากโครงสร้าง HTML ทำให้จัดการง่าย",
      "ปรับเปลี่ยน UI ได้อย่างยืดหยุ่นและมีประสิทธิภาพ",
      "รองรับ Responsive Design สำหรับแสดงผลบนอุปกรณ์หลากหลาย",
      "เรียนรู้พื้นฐานได้ง่ายและนำไปใช้งานได้ทันที",
      "มี Library และ Framework จำนวนมากช่วยในการออกแบบ"
    ],
    "cons": [
      "การจัดการ Layout ที่ซับซ้อนอาจต้องใช้เทคนิคเฉพาะ (เช่น Flexbox, Grid)",
      "Cross-browser Rendering อาจไม่ตรงกันในบางครั้ง (ต้องทดสอบหลาย Browser)",
      "การจัดระเบียบโค้ด CSS ขนาดใหญ่อาจเป็นเรื่องท้าทาย (หากไม่ใช้ Methodology เช่น BEM)",
      "ต้องทดสอบกับขนาดหน้าจอและอุปกรณ์ที่หลากหลาย"
    ],
    "variables": {
      "declaration": ["--custom-property-name: value;"],
      "types": ["color", "length (px, em, rem, %)", "percentage", "angle (deg)", "time (s)", "keyword (e.g., auto, solid, none)"],
      "examples": [
        "body { background-color: #f0f0f0; } => เลือกองค์ประกอบ <body> และกำหนดสีพื้นหลังเป็นรหัสสี #f0f0f0 (สีเทาอ่อน)",
        "h1 { font-size: 24px; color: red; } => เลือกองค์ประกอบ <h1> และกำหนดขนาดตัวอักษรเป็น 24px และสีตัวอักษรเป็นสีแดง",
        ".btn { padding: 10px 20px; border-radius: 5px; } => เลือกองค์ประกอบที่มี class ชื่อ .btn และกำหนดระยะห่างด้านใน (padding) 10px บน-ล่าง และ 20px ซ้าย-ขวา รวมถึงกำหนดรัศมีของมุม (border-radius) ให้โค้งมน 5px",
        ":root { --main-color: blue; } => ประกาศ Custom Property (ตัวแปร CSS) ชื่อ --main-color และกำหนดค่าเป็นสีน้ำเงินในระดับ root (สามารถใช้ได้ทั่วทั้งเอกสาร)"
      ]
    },
    "functions": {
      "declaration": ["(N/A for function declaration, fields built-in functions)"],
      "examples": [],
      "built_in": ["calc()", "var()", "url()", "rgb()", "rgba()", "hsl()", "hsla()", "linear-gradient()", "min()", "max()"]
    },
    "syntax": {
      "comments": ["/* This is a multi-line comment */ => คอมเมนต์ใน CSS ที่สามารถครอบคลุมหลายบรรทัด"],
      "conditions": ["@media (min-width: Xpx) { ... } (Media Queries) => กำหนดเงื่อนไขสำหรับการจัดรูปแบบตามขนาดหน้าจอหรือประเภทสื่อ"],
      "loops": ["(ไม่มีโดยตรงใน CSS, ใช้ Preprocessors เช่น Sass/Less)"],
      "operators": ["+", "-", "*", "/", "calc() (for arithmetic operations)"],
      "examples": [
        "div:hover { color: blue; } => เมื่อนำเมาส์ไปชี้ที่องค์ประกอบ <div> (hover state) ให้เปลี่ยนสีตัวอักษรเป็นสีน้ำเงิน (Pseudo-class)",
        "@media (max-width: 768px) { .container { flex-direction: column; } } => เมื่อความกว้างหน้าจอสูงสุด (max-width) คือ 768px (สำหรับอุปกรณ์ขนาดเล็กถึงกลาง) ให้องค์ประกอบที่มี class ชื่อ .container มีทิศทางการจัดเรียง Flex Item เป็นแนวตั้ง (column) (Media Query สำหรับ Responsive Design)",
        "#myId { display: flex; justify-content: center; } => เลือกองค์ประกอบที่มี id ชื่อ #myId และกำหนดให้แสดงผลแบบ Flexbox พร้อมจัดตำแหน่งเนื้อหาให้อยู่ตรงกลาง"
      ]
    },
    "frameworks": ["Bootstrap", "Tailwind CSS", "Bulma", "Materialize CSS", "Semantic UI"],
    "learning_resources": ["MDN Web Docs: CSS", "W3Schools CSS", "CSS-Tricks", "Flexbox Froggy", "Grid Garden"],
    "popularity_rank": 3,
    "salary_range": "20,000 - 60,000 บาท/เดือน"
  },
  {
    "id": 26,
    "name": "PL/SQL",
    "slug": "plsql",
    "desc": "ภาษาขยายของ SQL ที่เพิ่มความสามารถแบบ procedural เช่น if, loop, function ใช้กับ Oracle Database",
    "by": "Oracle Corporation",
    "yr": "1995",
    "level": "5",
    "par": ["Procedural", "Declarative"],
    "cateid": [3],
    "logo": "img/pl-sql.webp",
    "fields": ["Database / SQL", "Enterprise Systems", "Backend Development"],
    "pros": [
      "สามารถเขียน Logic การประมวลผลข้อมูลที่ซับซ้อนได้ในฐานข้อมูล",
      "เหมาะกับงานที่ต้องรัน Logic ใกล้กับ Database เพื่อลด Network Overhead",
      "มีประสิทธิภาพสูงสำหรับ Oracle Database โดยเฉพาะ",
      "สนับสนุน Stored Procedures, Functions, Triggers, Packages"
    ],
    "cons": [
      "ผูกขาดกับ Oracle Database เท่านั้น (ไม่ Portable)",
      "Syntax ค่อนข้างซับซ้อนกว่าการใช้ SQL ธรรมดา",
      "ไม่ใช่ภาษาโปรแกรมทั่วไป ไม่เหมาะกับการพัฒนา Application Layer โดยตรง",
      "Learning Curve สูงสำหรับผู้ที่ไม่มีพื้นฐาน DB Programming"
    ],
    "variables": {
      "declaration": ["DECLARE variable_name DATATYPE [:= initial_value];"],
      "types": ["VARCHAR2", "NUMBER", "DATE", "BOOLEAN", "PLS_INTEGER", "BINARY_INTEGER", "RECORD", "TABLE (Associative Array)"],
      "examples": [
        "DECLARE v_name VARCHAR2(100); BEGIN v_name := 'John Doe'; END; => ประกาศตัวแปร v_name ชนิด VARCHAR2 ขนาด 100 และกำหนดค่าเป็น 'John Doe'",
        "DECLARE v_age NUMBER := 30; BEGIN DBMS_OUTPUT.PUT_LINE('Age is ' || v_age); END; => ประกาศตัวแปร v_age ชนิด NUMBER พร้อมกำหนดค่าเริ่มต้นเป็น 30 และพิมพ์ค่าออกทาง Console",
        "DECLARE v_is_active BOOLEAN := TRUE; BEGIN ... END; => ประกาศตัวแปร v_is_active ชนิด BOOLEAN และกำหนดค่าเป็น TRUE"
      ]
    },
    "functions": {
      "declaration": ["CREATE [OR REPLACE] FUNCTION function_name (param_list) RETURN DATATYPE AS ... END;"],
      "examples": [
        "CREATE FUNCTION get_employee_name (p_emp_id NUMBER) RETURN VARCHAR2 IS v_name VARCHAR2(100); BEGIN SELECT name INTO v_name FROM employees WHERE emp_id = p_emp_id; RETURN v_name; END; => สร้างฟังก์ชันชื่อ get_employee_name ที่รับรหัสพนักงาน (p_emp_id) และคืนชื่อพนักงานจากการค้นหาในตาราง employees",
        "CREATE PROCEDURE update_salary (p_emp_id NUMBER, p_new_salary NUMBER) IS BEGIN UPDATE employees SET salary = p_new_salary WHERE emp_id = p_emp_id; END; => สร้าง Stored Procedure ชื่อ update_salary เพื่ออัปเดตเงินเดือนพนักงาน"
      ],
      "built_in": ["DBMS_OUTPUT.PUT_LINE", "TO_CHAR", "TO_DATE", "NVL", "SUBSTR", "LENGTH", "SYSDATE", "SQL%ROWCOUNT", "SQLCODE", "SQLERRM"]
    },
    "syntax": {
      "comments": ["-- Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["IF...THEN...ELSIF...ELSE...END IF;", "CASE WHEN...THEN...ELSE...END;"],
      "loops": ["LOOP...EXIT WHEN condition...END LOOP;", "FOR variable IN start..end LOOP...END LOOP;", "WHILE condition LOOP...END LOOP;", "FOR record_name IN (SELECT ...) LOOP...END LOOP; (Cursor Loop)"],
      "operators": ["+", "-", "*", "/", "**", "=", "!=", ">", "<", ">=", "<=", "AND", "OR", "NOT", "|| (concatenation)"],
      "examples": [
        "IF v_age >= 18 THEN DBMS_OUTPUT.PUT_LINE('Adult'); ELSIF v_age BETWEEN 13 AND 17 THEN DBMS_OUTPUT.PUT_LINE('Teenager'); ELSE DBMS_OUTPUT.PUT_LINE('Minor'); END IF; => ใช้ IF-ELSIF-ELSE เพื่อตรวจสอบช่วงอายุ",
        "FOR i IN 1..10 LOOP DBMS_OUTPUT.PUT_LINE(i); END LOOP; => วนลูปให้ i มีค่าตั้งแต่ 1 ถึง 10 และพิมพ์ค่า i ในแต่ละรอบ",
        "WHILE v_counter < 5 LOOP DBMS_OUTPUT.PUT_LINE('Count: ' || v_counter); v_counter := v_counter + 1; END LOOP; => วนลูปตราบเท่าที่ v_counter น้อยกว่า 5"
      ]
    },
    "frameworks": ["(เป็นส่วนหนึ่งของ Oracle Database Environment)"],
    "learning_resources": ["Oracle PL/SQL Documentation", "W3Schools SQL (ส่วนที่เกี่ยวข้องกับ PL/SQL)", "Oracle Learning Library", "Guru99 PL/SQL Tutorial"],
    "popularity_rank": 26,
    "salary_range": "40,000 - 120,000 บาท/เดือน"
  },
  {
    "id": 27,
    "name": "T-SQL",
    "slug": "tsql",
    "desc": "ภาษาขยายของ SQL สำหรับ Microsoft SQL Server ที่เพิ่ม control flow และฟังก์ชันต่าง ๆ",
    "by": "Microsoft",
    "yr": "1990",
    "level": "5",
    "par": ["Procedural", "Declarative"],
    "cateid": [3],
    "logo": "img/tsql.png",
    "fields": ["Database / SQL", "Business Intelligence", "Data Warehousing", "Backend Development"],
    "pros": [
      "มีฟีเจอร์ครบถ้วนสำหรับการจัดการ Microsoft SQL Server",
      "สามารถผสมผสาน Logic การทำงานแบบ Procedural เข้ากับ SQL ได้ดี",
      "ใช้กันอย่างแพร่หลายในองค์กรที่ใช้ Microsoft Technologies",
      "รองรับ Stored Procedures, Functions, Triggers, Views"
    ],
    "cons": [
      "ผูกขาดกับ Microsoft SQL Server เท่านั้น (ไม่ Portable)",
      "ไม่ใช่ภาษามาตรฐานกลางของ SQL (มี Syntax เฉพาะ)",
      "ไม่ใช้ได้ทั่วไปกับฐานข้อมูลอื่น ๆ",
      "Learning Curve สำหรับผู้เริ่มต้น DB Programming"
    ],
    "variables": {
      "declaration": ["DECLARE @variable_name DATATYPE [= initial_value];"],
      "types": ["INT", "VARCHAR", "NVARCHAR", "DATE", "DATETIME", "BIT", "DECIMAL", "MONEY", "TABLE (Table Variable)"],
      "examples": [
        "DECLARE @name VARCHAR(100); SET @name = 'Jane Doe'; => ประกาศตัวแปร @name ชนิด VARCHAR ขนาด 100 และกำหนดค่าเป็น 'Jane Doe'",
        "DECLARE @age INT = 25; => ประกาศตัวแปร @age ชนิด INT พร้อมกำหนดค่าเริ่มต้นเป็น 25",
        "DECLARE @total_amount DECIMAL(18, 2); SELECT @total_amount = SUM(OrderTotal) FROM Orders; => ประกาศตัวแปร @total_amount และกำหนดค่าจากผลรวมของคอลัมน์ OrderTotal"
      ]
    },
    "functions": {
      "declaration": ["CREATE FUNCTION function_name(...) RETURNS DATATYPE AS BEGIN ... RETURN value; END;"],
      "examples": [
        "CREATE FUNCTION dbo.CalculateTax (@amount DECIMAL(10, 2)) RETURNS DECIMAL(10, 2) AS BEGIN RETURN @amount * 0.07; END; => สร้างฟังก์ชันชื่อ CalculateTax ที่รับ @amount ชนิด DECIMAL และคืนค่า DECIMAL โดยคำนวณภาษี 7%",
        "CREATE PROCEDURE GetEmployeeDetails (@EmpID INT) AS BEGIN SELECT * FROM Employees WHERE EmployeeID = @EmpID; END; => สร้าง Stored Procedure ชื่อ GetEmployeeDetails ที่รับรหัสพนักงานและเลือกข้อมูลพนักงาน"
      ],
      "built_in": ["PRINT", "GETDATE()", "DATEDIFF()", "LEN()", "UPPER()", "LOWER()", "COUNT()", "SUM()", "AVG()", "ISNULL()", "CAST()"]
    },
    "syntax": {
      "comments": ["-- Single line => คอมเมนต์บรรทัดเดียว", "/* Multi line */ => คอมเมนต์หลายบรรทัด"],
      "conditions": ["IF...ELSE", "CASE WHEN...THEN...ELSE...END"],
      "loops": ["WHILE condition BEGIN...END;", "CURSOR (for row-by-row processing)"],
      "operators": ["+", "-", "*", "/", "%", "=", "<>", ">", "<", ">=", "<=", "AND", "OR", "NOT", "LIKE", "IN", "BETWEEN"],
      "examples": [
        "IF @age >= 18 BEGIN PRINT 'Adult'; END ELSE BEGIN PRINT 'Minor'; END; => ถ้า @age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "WHILE @counter <= 5 BEGIN PRINT @counter; SET @counter = @counter + 1; END; => วนลูปตราบเท่าที่ @counter น้อยกว่าหรือเท่ากับ 5 และเพิ่มค่า @counter ทีละ 1 ในแต่ละรอบ",
        "SELECT ProductName, CASE WHEN StockQuantity > 0 THEN 'In Stock' ELSE 'Out of Stock' END AS StockStatus FROM Products; => เลือก ProductName และสร้างคอลัมน์ StockStatus โดยใช้ CASE WHEN เพื่อแสดงสถานะสต็อก"
      ]
    },
    "frameworks": ["(เป็นส่วนหนึ่งของ Microsoft SQL Server Ecosystem)"],
    "learning_resources": ["Microsoft Docs: T-SQL", "SQLShack", "Brent Ozar Unlimited (Performance)", "SQL Server Central"],
    "popularity_rank": 27,
    "salary_range": "40,000 - 120,000 บาท/เดือน"
  },
  {
    "id": 28,
    "name": "PowerShell",
    "slug": "powershell",
    "desc": "ภาษาสคริปต์สำหรับระบบปฏิบัติการ Windows ที่สามารถควบคุมระบบและจัดการไฟล์, Registry และบริการต่าง ๆ",
    "by": "Microsoft",
    "yr": "2006",
    "level": "2",
    "par": ["Scripting", "Object-oriented", "Functional (elements)"],
    "cateid": [4],
    "logo": "img/powershell.png",
    "fields": ["Scripting / Automation", "DevOps / Automation", "System Administration", "Cloud Infrastructure (Azure)"],
    "pros": [
      "จัดการ Windows ได้อย่างลึกซึ้งและมีประสิทธิภาพ",
      "สามารถจัดการกับ .NET Objects ได้โดยตรง",
      "รองรับ Cross-platform (PowerShell Core บน Linux/macOS)",
      "มี Cmdlets (Command-lets) จำนวนมากสำหรับงานบริหารระบบ",
      "เหมาะสำหรับการทำ Automation และงาน Infrastructure as Code"
    ],
    "cons": [
      "Syntax แปลกและมี Learning Curve สำหรับผู้ที่ไม่คุ้นเคยกับ Shell อื่นๆ",
      "มี Dependency กับ Windows Ecosystem เดิม (แม้จะมี Core Version)",
      "ประสิทธิภาพอาจช้ากว่า Scripting Language อื่นๆ สำหรับงานบางประเภท",
      "Community เล็กกว่าภาษาหลัก"
    ],
    "variables": {
      "declaration": ["$variableName = value"],
      "types": ["String", "Int32", "Boolean", "Array", "HashTable", "PSObject (Generic Object)", "DateTime", "Double"],
      "examples": [
        "$name = 'Alice' => กำหนดตัวแปร $name เป็นสตริง 'Alice'",
        "$age = 25 => กำหนดตัวแปร $age เป็นตัวเลข 25 (ชนิดจะถูกอนุมานโดย PowerShell)",
        "$isActive = $True => กำหนดตัวแปร $isActive เป็นบูลีน $True (ค่าจริง)",
        "$files = Get-ChildItem -Path C:\\Temp => กำหนดตัวแปร $files เป็นลิสต์ของ Object ไฟล์/โฟลเดอร์ใน C:\\Temp"
      ]
    },
    "functions": {
      "declaration": ["function Function-Name { param(...) ... }", "Cmdlet-style function"],
      "examples": [
        "function Say-Hello { param($Name) \"Hello $Name\" } => ประกาศฟังก์ชันชื่อ Say-Hello ที่รับพารามิเตอร์ $Name และคืนค่าสตริง 'Hello ' ตามด้วย $Name",
        "function Add-Numbers { param([int]$a, [int]$b) return ($a + $b) } => ประกาศฟังก์ชันชื่อ Add-Numbers ที่รับ $a และ $b ชนิด Int และคืนค่าผลรวม"
      ],
      "built_in": ["Write-Host", "Get-ChildItem", "Set-Item", "Remove-Item", "Invoke-Command", "Select-Object", "Where-Object", "ForEach-Object", "New-Item"]
    },
    "syntax": {
      "comments": ["# Single line => คอมเมนต์บรรทัดเดียว", "<# Multi line #> => คอมเมนต์หลายบรรทัด"],
      "conditions": ["if...else if...else", "switch"],
      "loops": ["for", "foreach", "while", "do...while"],
      "operators": ["-eq", "-ne", "-gt", "-lt", "-ge", "-le", "-and", "-or", "-not", "+", "-", "*", "/", "%"],
      "examples": [
        "if ($age -ge 18) { Write-Host 'Adult' } else { Write-Host 'Minor' } => ถ้า $age มากกว่าหรือเท่ากับ 18 ให้พิมพ์ 'Adult' ไม่อย่างนั้นพิมพ์ 'Minor'",
        "foreach ($file in $files) { Write-Host $file.Name } => วนซ้ำในลิสต์ $files และพิมพ์ชื่อของแต่ละไฟล์",
        "switch ($status) { 'Active' { 'User is active' } 'Inactive' { 'User is inactive' } default { 'Unknown status' } } => ใช้ switch เพื่อจัดการเงื่อนไขตามค่าของ $status"
      ]
    },
    "frameworks": ["PowerShell Desired State Configuration (DSC)"],
    "learning_resources": ["Microsoft Docs: PowerShell", "PowerShell Gallery", "Learn PowerShell in a Month of Lunches", "PowerShell in Action"],
    "popularity_rank": 21,
    "salary_range": "35,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 29,
    "name": "Zsh",
    "slug": "zsh",
    "desc": "Shell ที่พัฒนาจาก Bash เพิ่มความสามารถเช่น autocomplete, plugin, และ theme ใช้งานบน Unix/Linux/macOS",
    "by": "Paul Falstad",
    "yr": "1990",
    "level": "3",
    "par": ["Scripting", "Interactive Shell"],
    "cateid": [4],
    "logo": "img/zsh.jfif",
    "fields": ["Scripting / Automation", "DevOps / Automation", "System Administration", "Command Line Interface (CLI)"],
    "pros": [
      "ความสามารถในการปรับแต่งสูง (Customizable)",
      "มี Ecosystem ของ Plugin และ Theme ที่ใหญ่ (เช่น Oh My Zsh)",
      "Autocomplete ที่ทรงพลังและใช้งานง่าย",
      "ทำงานร่วมกับ Bash Commands ได้เป็นอย่างดี",
      "รองรับการใช้งานใน Terminal ที่มีประสิทธิภาพ"
    ],
    "cons": [
      "บางคำสั่งหรือ Syntax อาจไม่ Compatible กับ Bash 100%",
      "ต้องมีการ Setup เพิ่มเติมเพื่อให้ได้ประสิทธิภาพและหน้าตาที่ต้องการ",
      "อาจใช้ทรัพยากรมากกว่า Bash เล็กน้อย (เมื่อมี Plugin เยอะ)",
      "ไม่เป็น Default Shell ในทุก Linux Distribution"
    ],
    "variables": {
      "declaration": ["variable_name=value", "typeset variable_name=value"],
      "types": ["string (ทั้งหมดเป็น string โดยปริยาย)", "array (indexed, associative)"],
      "examples": [
        "name=\"Bob\" => กำหนดตัวแปร name เป็นสตริง 'Bob'",
        "age=30 => กำหนดตัวแปร age เป็นสตริง '30' (ใน Shell ทุกอย่างเป็นสตริงโดยปริยาย)",
        "files=(*.txt) => กำหนดตัวแปร files เป็นอาร์เรย์ของชื่อไฟล์ .txt ทั้งหมดในไดเรกทอรีปัจจุบัน",
        "declare -A user_info=(name Bob age 30) => ประกาศตัวแปร user_info เป็น Associative Array"
      ]
    },
    "functions": {
      "declaration": ["function_name() { commands }", "function function_name { commands }"],
      "examples": [
        "greet() { echo \"Hello $1\"; } => ประกาศฟังก์ชันชื่อ greet ที่พิมพ์ 'Hello' ตามด้วยพารามิเตอร์ตัวแรก ($1)",
        "add() { echo $(( $1 + $2 )); } => ประกาศฟังก์ชันชื่อ add ที่พิมพ์ผลรวมของพารามิเตอร์ตัวแรก ($1) และตัวที่สอง ($2) โดยใช้การคำนวณทางคณิตศาสตร์"
      ],
      "built_in": ["echo", "read", "if", "for", "while", "test", "[ ]", "[[ ]]", "grep", "awk", "sed", "find", "setopt", "unsetopt", "alias"]
    },
    "syntax": {
      "comments": ["# Single line => คอมเมนต์บรรทัดเดียว"],
      "conditions": ["if...then...else...fi", "case...in...esac", "[[ expression ]] (Enhanced conditional expression)"],
      "loops": ["for...in...do...done", "while...do...done", "until...do...done", "for (( expr1; expr2; expr3 ))"],
      "operators": ["-eq", "-ne", "-gt", "-lt", "-ge", "-le", "==", "!=", "&&", "||", "-f (file exists)", "-d (directory exists)"],
      "examples": [
        "if [[ $age -gt 18 ]]; then echo \"Adult\"; fi => ถ้าตัวแปร $age มีค่ามากกว่า 18 ให้พิมพ์ \"Adult\" (ใช้ [[ ]] สำหรับการเปรียบเทียบขั้นสูงและปลอดภัยกว่า [ ])",
        "for i in {1..5}; do echo $i; done => วนลูปให้ i มีค่าตั้งแต่ 1 ถึง 5 และพิมพ์ค่า $i ในแต่ละรอบ (Zsh specific brace expansion)",
        "select opt in \"Apple\" \"Banana\" \"Orange\"; do echo \"You chose $opt\"; break; done => สร้างเมนูเลือกและดำเนินการตามตัวเลือก"
      ]
    },
    "frameworks": ["Oh My Zsh", "Prezto", "Antigen"],
    "learning_resources": ["Zsh Manual", "Oh My Zsh GitHub", "ArchWiki Zsh", "The Zsh Reference Manual"],
    "popularity_rank": 24,
    "salary_range": "35,000 - 100,000 บาท/เดือน"
  },
  {
    "id": 30,
    "name": "NPM Scripts",
    "slug": "npm-scripts",
    "desc": "ระบบรันคำสั่งแบบ script ใน Node.js ผ่าน package.json โดยไม่ต้องใช้ task runner ภายนอก",
    "by": "Node.js Foundation",
    "yr": "2014",
    "level": "5",
    "par": ["Scripting"],
    "cateid": [5],
    "logo": "img/npm.jfif",
    "fields": ["DevOps / Automation", "Web Frontend", "Web Backend", "Scripting / Automation", "Build Tools"],
    "pros": [
      "ใช้ง่าย ไม่ต้องติดตั้ง Tool เพิ่มเติม (มาพร้อม NPM/Node.js)",
      "ใช้รันคำสั่งซ้ำๆ ใน Development Workflow ได้อย่างมีประสิทธิภาพ",
      "ทำงานร่วมกับทุก Node.js Package และ Command Line Tool ได้ดี",
      "ทำให้ Project Dependencies ชัดเจนใน `package.json`",
      "Cross-platform Compatible (NPM จัดการความแตกต่างของ Shell ให้)"
    ],
    "cons": [
      "Script ที่ซับซ้อนมากๆ อาจอ่านและดูแลรักษายาก",
      "Debug ยากกว่าการใช้ Tool เฉพาะทางสำหรับ Task Runner",
      "ไม่มี Features เพิ่มเติมแบบ Task Runner จริงจัง (เช่น Watchers, File System Operations โดยตรง)",
      "Error Handling อาจไม่ละเอียดเท่าที่ควร"
    ],
    "variables": {
      "declaration": ["(Environment variables)"],
      "types": ["(ขึ้นอยู่กับ Shell ที่รันคำสั่ง เช่น String)"],
      "examples": [
        "\"start\": \"node server.js\" => กำหนดสคริปต์ชื่อ 'start' ให้รันคำสั่ง node server.js (สำหรับเริ่ม Server)",
        "\"build\": \"npm run clean && webpack --mode production\" => กำหนดสคริปต์ชื่อ 'build' ให้รันสคริปต์ 'clean' ก่อน แล้วจึงรัน webpack ในโหมด production",
        "\"test\": \"jest --watchAll\" => กำหนดสคริปต์ชื่อ 'test' ให้รัน Jest ในโหมด watchAll (สำหรับการทดสอบ)",
        "\"deploy\": \"cross-env NODE_ENV=production npm run build && firebase deploy\" => กำหนดสคริปต์ 'deploy' โดยใช้ Environment Variable และรันสคริปต์ 'build' ก่อนแล้วจึง Deploy ไปยัง Firebase"
      ]
    },
    "functions": {
      "declaration": [],
      "examples": [],
      "built_in": ["npm run <script-name>", "npm install", "npm start", "npm test", "npm stop"]
    },
    "syntax": {
      "comments": ["(ใช้คอมเมนต์ของ Shell ที่รันคำสั่ง เช่น // หรือ #)"],
      "conditions": ["&& (AND Operator)", "|| (OR Operator) => ใช้ Operator ของ Shell เพื่อเชื่อมคำสั่งแบบมีเงื่อนไข", "; (Sequential command)"],
      "loops": ["(ใช้ Loop ของ Shell ที่รัน หรือ JavaScript/Node.js Script ภายใน)"],
      "operators": ["&&", "||", "> (Redirect output)", ">> (Append output)", "< (Redirect input)"],
      "examples": [
        "\"dev\": \"npm run serve-frontend & npm run serve-backend\" => รันสคริปต์ 'serve-frontend' และ 'serve-backend' พร้อมกัน (ในพื้นหลังบน Unix-like systems)",
        "\"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx --fix || true\" => รัน ESLint และถ้ามีข้อผิดพลาด (Exit Code ไม่ใช่ 0) ให้ละเว้นและถือว่าสำเร็จ (true) เพื่อไม่ให้ Build Process ล้มเหลว",
        "\"clean\": \"rm -rf dist || rimraf dist\" => ลบโฟลเดอร์ dist (รองรับทั้ง Unix-like และ Windows ด้วย rimraf)"
      ]
    },
    "frameworks": ["(ใช้กับ Node.js Project และ Build Tools ต่างๆ เช่น Webpack, Babel)"],
    "learning_resources": ["NPM Docs: scripts", "Node.js documentation", "Frontend Masters (courses on Build Tools)", "Smashing Magazine (articles on NPM Scripts)"],
    "popularity_rank": 8,
    "salary_range": "25,000 - 80,000 บาท/เดือน"
  },
  {
    "id": 31,
    "name": "Rust",
    "slug": "rust",
    "desc": "A programming language that prioritizes memory safety and high performance, suitable for System Programming.",
    "by": "Mozilla",
    "yr": "2010",
    "level": "2",
    "par": [
        "Imperative", "Functional", "Concurrent"
    ],
    "cateid": [4],
    "logo": "img/rust.jfif",
    "fields": [
      "Operating Systems",
      "Web Browsers",
      "Game Engines",
      "Blockchain",
      "WebAssembly"
    ],
    "pros": [
      "Memory safety without garbage collection",
      "Zero-cost abstractions",
      "Thread safety guaranteed by compiler",
      "Performance comparable to C/C++",
      "Pattern matching and algebraic data types",
      "Great package manager (Cargo)",
      "Growing ecosystem and community"
    ],
    "cons": [
      "Steep learning curve",
      "Borrow checker can be challenging initially",
      "Slower compile times compared to other languages",
      "Limited job market",
      "Complex lifetime management",
      "Still evolving ecosystem"
    ],
    "variables": {
      "declaration": [
        "let (immutable) => Used to declare a constant that cannot be changed",
        "let mut (mutable) => Used to declare a variable that can be changed"
      ],
      "types": [
        "i32 => 32-bit integer numbers",
        "f64 => 64-bit floating-point numbers",
        "String => Mutable (owned, heap-allocated) text strings",
        "bool => Boolean values (true/false)",
        "Vec<T> => Dynamic array (vector) of type T",
        "HashMap => Unordered collection of key-value pairs",
        "Option<T> => Enum representing a value that may or may not be present (Some(T) or None)"
      ],
      "examples": [
        "let name = \"Alice\"; => Declares a constant 'name' as a string with value \"Alice\"",
        "let mut age = 25; => Declares a mutable variable 'age' as an integer with value 25",
        "let is_active: bool = true; => Declares a constant 'is_active' as a bool with value true (explicit type)",
        "let numbers = vec![1, 2, 3, 4, 5]; => Declares a vector of integers with initial values",
        "let mut scores = HashMap::new(); => Declares a mutable HashMap and creates a new instance",
        "let maybe_value: Option<i32> = Some(42); => Declares an optional value with a value of Some(42)"
      ]
    },
    "functions": {
      "declaration": [
        "fn keyword => Uses the 'fn' keyword to declare a function"
      ],
      "examples": [
        "fn greet(name: &str) -> String { format!(\"Hello {}\", name) } => A function named 'greet' that takes a string slice (reference) and returns a String",
        "fn add(a: i32, b: i32) -> i32 { a + b } => A function named 'add' that takes two integers and returns their sum",
        "fn main() { println!(\"Hello, world!\"); } => The main function (entry point) of a Rust program",
        "fn process_data<T>(data: Vec<T>) -> Result<T, Error> { } => A generic function named 'process_data' that returns a Result (Success/Error)"
      ],
      "built_in": [
        "println!() => Macro for printing data to the console",
        "format!() => Macro for formatting strings",
        "vec![] => Macro for creating vectors",
        "panic!() => Macro for causing the program to stop and display an error message",
        "assert!() => Macro for checking if a condition is true"
      ]
    },
    "syntax": {
      "comments": [
        "// Single line => Single-line comment",
        "/* Multi line */ => Multi-line comment"
      ],
      "conditions": [
        "if...else => Conditional statement: execute one block if true, another if false",
        "match => Powerful control flow operator for pattern matching"
      ],
      "loops": [
        "loop => Infinite loop",
        "while => Loop that continues as long as a condition is true",
        "for...in => Loop for iterating over elements in an iterator"
      ],
      "operators": [
        "+ => Addition",
        "- => Subtraction",
        "* => Multiplication",
        "/ => Division",
        "% => Modulo (remainder of division)",
        "== => Equality",
        "!= => Inequality",
        "< => Less than",
        "> => Greater than",
        "&& => Logical AND",
        "|| => Logical OR",
        "! => Logical NOT"
      ],
      "examples": [
        "if age >= 18 { println!(\"Adult\"); } => If age is greater than or equal to 18, print \"Adult\"",
        "for i in 0..10 { println!(\"{}\", i); } => Loop that prints numbers from 0 to 9",
        "match grade { 'A' => println!(\"Excellent\"), _ => println!(\"Good\") } => Uses 'match' to check the value of 'grade': if 'A', print \"Excellent\"; otherwise, print \"Good\"",
        "loop { break; } => An infinite loop that will stop when 'break' is encountered"
      ]
    },
    "frameworks": [
      "Actix-web",
      "Rocket",
      "Tokio",
      "Serde",
      "Diesel",
      "Tauri"
    ],
    "learning_resources": [
      "The Rust Book",
      "Rust by Example",
      "Rustlings",
      "Programming Rust"
    ],
    "popularity_rank": 14,
    "salary_range": "70,000 - 200,000 บาท/เดือน"
  },
  {
    "id": 32,
    "name": "Svelte",
    "slug": "svelte",
    "desc": "A framework that compiles to vanilla JavaScript, aiming for the smallest bundle size and highest performance with no Virtual DOM overhead.",
    "by": "Rich Harris",
    "yr": "2016",
    "level": "4",
    "par": ["Component-based", "Reactive"],
    "cateid": [1],
    "logo": "img/svelte.png",
    "fields": [
      "Web Frontend",
      "Mobile Apps"
    ],
    "pros": [
      "No Virtual DOM - high performance",
      "Very small bundle size",
      "Built-in state management",
      "Easy-to-learn syntax",
      "Compile-time optimizations",
      "Built-in animations and transitions",
      "Less boilerplate code"
    ],
    "cons": [
      "Smaller ecosystem compared to React/Vue",
      "Limited job opportunities",
      "Fewer third-party components",
      "Still relatively new framework",
      "Less community support",
      "Limited tooling compared to mature frameworks"
    ],
    "variables": {
      "declaration": [
        "Reactive declarations => Declaring variables whose changes automatically update the UI"
      ],
      "types": [
        "Same as JavaScript => Data types are the same as JavaScript"
      ],
      "examples": [
        "let name = 'Alice'; => Declares a variable 'name' as a string with value 'Alice'",
        "let count = 0; => Declares a variable 'count' as an integer with value 0",
        "$: doubled = count * 2; => Reactive declaration: 'doubled' recalculates every time 'count' changes",
        "let items = [1, 2, 3]; => Declares a variable 'items' as an array of numbers",
        "$: filteredItems = items.filter(x => x > 1); => Reactive declaration: 'filteredItems' refilters 'items' every time 'items' changes"
      ]
    },
    "functions": {
      "declaration": [
        "JavaScript functions + Svelte reactivity => JavaScript functions that work with Svelte's reactivity system"
      ],
      "examples": [
        "function handleClick() { count += 1; } => A function that increments 'count' when called",
        "const greet = (name) => `Hello ${name}`; => A function that takes a name and returns a greeting message",
        "$: if (count >= 10) { alert('Count is high!'); } => Reactive statement: if 'count' is 10 or more, an alert is shown",
        "export function createUser(name) { return { name, id: Date.now() }; } => A function that is exported so other components can use it"
      ],
      "built_in": [
        "tick() => Returns a promise that resolves when the next DOM update occurs",
        "createEventDispatcher() => Used to create and dispatch custom events from child to parent components",
        "onMount() => Lifecycle hook that runs when the component is mounted to the DOM",
        "onDestroy() => Lifecycle hook that runs when the component is destroyed from the DOM"
      ]
    },
    "syntax": {
      "comments": [
        "=> Comments within the HTML section",
        "// JS comments => Comments within the JavaScript section"
      ],
      "conditions": [
        "{#if} => Conditional block: displays content if true",
        "{#else} => Block to display when the 'if' condition is false",
        "{#else if} => Additional conditional block when previous conditions are false"
      ],
      "loops": [
        "{#each} => Block for iterating over items in an array",
        "{#await} => Block for handling Promises (loading, fulfilled, rejected states)"
      ],
      "operators": [
        "Same as JavaScript => Same as JavaScript"
      ],
      "examples": [
        "{#if user} <p>Hello {user.name}!</p> {/if} => If 'user' exists, display a greeting message",
        "{#each items as item} <div>{item}</div> {/each} => Iterates through 'items' and displays each item",
        "<button on:click={handleClick}>Click me</button> => Attaches a click event listener to the 'handleClick' function",
        "<input bind:value={name} /> => Two-way data binding: the input's value is bound to the 'name' variable"
      ]
    },
    "frameworks": [
      "SvelteKit",
      "Sapper",
      "Svelte Native",
      "Elder.js"
    ],
    "learning_resources": [
      "Svelte Tutorial",
      "Svelte School",
      "The Svelte Handbook",
      "Svelte Society"
    ],
    "popularity_rank": 15,
    "salary_range": "45,000 - 130,000 บาท/เดือน"
  }
]